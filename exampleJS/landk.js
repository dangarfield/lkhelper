(function () {
    var V = {};
    var Ce = {};
    var Ai = {};
    var bi = {};
    var Qe = {};
    var gi = {};
    var ye = {};
    var ke = {};
    var Be = {};
    var e = {};
    var yi = {};
    var N = {};
    var K = {};
    var Si = {};
    var fi = {};
    var m = {};
    var G = {};
    var pi = {};
    var De = {};
    var O = {};
    var Je = {};
    var Ge = {};
    var li = {};
    var He = {};
    var xi = {};
    var Oi = {};
    var ri = {};
    var Ze = {};
    var Oe = {};
    var si = {};
    var Re = {};
    var ai = {};
    var n = {};
    var ii = {};
    var ei = {};
    var R = {};
    var Q = {};
    var ne = {};
    var ti = {};
    var di = {};
    var ci = {};
    var Ye = {};
    var $e = {};
    var w = {};
    var I = {};
    var k = {};
    var vi = {};
    var _i = {};
    var Se = {};
    var l = {};
    var Z = {};
    var ue = {};
    var L = {};
    var P = {};
    var b = {};
    var Y = {};
    var fe = {};
    var ae = {};
    var Le = {};
    var We = {};
    var q = {};
    var Mi = {};
    var H = {};
    var _e = {};
    var p = {};
    var r = {};
    r.InvitationManager = {};
    r.ReportDetails = {};
    var X = {};
    var d = {};
    var ui = {};
    var Pe = {};
    var Ie = {};
    var hi = {};
    var ni = {};
    var oi = {};
    var Te = {};
    var D = {};
    var ge = {};
    var Ne = {};
    var F = {};
    var z = {};
    var se = {};
    var pe = {};
    var B = {};
    var x = {};
    var g = {};
    var T = {};
    var Ee = {};
    var i = {};
    var ve = {};
    var Di = {};
    Di.eventHelper = {};
    var ie = {};
    var U = {};
    var Ve = {};
    var s = {};
    var c;
    var A;
    var oe;
    var Fe;
    var qe;
    var E;
    var be;
    var t;
    var ee;
    var we;
    var u;
    var o;
    var W;
    var ze;
    var S;
    var y;
    var te;
    var Ci;
    var h = {
        ALL: -1,
        INVITE_PLAYER: 1,
        DISMISS_PLAYER: 2,
        MODERATE_FORUM: 4,
        MASS_MAIL: 8,
        DIPLOMATIC_RELATIONS: 16,
        PLAYER_PERMISSIONS: 32,
        DISBAND_ALLIANCE: 64,
        MAX: 127
    };
    var le = {
        VASSAL: 3,
        ALLY: 2,
        NAP: 1,
        NEUTRAL: 0,
        ENEMY: -1,
        ALL: -2
    };
    var f = {
        ATTACK_WARNING: 1,
        MISSION_FINISHED: 2,
        KNOWLEDGE_RESEARCHED: 3,
        TRANSIT_RETURNED: 6,
        SPY_FINISHED: 7,
        BATTLE_ROUND_FINISHED: 8,
        LOST_FOREIGN_DEFENDER: 9,
        CONQUEST_FAILED: 10,
        CONQUEST: 11,
        SPY_CAPTURED: 13,
        DELIVERED_RESOURCES: 14,
        DELIVERED_DEFENSE: 15
    };
    var v = {
        DEFENSE: 0,
        TRANSIT_DEFENSE: 1,
        ATTACKER: 2,
        TRANSIT_ATTACKER: 3,
        TRANSPORT: 4,
        TRANSIT_TRANSPORT: 5,
        SPY: 6,
        TRANSIT_SPY: 7
    };
    var C = {
        OWN_HABITAT: 0,
        EXTERNAL_UNITS_TO_DEFENSE: 1,
        ATTACKER: 2
    };
    var a = {
        WOOD: "1",
        STONE: "2",
        ORE: "3",
        PEOPLE: "4",
        COPPER: "5",
        SILVER: "6",
        GOLD: "7",
        TIME: "99"
    };
    var he = {
        1: "Wood",
        2: "Stone",
        3: "Ore",
        4: "People",
        5: "Copper",
        6: "Silver",
        7: "Gold"
    };
    var je = {
        WOOD: 1,
        STONE: 2,
        ORE: 3,
        PEOPLE: 4,
        COPPER: 5,
        SILVER: 6,
        GOLD: 7
    };
    var Xe = {
        GREEN: "#008000",
        YELLOW: "#e63333",
        RED: "#ff8000"
    };
    var J = {
        SPEARMAN: 1,
        SWORDMAN: 2,
        ARCHER: 101,
        CROSSBOWMAN: 102,
        SCORPIONRIDER: 201,
        LANCER: 202,
        PUSHCART: 10001,
        OXCART: 10002
    };
    var xe = {
        BUILDCOST: 0,
        BUILDSPEED: 1,
        AMOUNTSTORE: 2,
        AMOUNTGENERATE: 3,
        OFFENSE: 4,
        DEFENSE: 5,
        MOVEMENTSPEED: 6
    };
    var Ii = 1e3;
    var re = {
        BACKGROUND: "#21301f",
        NEUTRAL: "#2b2b2b",
        FREE: "#888888",
        NAP: "#0079ff",
        ENEMY: "#c04011",
        MARKED: "#d600c6",
        OWN: "#ffffff",
        ALLIANCE: "#ffe400",
        VASALL: "#ff7f00",
        ALLY: "#64a842"
    };
    var wi = {
        Lumberjack: "Wood Store",
        Quarry: "Stone Store",
        "Ore Mine": "Ore Store"
    };
    var ce = "1.0";
    var M = {
        NEUTRAL: {
            BG: "rgba(43, 43, 43, " + ce + ")",
            FG: "rgb(255, 255, 255)"
        },
        MARKED: {
            BG: "rgba(212, 0, 196, " + ce + ")",
            FG: "rgb(0, 0, 0)"
        },
        ATTACKED: {
            BG: "rgba(255, 0, 255, " + ce + ")",
            BG_BLINK: "255, 0, 255",
            FG: "rgb(255, 255, 255)"
        },
        ATTACKER: {
            BG: "rgba(0, 255, 255, " + ce + ")",
            BG_BLINK: "0, 255, 255",
            FG: "rgb(0, 0, 0)"
        },
        OWN: {
            BG: "rgba(255, 255, 255, " + ce + ")",
            FG: "rgb(0, 0, 0)"
        },
        ENEMY: {
            BG: "rgba(230, 51, 51, " + ce + ")",
            FG: "rgb(0, 0, 0)"
        },
        NAP: {
            BG: "rgba(165, 201, 254, " + ce + ")",
            FG: "rgb(0, 0, 0)"
        },
        ALLY: {
            BG: "rgba(134, 216, 19, " + ce + ")",
            FG: "rgb(0, 0, 0)"
        },
        VASALL: {
            BG: "rgba(255, 127, 00, " + ce + ")",
            FG: "rgb(0, 0, 0)"
        },
        ALLIANCE: {
            BG: "rgba(254, 203, 0, " + ce + ")",
            FG: "rgb(0, 0, 0)"
        }
    };
    var Ke = 0;
    var mi = 0;
    var Ti = 20;
    var ki = 750;
    var Me = 25;
    var me = 25;
    var de = "jsonp";
    var Ae = 4096;
    var Ue = {
        showDialog: 1,
        updateSession: 2,
        logout: 4,
        clearCache: 8
    };
    (function (t) {
        function e(n) {
            var s = n.split("."),
                e = t,
                i = "";
            for (var a = 0, r = s.length; a < r; a++) {
                i = s[a];
                e[i] = e[i] || {};
                e = e[i]
            }
            return e
        }
        t.namespace = e;
        window.namespace = e
    })(this);
    (function (t) {
        namespace("utils");
        var u = {
            "&": "&amp;",
            "<": "&lt;",
            ">": "&gt;",
            '"': "&quot;",
            "'": "&#39;",
            "/": "&#x2F;"
        };
        var h = {}.hasOwnProperty,
            a = function (t, e) {
                for (var i in e) {
                    if (h.call(e, i)) t[i] = e[i]
                }

                function a() {
                    this.constructor = t
                }
                a.prototype = e.prototype;
                t.prototype = new a;
                t.__super__ = e.prototype;
                return t
            }, s = function c(t, s) {
                var n, i, a = Function.prototype.bind,
                    e = Array.prototype.slice;
                if (t.bind === a && a) return a.apply(t, e.call(arguments, 1));
                i = e.call(arguments, 2);
                return function () {
                    if (!(this instanceof n)) return t.apply(s, i.concat(e.call(arguments)));
                    ctor.prototype = t.prototype;
                    var r = new ctor;
                    var a = t.apply(r, i.concat(e.call(arguments)));
                    if (Object(a) === a) return a;
                    return r
                }
            }, l = function (t, e) {
                if (typeof e == "undefined") {
                    throw new Error("mixin: can not mixin 'undefined' into " + t.toString())
                }
                for (var i in e) {
                    if (e.hasOwnProperty(i)) {
                        if (typeof t.prototype[i] != "undefined") {}
                        t.prototype[i] = e[i]
                    }
                }
                return t
            }, r = function () {
                var t = null;
                for (var e = 0; e < 5; e++) {
                    t = Math.random() * Math.pow(10, 17) + Math.random() * Math.pow(10, 17) + Math.random() * Math.pow(10, 17) + Math.random() * Math.pow(10, 17)
                }
                return t
            }, o = function (t, e) {
                if (typeof t !== "string") {
                    return t
                }
                var i = "";
                e = e || "medium";
                if (e === "medium") {
                    i = t.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/"/g, "&quot;")
                } else if (e === "low") {
                    i = t.replace(/<(\/?)script(.*?)>/g, "&lt;script&gt;");
                    i = t.replace(/<(\/?)iframe(.*?)>/g, "&lt;iframe&gt;")
                }
                return i
            }, n = function (t, a, e) {
                if (typeof t !== "string") {
                    return t
                }
                e = e || "...";
                var i = +a - e.length;
                if (t.length > i) {
                    return t.substring(0, i) + e
                }
                return t
            }, i = function (t) {
                return String(t).replace(/[&<>"'\/]/g, function (t) {
                    return u[t]
                })
            }, e = function (t, e, i) {
                i.prototype[t] = e.prototype[t]
            };
        t.utils.__extends = a;
        t.utils.bind = s;
        t.utils.mixin = l;
        t.utils.uniqueID = r;
        t.utils.sanitize = o;
        t.utils.truncate = n;
        t.utils.linkMethod = e;
        t.utils.escapeHtmlEntities = i;
        window.utils.__extends = a;
        window.utils.bind = s;
        window.utils.mixin = l;
        window.utils.uniqueID = r;
        window.utils.sanitize = o;
        window.utils.truncate = n;
        window.utils.escapeHtmlEntities = i;
        window.utils.linkMethod = e
    })(this);
    (function (t) {
        namespace("utils.date");

        function e(a, s) {
            if (typeof s === "undefined") s = false;
            var t = parseInt(a / 3600, 10);
            var e = parseInt((a - t * 3600) / 60, 10);
            var i = a - t * 3600 - e * 60;
            var u, r, o;
            var l = "h";
            var n = "m";
            var c = "d";
            if (i < 0) {
                i = 0
            }
            if (e < 0) {
                e = 0
            }
            if (t < 0) {
                t = 0
            }
            if (s) {
                u = t < 10 ? "0" + t : t;
                r = e < 10 ? "0" + e : e;
                o = i < 10 ? "0" + i : i;
                return [u, r, o].join(":")
            }
            if (t === 0) {
                if (e < 1) {
                    return "< 1" + n
                }
                return e + n
            } else if (t > 24) {
                var h = t / 24 << 0,
                    d = t - 24 * h;
                return h + c + " " + d + l
            }
            return t + l + " " + e + n
        }

        function i(t) {
            if (t === 0) {
                return "00:00:00"
            }
            if (typeof t === "number" || typeof t === "string") {
                t = new Date(t)
            }
            var a = t.getDate() < 10 ? "0" + t.getDate() : t.getDate();
            var s = t.getMonth() + 1 < 10 ? "0" + (t.getMonth() + 1) : t.getMonth() + 1;
            var n = t.getFullYear();
            var e = t.getHours() < 10 ? "0" + t.getHours() : t.getHours();
            var i = t.getMinutes() < 10 ? "0" + t.getMinutes() : t.getMinutes();
            if (+i < 0) {
                i = 0
            }
            if (+e < 0) {
                e = 0
            }
            return a + "." + s + "." + n + " " + e + ":" + i
        }

        function a(t) {
            if (typeof t == "number") {
                t = new Date(t)
            }
            var e = t.getHours() < 10 ? "0" + t.getHours() : t.getHours();
            var i = t.getMinutes() < 10 ? "0" + t.getMinutes() : t.getMinutes();
            if (+i < 0) {
                i = 0
            }
            if (+e < 0) {
                e = 0
            }
            return e + ":" + i
        }

        function s(t) {
            if (typeof t == "number") {
                t = new Date(t)
            }
            var e = t.getDate() < 10 ? "0" + t.getDate() : t.getDate();
            var i = t.getMonth() + 1 < 10 ? "0" + (t.getMonth() + 1) : t.getMonth() + 1;
            var a = t.getFullYear();
            return e + i + a
        }

        function n(t) {
            if (typeof t == "number") {
                t = new Date(t)
            }
            var e = t.getDate() < 10 ? "0" + t.getDate() : t.getDate();
            var i = t.getMonth() + 1 < 10 ? "0" + (t.getMonth() + 1) : t.getMonth() + 1;
            var a = t.getFullYear();
            return e + "." + i + "." + a
        }

        function r(e) {
            var t = e - (new Date - W);
            t = parseInt(t / 1e3, 10);
            return t
        }
        t.utils.date.setCountDownTime = r;
        t.utils.date.showFormatShortDateTime = n;
        t.utils.date.formatShortDateTime = s;
        t.utils.date.formatDateTimeForNightModus = a;
        t.utils.date.formatDateTime = i;
        t.utils.date.secToTimeStr = e;
        window.utils.date.setCountDownTime = r;
        window.utils.date.showFormatShortDateTime = n;
        window.utils.date.formatShortDateTime = s;
        window.utils.date.formatDateTimeForNightModus = a;
        window.utils.date.formatDateTime = i;
        window.utils.date.secToTimeStr = e
    })(this);
    (function (t) {
        namespace("utils.dict");

        function e(t) {
            var e = 0,
                i = null;
            for (i in t) {
                if (t.hasOwnProperty(i)) e++
            }
            return e
        }

        function i(e, i) {
            var t = [];
            for (var a in e) {
                var s = e[a];
                t.push(s)
            }
            t.sort(function (t, e) {
                return t[i] - e[i]
            });
            return t
        }

        function a(t, i) {
            var a = 0;
            for (var e in t) {
                if (!t.hasOwnProperty(e)) continue;
                if (i) {
                    if (i.indexOf(e) === -1) continue
                }
                var s = parseInt(t[e], 10);
                if (isNaN(s)) continue;
                a += s
            }
            return a
        }
        t.utils.dict.size = e;
        t.utils.dict.sumUp = a;
        t.utils.dict.toSortedArray = i
    })(this);
    (function (t) {
        namespace("utils.array");

        function e(e) {
            var i = {}, a = [];
            for (var t = 0, s = e.length; t < s; ++t) {
                if (i.hasOwnProperty(e[t])) {
                    continue
                }
                a.push(e[t]);
                i[e[t]] = 1
            }
            return a
        }

        function i(t) {
            for (var i, a, e = t.length; e; i = parseInt(Math.random() * e, 10), a = t[--e], t[e] = t[i], t[i] = a) {}
            return t
        }

        function a(s, e) {
            e = e || Ae || 1024;
            var a = [],
                t = "",
                i = s;

            function n(i) {
                if (t.length >= e - i.toString().length) {
                    return true
                }
                t += i + ",";
                return false
            }
            while (i.length) {
                t = "";
                i = i.filter(n);
                t = t.slice(0, t.length - 1);
                a.push(t)
            }
            return a
        }
        t.utils.array.unique = e;
        window.utils.array.unique = e;
        t.utils.array.shuffle = i;
        window.utils.array.shuffle = i;
        t.utils.array.uri_join = a;
        window.utils.array.uri_join = a
    })(this);
    (function (t) {
        namespace("utils.mouse");
        getMouseCoords = function (t) {
            if (typeof t.offsetX != "undefined") {
                return {
                    x: t.offsetX,
                    y: t.offsetY
                }
            } else if (typeof t.originalEvent.layerX != "undefined") {
                return {
                    x: t.originalEvent.layerX,
                    y: t.originalEvent.layerY
                }
            } else {
                return {
                    x: t.pageX - parseInt($(this.view.canvas).css("left"), 10),
                    y: t.pageY - parseInt($(this.view.canvas).css("top"), 10)
                }
            }
            return
        };
        t.utils.mouse.getMouseCoords = getMouseCoords
    })(this);
    (function (t) {
        var e = function i() {
            var t = Array.prototype.slice.call(arguments);
            if (typeof o != "undefined") {
                t[0] = o.getValueOf(t[0]);
                for (var e = 0; e < t.length; e++) {
                    if (t[e].toString().indexOf("Renegade") != -1) {
                        t[e] = o.getValueOf(t[e]) + " " + t[e].split(" ")[1]
                    }
                }
            }
            return $.sprintf.apply(this, t)
        };
        t.translate = e
    })(this);
    (function (e) {
        namespace("utils");

        function t(t, e, i) {
            return t.replace(e, function (t) {
                var e = "onclick=";
                e = e.concat('"', i, "('", t, "')", '"');
                return "<a href='#" + t + "' " + e + ">" + t + "</a>"
            })
        }
        Handlebars.registerHelper("debug", function (t) {
            console.log("Current Context");
            console.log("====================");
            console.log(this);
            if (t) {
                console.log("Value");
                console.log("====================");
                console.log(t)
            }
        });
        Handlebars.registerHelper("translate", function () {
            return translate.apply(this, arguments)
        });
        Handlebars.registerHelper("contentFrame", function (e, i) {
            var t = "";
            var n = e && e.styles ? e.styles : "";
            var r = e && e.id ? 'id="' + e.id + '"' : "";
            var a = "";
            if (e && e.data) {
                if (typeof e.data === "string") {
                    a = 'data="' + e.data + '"'
                } else if (typeof e.data === "object") {
                    for (var s in e.data) {
                        var o = e.data[s];
                        a += "data-" + s + "='" + o + "'"
                    }
                }
            }
            if (typeof i === "undefined") {
                i = e
            }
            t += '<div class="content-frame ' + n + '" ' + r + " " + a + " >";
            t += '<div class="frame-side t"></div>';
            t += '<div class="frame-side b"></div>';
            t += '<div class="frame-side l"></div>';
            t += '<div class="frame-side r"></div>';
            t += '<div class="frame-content with-icon">';
            t += '<div class="frame-corner tl"></div>';
            t += '<div class="frame-corner tr"></div>';
            t += '<div class="frame-corner bl"></div>';
            t += '<div class="frame-corner br"></div>';
            t += i.fn(this);
            t += '<div class="clearfix"></div>';
            t += "</div>";
            t += "</div>";
            return t
        });
        Handlebars.registerHelper("slider", function (e, i) {
            var t = "";
            t += '<div class="sliderLine">';
            t += i.fn(this);
            t += '  <div id="' + e + '" class="slider">';
            t += '    <div class="track"></div>';
            t += '    <div class="knob" role="slider"></div>';
            t += "  </div>";
            t += "</div>";
            return t
        });
        Handlebars.registerHelper("timeToCompletion", function (t) {
            var e = utils.date.setCountDownTime(t);
            return utils.date.secToTimeStr(e)
        });
        Handlebars.registerHelper("formattedText", function (e) {
            e = utils.sanitize(e);
            e = e.replace(/\n/g, "<br />");
            e = t(e, /(l\+k|lkxmas):\/\/[A-Za-z0-9=?&,;]*/gi, "window.linkHandler");
            e = t(e, /https*:\/\/[A-Za-z0-9=?&,;.\/\?\=\-\_\%]*/gi, "window.externalLinkHandler");
            return e
        });
        Template = function (i) {
            var t = i.Handlebars,
                e = {};

            function a(e, i) {
                return t.compile(e)(i)
            }

            function s(i, a) {
                if (e[i]) {
                    return false
                } else {
                    e[i] = t.compile(a);
                    return true
                }
            }

            function n(e, i) {
                return t.registerPartial(e, i)
            }

            function r(i, s, n) {
                var a = e[i],
                    t;
                if (!a) {
                    return "template not found: " + i
                }
                t = a(s || {});
                return n ? $(t) : t
            }
            return {
                add: s,
                addPartial: n,
                compile: r,
                renderHtml: a
            }
        }(this);
        e.utils.Template = Template
    })(this);
    (function (t) {
        t.utils.debounce = function (i, s, a) {
            var e;
            var t = null;
            return function () {
                var n = this,
                    r = arguments;
                var o = function () {
                    t = null;
                    if (!a) e = i.apply(n, r)
                };
                var l = a && !t;
                clearTimeout(t);
                t = setTimeout(o, s);
                if (l) e = i.apply(n, r);
                return e
            }
        };
        t.utils.throttle = function (r, o, t) {
            var a, s, n;
            var e = null;
            var i = 0;
            t = t || {};
            var l = function () {
                i = t.leading === false ? 0 : new Date;
                e = null;
                n = r.apply(a, s)
            };
            return function () {
                var u = new Date;
                if (!i && t.leading === false) i = u;
                var h = o - (u - i);
                a = this;
                s = arguments;
                if (h <= 0) {
                    clearTimeout(e);
                    e = null;
                    i = u;
                    n = r.apply(a, s)
                } else if (!e && t.trailing !== false) {
                    e = setTimeout(l, h)
                }
                return n
            }
        }
    })(this);
    (function (t) {
        namespace("utils");
        var e = function (t, s, i, a) {
            var h = 0,
                u = 0,
                r = 0,
                o = 0,
                l = 0,
                n, e;
            i = parseInt(i, 10);
            a = parseInt(a, 10);
            t = parseInt(t, 10);
            s = parseInt(s, 10);
            u = s & 1 ? t + .5 : t;
            r = s;
            o = a & 1 ? i + .5 : i;
            l = a;
            n = Math.abs(o - u);
            e = Math.abs(l - r);
            return e * .5 >= n ? e : e * .5 + n
        };
        t.utils.Map = {
            distanceToHabitat: e
        }
    })(this);
    (function (t) {
        t.utils.removeOrphanHovers = function () {
            $("#allHovers").empty()
        }
    })(this);
    (function (t) {
        namespace("utils.helpers");

        function e(t, e) {
            return typeof t === "undefined" ? e : t
        }

        function i() {
            if (document.selection && document.selection.empty) {
                document.selection.empty()
            } else if (window.getSelection) {
                var t = window.getSelection();
                if (t && t.removeAllRanges) {
                    t.collapse(document.getElementsByTagName("body")[0], 0)
                }
            }
        }

        function a(t) {
            return t.sort(function (t, e) {
                return t.order < e.order ? -1 : +1
            })
        }
        t.utils.helpers.defaultsTo = e;
        t.utils.helpers.clearSelection = i;
        t.utils.helpers.sortByOrder = a
    })(this);
    (function (t) {
        if (!t._) {
            t._ = {}
        }
        t._.defaultsTo = t.utils.helpers.defaultsTo;
        t._.sortByOrder = t.utils.helpers.sortByOrder
    })(this);
    (function (t) {
        function e(t) {
            t.addClass("disabled");
            window.setTimeout(function () {
                t.removeClass("disabled")
            }, 200)
        }
        t.utils.blinkButton = e;
        t._.blinkButton = e
    })(this);
    (function (o) {
        var t = {
            setDelegate: function (t) {
                this.controller = t
            },
            notify: function (t, e, i, a) {
                if (typeof t === "undefined") {
                    return
                }
                if (typeof this.controller === "undefined" || this.controller === null) {
                    return
                }
                if (typeof this.controller.notifyProxy !== "undefined") {
                    return this.controller.notifyProxy(t, e, i, a)
                }
                if (typeof this.controller[t] !== "undefined") {
                    return this.controller[t](e, i, a)
                }
            }
        }, i = {
                add: function (t) {
                    this.view = t
                },
                draw: function () {
                    this.view.draw()
                }
            }, a = {
                createSubview: function (a, t, s, n, r) {
                    var i;
                    s = s || e;
                    n = n || a.controller;
                    if (typeof r == "undefined") {
                        r = true
                    }
                    if (!t.parent) {
                        t.parent = a.wrapper || a
                    }
                    i = new s(n, t);
                    if (r === true) {
                        i.create()
                    }
                    t.parent.addSubview(i);
                    return i
                },
                createToolbar: function (s, t, i) {
                    var a, e;
                    t = t || {};
                    t.parent = t.parent || s || this;
                    e = t.parent;
                    i = i || e.controller;
                    t.styles = t.styles || "toolbar";
                    t.name = t.name || "toolbar";
                    a = new Ge(i, t);
                    e.toolbar = a;
                    return e.toolbar
                },
                createHeadlineButtons: function (a, t, i) {
                    var s, e;
                    t = t || {};
                    t.parent = t.parent || a || this;
                    e = t.parent;
                    i = i || e.controller;
                    t.styles = t.styles || "buttons";
                    t.name = t.name || "HeadlineButtons";
                    if (e.buttons) {
                        e.deleteSubviewByField("name", e.buttons.name)
                    }
                    e.buttons = e.createSubview(e, t, li);
                    return e.buttons
                },
                createContainer: function (t) {
                    var e = t || {};
                    return this.createSubview(this, e, w)
                },
                addSubview: function (t) {
                    if (typeof this.subviews == "undefined") {
                        this.subviews = []
                    }
                    this.subviews.push(t)
                },
                deleteAllSubviews: function () {
                    if (this.subviews) this.deleteSubviewChain(this.subviews);
                    this.subviews = [];
                    if (this.wrapper) {
                        this.wrapper = undefined
                    }
                },
                deleteSubviewChain: function (t) {
                    if (!t) return;
                    if (!t.subviews || t.subviews.length === 0) {
                        t.parent = undefined;
                        t.controller = undefined;
                        return
                    }
                    for (var i = 0, a = t.subviews.length; i < a; i++) {
                        var e = t.subviews[i];
                        if (e.subviews && e.subviews.length > 0) {
                            this.deleteSubviewChain(e)
                        }
                        e.parent = undefined;
                        e.subviews = undefined;
                        e.controller = undefined;
                        if (typeof e.cleanUp === "function") e.cleanUp()
                    }
                    t.parent = undefined;
                    t.subviews = undefined;
                    t.controller = undefined;
                    if (typeof t.cleanUp === "function") t.cleanUp()
                },
                drawSubviews: function () {
                    if (typeof this.subviews == "undefined" || this.subviews.length === 0) {
                        return
                    }
                    for (var t = 0, e = this.subviews.length; t < e; t++) {
                        this.subviews[t].draw()
                    }
                },
                drawToolbar: function () {
                    if (typeof this.toolbar != "undefined") {
                        this.toolbar.draw();
                        var t = $("#" + this.id),
                            e = t.find("#" + this.mainContentContainer.id),
                            i = t.find("#" + this.toolbar.id),
                            a = i.remove();
                        e.prepend(a)
                    }
                },
                getSubviews: function (t) {
                    if (typeof t == "undefined") {
                        t = []
                    }
                    if (typeof this.subviews == "undefined" || this.subviews.length === 0) {
                        return t
                    }
                    t.push(this.subviews);
                    for (var e = 0, a = this.subviews.length; e < a; e++) {
                        var i = this.subviews[e];
                        if (typeof i.getSubviews != "undefined") {
                            i.getSubviews(t)
                        }
                    }
                    return t
                },
                findSubviewByName: function (t) {
                    return this.findSubviewByField("name", t)
                },
                findSubviewByField: function (o, a) {
                    if (typeof this.subviews == "undefined") {
                        return null
                    }
                    if (this.subviews.length === 0) {
                        return null
                    }
                    var s = this.getSubviews([]);
                    for (var e = 0, l = s.length; e < l; e++) {
                        var n = s[e];
                        for (var i = 0, u = n.length; i < u; i++) {
                            var t = n[i];
                            if (t[o] == a) {
                                return t
                            } else if (t.subviews && t.subviews.length > 0) {
                                var r = t.findSubviewByField("name", a);
                                if (r) {
                                    return r
                                }
                            }
                        }
                    }
                    return null
                },
                replaceSubviewByName: function (n, i) {
                    if (typeof this.subviews === "undefined" || this.subviews.length === 0) {
                        return false
                    }
                    if (typeof i.parent === "undefined") {
                        i.parent = this
                    }
                    var a = this.getSubviews([]);
                    for (var t = 0, r = a.length; t < r; t++) {
                        var s = a[t];
                        for (var e = 0, o = s.length; e < o; e++) {
                            var l = s[e];
                            if (l.name == n) {
                                a[t][e] = i;
                                return true
                            }
                        }
                    }
                    return false
                },
                deleteSubviewByField: function (a, s) {
                    if (typeof this.subviews === "undefined" || this.subviews.length === 0) {
                        return false
                    }
                    var e = true;
                    while (e === true) {
                        e = false;
                        for (var t = 0, n = this.subviews.length; t < n; t++) {
                            var i = this.subviews[t];
                            if (i[a] == s) {
                                e = true;
                                i.removeFromDOM();
                                this.subviews.splice(t, 1);
                                break
                            }
                        }
                    }
                    return false
                },
                clearfix: function () {
                    return this.createSubview(this, {
                        styles: "clearfix",
                        content: ""
                    })
                }
            }, s = {
                addRequired: function (t) {
                    if (typeof this.__required === "undefined") {
                        this.__required = {}
                    }
                    if (typeof this.__defaults === "undefined") {
                        this.__defaults = {}
                    }
                    this.__required[t] = true;
                    this.__defaults[t] = null
                },
                addOption: function (t, e, i) {
                    i = i || false;
                    if (typeof this.__defaults === "undefined") {
                        this.__defaults = {}
                    }
                    if (typeof this.__required === "undefined") {
                        this.__required = {}
                    }
                    this[t] = e;
                    this.__defaults[t] = e
                },
                setOptions: function (i) {
                    var e = i || {}, t;
                    for (t in e) {
                        if (this.__defaults.hasOwnProperty(t)) {
                            this[t] = e[t]
                        }
                    }
                    for (t in this.__defaults) {
                        if (typeof this[t] === "undefined") {
                            if (typeof this.__required[t] !== "undefined") {
                                return
                            }
                            this[t] = this.__defaults[t]
                        }
                    }
                }
            };
        var n = {
            linkDataSource: function (t) {
                this.datasource = t
            }
        };
        var r = {
            getImage: function (t, e) {
                return this.notify("rvHW39mY", this, {
                    imageName: t,
                    imageCategory: e
                })
            },
            getIcon: function (t) {
                return this.getImage(t, "icons")
            },
            getImageSrc: function (t, e) {
                return this.notify("1edS3jXy", this, {
                    imageName: t,
                    imageCategory: e
                })
            },
            getIconSrc: function (t) {
                return this.getImageSrc(t, "icons")
            }
        };
        U.delegate = t;
        U.singleViewController = i;
        U.subViews = a;
        U.configurable = s;
        U.dataSourceLink = n;
        U.getImage = r
    })(this);
    V = function () {
        utils.mixin(t, U.delegate);
        utils.mixin(t, U.dataSourceLink);
        utils.mixin(t, U.configurable);

        function t(t, e) {
            this.id = "id" + utils.uniqueID();
            this.addOption("name", "");
            this.addOption("group", "");
            this.setOptions(e);
            this.setDelegate(t);
            this.datasource = null;
            this.__classname = /(\w+)\(/.exec(this.constructor.toString())[1]
        }
        return t
    }();
    He = function () {
        var e = ["canvas", "localStorage", "sessionStorage", "appleEmoji", "audioformat"];

        function t() {
            this.detectors = [];
            for (var t = 0; t < e.length; t++) {
                var i = e[t],
                    a = this["_" + i + "Checker"];
                if (a) {
                    this.detectors.push(i)
                } else {}
            }
        }
        t.prototype.detect = function () {
            var e = {};
            for (var t = 0; t < this.detectors.length; t++) {
                var i = this.detectors[t];
                e[i] = this["_" + i + "Checker"]()
            }
            return e
        };
        t.prototype._canvasChecker = function () {
            var t = document.createElement("canvas");
            return !!(t.getContext && t.getContext("2d"))
        };
        t.prototype._storageChecker = function (t) {
            try {
                return t in window && window[t] !== null
            } catch (e) {
                return false
            }
        };
        t.prototype._localStorageChecker = function () {
            return this._storageChecker("localStorage")
        };
        t.prototype._sessionStorageChecker = function () {
            return this._storageChecker("sessionStorage")
        };
        t.prototype._appleEmojiChecker = function () {
            if (!this._canvasChecker()) {
                return false
            }
            var e = document.createElement("canvas"),
                t = e.getContext("2d"),
                a = 20,
                s = 20,
                i;
            e.width = a;
            e.height = s;
            t.fillStyle = "rgb(255,255,255)";
            t.fillRect(0, 0, a, s);
            t.fillStyle = "rgb(255,70,247)";
            t.font = "18px Apple Color Emoji";
            t.fillText("😀", 0, 18);
            i = t.getImageData(a / 2, s / 2, 1, 1).data;
            e = undefined;
            return !(i[0] === 255 && i[1] === 255 && i[2] === 255)
        };
        t.prototype._audioformatChecker = function () {
            if (!("Audio" in window) && !window["Audio"]) {
                return "none"
            }
            var t = new Audio;
            if (!t.play || !t.pause || !t.canPlayType) {
                return "none"
            }
            if (t.canPlayType("audio/mpeg")) {
                return "mp3"
            }
            return "ogg"
        };
        return t
    }();
    (function (i) {
        "use strict";
        var s = new He,
            a = s.detect();

        function e(t) {
            this.storageMethod = null;
            if (t === "local" && a.localStorage) {
                this.storageMethod = window.localStorage
            }
            if (t === "session" && a.sessionStorage) {
                this.storageMethod = window.sessionStorage
            }
            if (!this.storageMethod) {}
        }
        e.prototype._callStorageMethod = function (e, i, a) {
            var t;
            if (!this.storageMethod) {
                return null
            }
            try {
                t = this.storageMethod[e](i, a)
            } catch (s) {
                if (s.name === "QUOTA_EXCEEDED_ERR") {
                    this._disableStorage()
                } else {}
            }
            return t
        };
        e.prototype._disableStorage = function () {
            this.storageMethod = null
        };
        e.prototype.isEnabled = function () {
            return !!this.storageMethod
        };
        e.prototype.getItem = function (t) {
            return this._callStorageMethod("getItem", t)
        };
        e.prototype.setItem = function (t, e) {
            return this._callStorageMethod("setItem", t, e)
        };
        e.prototype.removeItem = function (t) {
            return this._callStorageMethod("removeItem", t)
        };
        e.prototype.clear = function () {
            return this._callStorageMethod("clear")
        };
        e.prototype.getJSON = function (i) {
            var t = this.getItem(i),
                e;
            if (!t || typeof t !== "string") {
                return null
            }
            try {
                e = JSON.parse(t)
            } catch (a) {}
            return e
        };
        e.prototype.setJSON = function (e, i) {
            var t = null;
            try {
                t = JSON.stringify(i)
            } catch (a) {}
            if (!t) {
                return false
            }
            this.setItem(e, t);
            return true
        };
        e.prototype.createKey = function (e) {
            var i = Array.prototype.slice.call(arguments, 1, arguments.length);
            return [e, t.id, te].concat(i).join("_")
        };
        namespace("utils");
        namespace("_");
        i.utils.storeLocal = new e("local");
        i.utils.storeSession = new e("session");
        i._.storeLocal = utils.storeLocal;
        i._.storeSession = utils.storeSession
    })(this);
    Ce = function (e) {
        utils.__extends(t, V);
        utils.mixin(t, U.singleViewController);
        utils.mixin(t, U.getImage);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this._delayedData = null;
            this._sessionKeys = []
        }
        t.prototype["_V6%tK-F"] = function (t, e) {
            this.notify("_V6%tK-F", t, e)
        };
        t.prototype["BRfyQ)_c"] = function (t, e) {
            this.notify("BRfyQ)_c", t, e)
        };
        t.prototype["6p(nJPKd"] = function (t) {
            if (t && t.runningTimer === true) {
                t.startTimer()
            }
        };
        t.prototype["rvHW39mY"] = function (a, e) {
            var i = this.notify("7v%5T22p", this);
            if (!i) {
                return null
            }
            var t = i.getImageSrc(e.imageName, e.imageCategory);
            if (t) {
                return !!~t.indexOf("<img") ? t : "<img src='" + t + "' />"
            } else {
                return false
            }
        };
        t.prototype["1edS3jXy"] = function (i, t) {
            var e = this.notify("7v%5T22p", this);
            if (!e) {
                return null
            }
            return e.getImageSrc(t.imageName, t.imageCategory)
        };
        t.prototype["bOsn(oQ9"] = function () {
            this.notify("bOsn(oQ9", this)
        };
        t.prototype.isInteraction = function () {
            return this.view.interaction
        };
        t.prototype.delayData = function (t, e) {
            this._delayedData = {
                ds: t,
                data: e
            }
        };
        t.prototype["LFB28dwf"] = function () {
            this.view.interaction = true
        };
        t.prototype["SY(fD4F4"] = function () {
            this.view.interaction = false;
            if (this._delayedData) {
                this.dataUpdate(this._delayedData.ds, this._delayedData.data)
            }
        };
        t.prototype.dataUpdate = function (t, e) {
            if (this.isInteraction()) {
                this.delayData(t, e)
            } else {
                this.refreshView(t, e)
            }
        };
        t.prototype.refreshView = function (t, e) {
            this.view.dataUpdate(t, e)
        };
        t.prototype["naNYg0H)"] = function (e, t) {
            this._sessionKeys.push(t)
        };
        t.prototype.clearSessionStorage = function () {
            for (var t = 0, e = this._sessionKeys.length; t < e; t++) {
                _.storeSession.removeItem(this._sessionKeys[t])
            }
        };
        t.prototype.cleanUp = function () {
            for (var t in this) {
                if (this.hasOwnProperty(t) && typeof t !== "undefined" && t !== "id") {
                    this[t] = undefined
                }
            }
        };
        return t
    }(V);
    bi = function (e) {
        "use strict";
        utils.__extends(t, e);

        function t(a, e, i) {
            t.__super__.constructor.apply(this, [i, e]);
            this.addOption("name", "");
            this.addOption("server", "");
            this.addOption("castle", {});
            this.addOption("frame", {});
            this.addOption("map", {});
            this.addOption("folders", {});
            this.addOption("diplomacy", {});
            this.addOption("bottombar", {});
            this.addOption("missions", {});
            this.addOption("knowledges", {});
            this.addOption("modifiers", {});
            this.addOption("resources", {});
            this.addOption("buildings", {});
            this.addOption("icons", {});
            this.addOption("browserIcons", {});
            this.addOption("reportIcons", {});
            this.addOption("units", {});
            this.addOption("unitsLarge", {});
            this.addOption("animations", {});
            this.addOption("flags", {});
            this.addOption("shop", {});
            this.addOption("tabs", {});
            this.addOption("sound", {});
            this.addOption("audioformat", "mp3");
            this.addOption("partials", {});
            this.addOption("templates", {});
            this.setOptions(e);
            this.theme = a;
            this.controller = i;
            e.frame.name = this.name;
            this.frameController = new gi(this, e.frame);
            this.gfx = {};
            this.nightgfx = {};
            this.overview = {};
            this.cache = {};
            this.animationsData = null;
            if (this.animations && this.animations.url) {
                $.ajax(this.animations.url, {
                    success: function (t) {
                        this.animationsData = t;
                        this.preloadAnimations.call(this)
                    }.bind(this)
                })
            }
            this.preloader();
            if (this.map.normal) {
                this.createMapCache()
            }
            this.preCompileTemplates()
        }
        t.prototype.preloadAnimations = function () {
            var e = this.animationsData.animationArray;
            this.cache.animations = {};
            for (var t = 0; t < e.length; t++) {
                this.cache.animations[e[t].name] = e[t]
            }
        };
        t.prototype.getAnimation = function (t) {
            return this.cache.animations[t]
        };
        t.prototype.nextAnimationFrame = function (e) {
            var t = this.cache.animations[e];
            t.currentFrame += 1;
            if (t.currentFrame >= t.imageNameArray.length) {
                t.currentFrame = 0
            }
            return t.imageNameArray[t.currentFrame]
        };
        t.prototype.getRandomAnimationName = function () {
            var t = [];
            var e = Math.floor(Math.random() * utils.dict.size(this.cache.animations));
            for (var i in this.cache.animations) {
                t.push(i)
            }
            return t[e]
        };
        t.prototype.loader = function (e) {
            var i = {};
            for (var t in e.files) {
                i[t] = new Image;
                if (e.files[t].indexOf("data:image") === -1) {
                    i[t].src = this.folders.base + this.folders.sub + this.folders.images + e.folder + "/" + e.files[t]
                } else {
                    i[t].src = e.files[t]
                }
            }
            return i
        };
        t.prototype.preloader = function () {
            this.cache.map = {};
            this.cache.map.normal = {};
            if (this.map.normal) {
                this.cache.map.normal.ground = this.loader(this.map.normal.ground);
                this.cache.map.normal.castles = this.loader(this.map.normal.castles)
            }
            this.notify("K&%t8_6-", this)
        };
        t.prototype.getResource = function (t) {
            return this.cache[ID]
        };
        t.prototype.createMapCache = function () {
            var t;
            t = this.cache.map.normal;
            this.gfx = {
                images: {
                    ground: [t.ground["D0"], t.ground["D1"], t.ground["D2"], t.ground["D3"], t.ground["D4"], t.ground["D5"], t.ground["D6"], t.ground["D7"], t.ground["D8"], t.ground["D9"], t.ground["D10"]],
                    castles: [t.castles["Castle0_P_0"], t.castles["Castle0_P_1"], t.castles["Castle1_P_0"], t.castles["Castle1_P_1"], t.castles["Castle2_P_0"], t.castles["Castle2_P_1"]],
                    free: [t.castles["Castle0_N_0"], t.castles["Castle0_N_1"], t.castles["Castle1_N_0"], t.castles["Castle1_N_1"], t.castles["Castle2_N_0"], t.castles["Castle2_N_1"]]
                },
                tileInfo: {
                    width: 256,
                    height: 128
                },
                drawOffset: {
                    even: {
                        x: 0,
                        y: 1.333
                    },
                    odd: {
                        x: 128,
                        y: 1.333
                    }
                }
            };
            this.nightgfx = {
                images: {
                    ground: [t.ground["N0"], t.ground["N1"], t.ground["N2"], t.ground["N3"], t.ground["N4"], t.ground["N5"], t.ground["N6"], t.ground["N7"], t.ground["N8"], t.ground["N9"], t.ground["N10"]],
                    castles: [t.castles["Castle0N_P_0"], t.castles["Castle0N_P_1"], t.castles["Castle1N_P_0"], t.castles["Castle1N_P_1"], t.castles["Castle2N_P_0"], t.castles["Castle2N_P_1"]],
                    free: [t.castles["Castle0N_N_0"], t.castles["Castle0N_N_1"], t.castles["Castle1N_N_0"], t.castles["Castle1N_N_1"], t.castles["Castle2N_N_0"], t.castles["Castle2N_N_1"]]
                },
                tileInfo: {
                    width: 256,
                    height: 128
                },
                drawOffset: {
                    even: {
                        x: 0,
                        y: 1.333
                    },
                    odd: {
                        x: 128,
                        y: 1.333
                    }
                }
            };
            this.overview = {
                images: {},
                tileInfo: {
                    width: 16,
                    height: 16
                },
                drawOffset: {
                    even: {
                        x: 0,
                        y: 1
                    },
                    odd: {
                        x: 8,
                        y: 1
                    }
                }
            }
        };
        t.prototype.getFrameController = function () {
            if (!this.frameController) {
                return null
            }
            return this.frameController
        };
        t.prototype.getMapTileSet = function (t) {
            if (t === "normal" && u.nightModusActive === false) {
                return this.gfx
            }
            if (t === "normal" && u.nightModusActive === true) {
                return this.nightgfx
            }
            if (t === "overview") {
                return this.overview
            }
        };
        t.prototype.getImageIDForLevel = function (i, a) {
            var t = this.castle.numberOfPictures[i];
            var s = this.castle.maxLevel[i] / (t - 1);
            var e = a / s;
            if (e > t - 1) {
                e = t - 1
            }
            return Math.floor(e)
        };
        t.prototype.getBuildingImage = function (i) {
            var t = i.name;
            var s = i.level;
            var n = i.numberOfPictures;
            var e = this.getImageIDForLevel(t, s, n);
            if (!this.castle[t]) {
                return null
            }
            var a = "";
            var r = this.folders.base + this.folders.sub + this.folders.images + this.castle[t].folder + "/" + this.castle[t].files[e];
            if (this.castle[t].files[e].indexOf("data:") !== -1) {
                a = this.castle[t].files[e]
            } else {
                a = this.folders.base + this.folders.sub + this.folders.images + this.castle[t].folder + "/" + this.castle[t].files[e]
            }
            return a
        };
        t.prototype["yp7zX6N5"] = function (e, t) {
            return $(this.cache.frame[t]).clone()
        };
        t.prototype.getImageSrc = function (e, t) {
            if (!e || !t) {
                return
            }
            if (typeof e === "number") {
                e = e.toString()
            }
            var i = e.replace(/ /g, "_");
            if (!this[t] || !this[t].files || !this[t].files[i]) {
                return ""
            }
            if (this[t].files[i].indexOf("data:") !== -1) {
                return this[t].files[i]
            }
            return this.folders.base + this.folders.sub + this.folders.images + this[t].folder + "/" + this[t].files[i]
        };
        t.prototype.getImage = function (e, i) {
            var t = new Image;
            t.src = this.getImageSrc(e, i);
            return t
        };
        t.prototype.getSound = function (t) {
            var e = this.folders.base + this.folders.sub + this.folders.images + this.sound.folder + "/" + this.sound.files[t] + "." + this.audioformat;
            return e
        };
        t.prototype.getSoundForKey = function (t, e) {
            if (typeof this.sound.mapping[t] === "string") {
                return this.getSound(this.sound.mapping[t])
            }
            if (this.sound.mapping[t] && (this.sound.mapping[t] instanceof Array || typeof this.sound.mapping[t].length !== "undefined")) {
                return this.sound.mapping[t].map(function (t) {
                    return this.getSound(t)
                }, this)
            }
            var i = this.sound.mapping[t] ? this.sound.mapping[t][e] : null;
            return this.getSound(i)
        };
        t.prototype.preCompileTemplates = function () {
            var t;
            for (t in this.partials) {
                utils.Template.addPartial(t, this.partials[t])
            }
            for (t in this.templates) {
                utils.Template.add(t, this.templates[t])
            }
        };
        return t
    }(V);
    Qe = function (i) {
        var e = false;
        utils.__extends(t, V);

        function t(e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("initialWindowCoordinates", {
                x: 0,
                y: 0
            });
            this.addOption("zIndex", 1e3);
            this.setOptions(e);
            this.id = utils.uniqueID();
            this.subcontroller = [];
            this.datasources = [];
            this.globalTimerInterval = 1e4;
            this.timer = new Je(this, {
                interval: this.globalTimerInterval
            });
            this.timer.add(this);
            this.leftMouse = false;
            this.UI_THROTTLE_MOUSEMOVE = Ti;
            this.UI_DEBOUNCE_RESIZE = ki
        }
        t.prototype.setTheme = function (t) {
            var e = typeof t === "string" ? JSON.parse(t) : t;
            this.themeController = new bi(null, e, this)
        };
        t.prototype.addSubController = function (t) {
            this.subcontroller.push(t)
        };
        t.prototype.removeSubController = function (t) {
            if (t.cleanUp && typeof t.cleanUp === "function") {
                t.cleanUp()
            }
            this.subcontroller = this.subcontroller.filter(function (e) {
                return t.id !== e.id
            }, this)
        };
        t.prototype.notifySubControllers = function (e, i, a) {
            for (var t = 0, s = this.subcontroller.length; t < s; t++) {
                if (typeof this.subcontroller[t][e] != "undefined") {
                    this.subcontroller[t][e](i, a)
                }
            }
        };
        t.prototype.findControllerByName = function (i) {
            if (typeof this.subcontroller == "undefined" || this.subcontroller.length === 0) {
                if (e) return
            }
            for (var t = 0; t < this.subcontroller.length; t++) {
                if (this.subcontroller[t].name == i) {
                    return this.subcontroller[t]
                }
            }
            return null
        };
        t.prototype.globalMouseUpEvent = function (t) {
            this.leftMouse = false;
            this.notifySubControllers("mm-DpP)j", this, t)
        };
        t.prototype.globalMouseMoveEvent = function (t) {
            this.notifySubControllers("_0r2tiwg", this, t)
        };
        t.prototype.globalMouseDownEvent = function (t) {
            this.leftMouse = true;
            this.notifySubControllers("VjVgns7Y", this, t)
        };
        t.prototype.globalMouseLeaveEvent = function (t) {
            this.leftMouse = false;
            this.notifySubControllers("mdR0z08O", this, t)
        };
        t.prototype.globalMouseClickEvent = function (t) {
            this.notifySubControllers("gloYlKk6", this, t)
        };
        t.prototype.globalWindowResizeEvent = function (t) {
            this.notifySubControllers("PjmTAnYn", this, t)
        };
        t.prototype.globalKeypressEvent = function (t) {
            this.notifySubControllers("_7AgGVRp", this, t)
        };
        t.prototype.enableMouseEvents = function (e) {
            var t = $(e || "body"),
                i = $(window);
            t.on("mouseup touchend", function (t) {
                this.globalMouseUpEvent(t);
                t.stopPropagation();
                t.preventDefault()
            }.bind(this));
            t.on("mousedown touchstart", function (t) {
                this.globalMouseDownEvent(t);
                t.stopPropagation();
                if (!t.target instanceof HTMLInputElement) {
                    t.preventDefault()
                }
            }.bind(this));
            t.on("mouseleave", function (t) {
                this.globalMouseLeaveEvent(t);
                t.stopPropagation();
                t.preventDefault()
            }.bind(this));
            t.on("click", function (t) {
                this.globalMouseClickEvent(t);
                t.stopPropagation()
            }.bind(this));
            i.on("resize", utils.debounce(function (t) {
                this.globalWindowResizeEvent(t);
                t.preventDefault();
                return false
            }.bind(this), this.UI_DEBOUNCE_RESIZE));
            t.on("keypress", function (t) {
                this.globalKeypressEvent(t);
                t.stopPropagation()
            }.bind(this));
            t.on("mousemove touchmove", utils.throttle(function (t) {
                this.globalMouseMoveEvent(t);
                t.preventDefault();
                return false
            }.bind(this), this.UI_THROTTLE_MOUSEMOVE))
        };
        t.prototype.disableMouseEvents = function (e) {
            var t = $(e || "body"),
                i = $(window);
            t.off("mouseup touchend");
            t.off("mousedown touchstart");
            t.off("mouseleave");
            t.off("click");
            i.off("resize");
            t.off("keypress");
            t.off("mousemove touchmove")
        };
        t.prototype["rwHfd1jF"] = function (t) {
            return this.leftMouse
        };
        t.prototype.draw = function () {
            for (var t = 0, e = this.subcontroller.length; t < e; t++) {
                this.subcontroller[t].draw()
            }
        };
        t.prototype["7v%5T22p"] = function (t) {
            if (typeof this.themeController == "undefined") {
                return null
            }
            return this.themeController
        };
        t.prototype["3Vi_Ps%e"] = function (t, e) {
            var i = e.doFlashing;
            var a = e.zIndex;
            if (i && t.view.zIndex == this.zIndex && t.view.isFlashing === false) {
                t.view.isFlashing = true;
                $("#" + t.view.id).animate({
                    left: "-=20px"
                }, "fast", function () {
                    if (t.view) $("#" + t.view.id).animate({
                        left: "+=40px"
                    }, "fast", function () {
                        if (t.view) $("#" + t.view.id).animate({
                            left: "-=20px"
                        }, "fast", function () {
                            t.view.isFlashing = false
                        })
                    })
                })
            }
            if (a === this.zIndex) {
                return this.zIndex
            }
            return this.getNextZIndex()
        };
        t.prototype.getNextZIndex = function () {
            this.zIndex += 1;
            return this.zIndex
        };
        t.prototype["NwOKYUc3"] = function (t) {
            this.initialWindowCoordinates.x += 15;
            this.initialWindowCoordinates.y += 15;
            if (this.initialWindowCoordinates.y > $(document).height() / 6) {
                this.initialWindowCoordinates = {
                    x: 0,
                    y: 0
                }
            }
            return {
                x: this.initialWindowCoordinates.x,
                y: this.initialWindowCoordinates.y
            }
        };
        t.prototype["_f3L_ht_"] = function (t) {
            t.showBlockOverlay()
        };
        t.prototype["VY71NNds"] = function (t) {
            t.hideBlockOverlay()
        };
        t.prototype["1mA0BwR5"] = function (a, e) {
            for (var t = 0, i = this.subcontroller.length; t < i; t++) {
                if (typeof this.subcontroller[t].view !== "undefined" && typeof this.subcontroller[t].view.center !== "undefined") {
                    this.subcontroller[t].view.center(e, true);
                    if (this.subcontroller[t].view.preRender) {
                        this.subcontroller[t].view.preRender()
                    }
                    this.subcontroller[t].draw()
                }
            }
        };
        t.prototype["4Ig3uXuO"] = function (t) {};
        t.prototype["fpfOWXdS"] = function (t) {};
        t.prototype.addDatasource = function (t) {
            this.datasources.push(t)
        };
        t.prototype.removeDatasource = function (t) {
            if (!t) {
                return
            }
            if (t.cleanUp && typeof t.cleanUp === "function") t.cleanUp();
            this.datasources.splice(this.datasources.indexOf(t), 1)
        };
        t.prototype.notifyModelUpdate = function () {
            if (!this.datasources) return;
            for (var t = 0; t < this.datasources.length; t++) {
                if (typeof this.datasources[t].modelUpdate != "undefined") {
                    this.datasources[t].modelUpdate()
                }
            }
        };
        t.prototype["1Vzu&V(d"] = function (t, e) {
            if (typeof this.updateModel != "undefined") {
                this.updateModel(e, t)
            }
            this.notifyModelUpdate()
        };
        t.prototype.updateModel = function () {};
        t.prototype["_V6%tK-F"] = function (t, e) {
            this.timer.add(t)
        };
        t.prototype["BRfyQ)_c"] = function (t, e) {
            this.timer.remove(t)
        };
        t.prototype["rvHW39mY"] = function (i, t) {
            var e = this["7v%5T22p"]();
            if (e !== null) {
                return e.getImage(t.imageName, t.imageCategory)
            }
            return null
        };
        t.prototype["1edS3jXy"] = function (i, t) {
            var e = this["7v%5T22p"]();
            if (e !== null) {
                return e.getImageSrc(t.imageName, t.imageCategory)
            }
            return null
        };
        t.prototype["72HrbsDm"] = function (i, e) {
            var t = this["7v%5T22p"]();
            if (t !== null) {
                return t.getSound(e)
            }
            return null
        };
        return t
    }(V);
    gi = function (e) {
        utils.__extends(t, V);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("width", "");
            this.addOption("height", "");
            this.setOptions(e);
            this.outerFrameParts = ["corner tl", "corner tr", "corner bl", "corner br", "side t", "side r", "side l", "side b"]
        }
        t.prototype.frame = function (t, r) {
            if (typeof t.compileHTML == "undefined") {
                throw new Error("framing object needs a HTML representation (compileHTML method)")
            }
            var i = t.compileHTML(),
                o;
            if ($(t.html).hasClass("frame-container")) {} else {
                var a = $(i);
                a.addClass("frame-container");
                for (var e = 0; e < this.outerFrameParts.length; e++) {
                    var s = $("<div>"),
                        n = this.outerFrameParts[e];
                    s.addClass(n);
                    a.append(s)
                }
            }
            return i.wrap("<div>").parent().html()
        };
        return t
    }(V);
    ye = function (e) {
        utils.__extends(t, e);
        utils.mixin(t, U.getImage);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("parent", {});
            this.addOption("element", "div");
            this.addOption("styles", "");
            this.addOption("styleArray", []);
            this.addOption("hidden", false);
            this.addOption("active", true);
            this.addOption("content", "");
            this.addOption("clickMessage", null);
            this.addOption("clickCallback", null);
            this.addOption("tag", "");
            this.addOption("attributes", {});
            this.addOption("handleLinks", false);
            this.addOption("attachMethod", "append");
            this.addOption("drawStartMessage", "bdx3&c-f");
            this.addOption("drawEndMessage", "gjXVYBoo");
            this.setOptions(e);
            this.parentID = this.parent.id || null;
            this.interaction = false
        }
        t.prototype.setContent = function (t) {
            this.content = t;
            return this
        };
        t.prototype.show = function () {
            if (this.hidden === false) {
                return this
            }
            this.hidden = false;
            this.draw();
            return this
        };
        t.prototype.hide = function () {
            if (this.hidden === true) {
                return this
            }
            this.hidden = true;
            this.draw();
            return this
        };
        t.prototype.activate = function () {
            this.active = true;
            this.draw()
        };
        t.prototype.deactivate = function () {
            this.active = false;
            this.draw()
        };
        t.prototype.compileHTML = function () {
            var t = $("<" + this.element + ">").attr("id", this.id);
            var e = "";
            for (var i = 0; i < this.styleArray.length; i++) {
                e += " " + this.styleArray[i]
            }
            e += " " + this.styles;
            if (e !== " ") {
                t.addClass(e)
            }
            if (this.hidden) {
                t.addClass("hidden")
            }
            for (var a in this.attributes) {
                var s = this.attributes[a];
                t.attr(a, s)
            }
            t.html(this.content);
            return t
        };
        t.prototype.compileStringOpen = function () {
            var t = "<" + this.element + " id='" + this.id + "'";
            var e = "";
            var i, n, a, s = this.content;
            i = this.styleArray.length;
            while (i--) {
                e += " " + this.styleArray[i]
            }
            e += " " + this.styles;
            if (this.hidden) {
                e += " hidden"
            }
            t += " class='" + e + "'";
            for (a in this.attributes) {
                n = this.attributes[a];
                t += " " + a + "='" + n + "'"
            }
            if (typeof s === "object") {
                s = "<img src='" + this.content.originalSrc + "'></img>"
            }
            t += ">" + s.toString();
            return t
        };
        t.prototype.compileStringClose = function (t) {
            return t + "</" + this.element + ">"
        };
        t.prototype.draw = function () {
            if (!this.active) {
                return
            }
            var e = this.compileHTML();
            var t = this.notify(this.drawStartMessage, this, e) || e;
            var i = $(t);
            var a = $(t).html();
            if (this.handleLinks && a !== "" && !! ~a.indexOf("data:image/png;base64")) {
                i.linkify(/(l\+k|lkxmas):\/\/[A-Za-z0-9=?&,;]*/gi, "window.linkHandler");
                i.linkify(/https*:\/\/[A-Za-z0-9=?&,;.\/\?\=\-\_\%]*/gi, "window.externalLinkHandler")
            }
            this.attachToDOM(t);
            if (typeof this.drawSubviews !== "undefined") {
                this.drawSubviews()
            }
            this.jQueryEvents();
            this.notify(this.drawEndMessage, this)
        };
        t.prototype.node = function () {
            return $("#" + this.id)
        };
        t.prototype.getEvents = function () {
            var t = [];
            if (this.clickMessage || this.clickCallback) {
                t.push({
                    event: "click",
                    callback: this.clickHandler,
                    target: this
                })
            }
            return t
        };
        t.prototype.drawToString = function (i, a) {
            if (!this.active) {
                return
            }
            var s = this.compileStringOpen();
            var t = this.notify(this.drawStartMessage, this, s) || s;
            var n = this.getEvents();
            if (n.length) {
                a[this.id] = n
            }
            if (this.subviews && this.subviews.length) {
                for (var e = 0, r = this.subviews.length; e < r; e++) {
                    t = this.subviews[e].drawToString(t, a)
                }
            }
            if ( !! ~this.styles.indexOf("frame-content")) {
                t += "<div class='clearfix'></div>"
            }
            t = this.compileStringClose(t);
            i += t;
            this.notify(this.drawEndMessage, this);
            return i
        };
        t.prototype.liveUpdate = function () {
            this.node().html(this.content)
        };
        t.prototype.dataUpdate = function (e, t) {
            if (!this.interaction) {
                this.content = t
            }
        };
        t.prototype.jQueryEvents = function () {
            var t = this.node();
            if (!t) {
                return
            }
            t.on("destroyed", function (t) {
                this.nodeRemoved.call(this, t)
            }.bind(this));
            if (this.clickMessage === null && this.clickCallback === null) {
                return
            }
            t.on("click", function (t) {
                this.clickHandler.call(this, t);
                t.stopPropagation()
            }.bind(this))
        };
        t.prototype.attachToDOM = function (t) {
            var e = $("#" + this.id);
            if (e.length) {
                e.replaceWith(t);
                return
            }
            if (this.parentID === null) {
                $("body")[this.attachMethod](t)
            } else {
                $("#" + this.parentID)[this.attachMethod](t)
            }
        };
        t.prototype.removeFromDOM = function () {
            $("#" + this.id).remove()
        };
        t.prototype.clickHandler = function (t) {
            t = t || window.event;
            if (this.clickCallback) {
                if (this.clickMessage) {}
                this.clickCallback(this, t)
            } else {
                this.notify(this.clickMessage, this, t)
            }
            t.stopPropagation()
        };
        t.prototype.nodeRemoved = function () {
            var t = this.node();
            t.unbind()
        };
        t.prototype.addClass = function (t) {
            if (!~this.styleArray.indexOf(t)) {
                this.styleArray.push(t);
                $("#" + this.id).addClass(t)
            }
            return this
        };
        t.prototype.removeClass = function (s) {
            var e = s.split(" ");
            for (var t = 0, n = e.length; t < n; t++) {
                var i = e[t];
                var a = this.styleArray.indexOf(i);
                if (a !== -1) {
                    this.styleArray.splice(a, 1)
                }
                $("#" + this.id).removeClass(i)
            }
            return this
        };
        t.prototype.cleanUp = function () {
            for (var t in this) {
                if (this.hasOwnProperty(t) && typeof t !== "undefined" && t !== "id") {
                    if (typeof this[t] === "object" && this[t] !== null && this[t].hasOwnProperty("subviews")) {
                        this.deleteSubviewChain(this[t])
                    }
                    this[t] = undefined
                }
            }
        };
        return t
    }(V);
    TemplateView = function (e) {
        utils.__extends(t, e);
        utils.mixin(t, U.getImage);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("template");
            this.addRequired("templateData");
            this.addOption("useContainer", false);
            this.addOption("parent", {});
            this.addOption("tag", "");
            this.addOption("attachTo", null);
            this.addOption("debugData", false);
            this.addOption("useTimer", false);
            this.setOptions(e);
            if (!this.attachTo) {
                this.attachTo = this.parent
            }
            this.frag = document.createDocumentFragment();
            this.div = document.createElement("div");
            this.drawn = false;
            this.hoverView = null;
            if (this.useTimer) {
                this._startTimer()
            }
        }
        t.prototype._startTimer = function () {
            this.notify("_V6%tK-F", this)
        };
        t.prototype._attachEvents = function () {
            var s = this.getEvents();
            for (var i = 0, n = s.length; i < n; i++) {
                var t = s[i];
                t.boundCallback = t.target ? t.callback.bind(t.target) : t.callback;
                var e = this.frag.querySelectorAll(t.selector);
                if (!e || e.length === 0) {
                    continue
                }
                for (var a = 0, r = e.length; a < r; a++) {
                    e[a].addEventListener(t.event, t.boundCallback)
                }
            }
        };
        t.prototype._removeEvents = function () {
            if (!this.templateData) {
                return
            }
            var s = this.getEvents();
            for (var e = 0, n = s.length; e < n; e++) {
                var i = s[e];
                var t = document.querySelectorAll(i.selector);
                if (!t || t.length === 0) {
                    continue
                }
                for (var a = 0, r = t.length; a < r; a++) {
                    t[a].removeEventListener(i.event, i.boundCallback, false)
                }
            }
        };
        t.prototype.create = function () {
            this.div.innerHTML = utils.Template.compile(this.template, this.templateData);
            while (this.div.firstChild) {
                this.frag.appendChild(this.div.firstChild)
            }
            this._attachEvents()
        };
        t.prototype.draw = function () {
            if (this.drawn && !this.frag.firstChild) {}
            if (this.debugData === true) {}
            if (this.useContainer) {
                var e = this.attachTo.createSubview(this.attachTo, {
                    tag: "templateContainer"
                });
                this.attachTo = e;
                e.draw()
            }
            var t = document.getElementById(this.attachTo.id);
            if (!t) {
                return
            }
            this.removeFromDOM(t);
            t.appendChild(this.frag);
            this.drawn = true
        };
        t.prototype.removeFromDOM = function (t) {
            t = t || document.getElementById(this.attachTo.id);
            if (!t) {
                return
            }
            this._removeEvents();
            while (t.firstChild) {
                t.removeChild(t.firstChild)
            }
        };
        t.prototype.cleanFragments = function () {
            var t = document.getElementById(this.attachTo.id);
            if (!t) {
                return
            }
            this.removeFromDOM(t);
            if (this.frag.firstChild) {
                while (this.frag.firstChild) {
                    this.frag.removeChild(this.frag.firstChild)
                }
            }
            this.frag = undefined;
            this.div = undefined
        };
        t.prototype.getEvents = function () {
            return []
        };
        t.prototype.bubble = function (e, a, s) {
            var t, i;
            if (typeof t === "undefined") {
                t = e.target
            }
            i = !t.id || s !== t.id;
            while (t && i && !a(t, e)) {
                t = t.parentElement
            }
            e.stopPropagation()
        };
        t.prototype.dataUpdate = function () {};
        t.prototype.hideHovers = function () {
            if (this.hoverView) {
                this.hoverView.cleanUp();
                utils.removeOrphanHovers();
                this.hoverView = null
            }
        };
        t.prototype.showHover = function (i, o, l) {
            if (this.hoverView) {
                return
            }
            this.hoverView = new o(this.controller, l);
            this.hoverView.create();
            this.hoverView.draw();
            var t = $("#" + this.hoverView.id),
                s = $(window),
                a = i.clientX + 15,
                e = i.clientY - t.outerHeight() / 2;
            t.hide();
            if (a + t.outerWidth() > s.width()) {
                a = i.clientX - t.outerWidth() - 40
            }
            var n = e + t.outerHeight(),
                r = s.height();
            if (n > r) {
                e = e - (n - r) - 40
            }
            t.css("left", a);
            t.css("top", e);
            window.setTimeout(function () {
                t.stop().fadeIn(200)
            }, 200)
        };
        t.prototype.activateSlider = function (t, i, a, s) {
            var e;
            e = function (e) {
                this.notify("HQkeVqf2", this, {
                    name: t,
                    value: e
                })
            };
            return new fi(t, {
                value: s,
                min: i,
                max: a,
                change: e.bind(this)
            })
        };
        t.prototype.timeEvent = function () {};
        t.prototype.show = function () {
            var t = this.templateData ? this.templateData.htmlID : null,
                e = document.getElementById(t);
            if (!t || !e) {
                return
            }
            $(e).show()
        };
        t.prototype.hide = function () {
            var t = this.templateData ? this.templateData.htmlID : null,
                e = document.getElementById(t);
            if (!t || !e) {
                return
            }
            $(e).hide()
        };
        return t
    }(V);
    Be = function (e) {
        utils.__extends(t, e);
        utils.mixin(t, U.subViews);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("pos", null);
            this.addOption("height", null);
            this.addOption("zIndex", -1);
            this.addOption("lockZIndex", false);
            this.addOption("staticPosition", false);
            this.addOption("closable", true);
            this.addOption("clickMessage", "-GKTQQK)", true);
            this.setOptions(e);
            if (this.pos === null) {
                this.pos = this.notify("NwOKYUc3", this)
            }
            this.drawStartMessage = "nATeHc%5";
            this.drawEndMessage = "HTnWZGse";
            this.isFlashing = false;
            if (this.staticPosition === true) {
                this.styleArray.push("static")
            }
            this._doNotClick = false;
            this.$win = [];
            this.scrollPosition = 0;
            this._propertiesCache = {};
            this.blockOverlay = false;
            this.moveOverlay = false;
            this._blockOverlayRemoved = true;
            this._moveOverlayRemoved = true
        }
        t.prototype.create = function () {};
        t.prototype.cancelNextClickMessage = function () {
            this._doNotClick = true
        };
        t.prototype.clickHandler = function (t) {
            if (!this._doNotClick) {
                this.notify(this.clickMessage, this)
            } else {
                this._doNotClick = false
            }
            t.stopPropagation();
            return false
        };
        t.prototype.position = function () {
            return this.pos
        };
        t.prototype.updatePosition = function (t) {
            if (this.staticPosition === true) {
                return false
            }
            var e = this.notify("HJySJGyf", this);
            if (!this.width) {
                this.width = this.$win.width()
            }
            if (t.x > e.width - this.width) {
                t.x = e.width - this.width
            }
            if (t.y > e.height - this.height) {
                t.y = e.height - this.height
            }
            if (t.x < 0) {
                t.x = 0
            }
            if (t.y < 0) {
                t.y = 0
            }
            this.pos = t
        };
        t.prototype.show = function (t) {
            if (t !== false) {
                t = true
            }
            if (this.hidden) {
                this.hidden = false;
                if (this.$win.length > 0) {
                    this.$win.removeClass("hidden")
                }
            }
            if (!this.lockZIndex) {
                this.notify("mMHUNlk%", this, t)
            }
            this.notify("yuPMSBc_", this, null)
        };
        t.prototype.hide = function () {
            if (this.$win.length === 0) {
                this.$win = $("#" + this.id)
            }
            this.hidden = true;
            this.$win.addClass("hidden")
        };
        t.prototype.fixZIndex = function (t) {
            this.zIndex = t;
            this.lockZIndex = true;
            this.liveUpdate()
        };
        t.prototype.resetZIndex = function () {
            this.lockZIndex = false;
            this.notify("mMHUNlk%", this)
        };
        t.prototype.compileHTML = function () {
            var i = t.__super__.compileHTML.apply(this, arguments),
                e = $(i);
            if (this.zIndex === -1) {
                this.notify("mMHUNlk%", this, false)
            }
            if (!this.staticPosition) {
                e.css("z-index", this.zIndex);
                e.css("left", this.pos.x);
                e.css("top", this.pos.y)
            }
            if (this.height) {
                e.css("height", this.height)
            }
            return e
        };
        t.prototype._setDOMCSS = function (i, t, e) {
            if (this._propertiesCache[t] !== e) {
                i.css(t, e);
                this._propertiesCache[t] = e
            }
        };
        t.prototype.liveUpdate = function () {
            if (this.$win.length === 0) {
                this.$win = $("#" + this.id);
                this.blockOverlay = false;
                this.moveOverlay = false;
                return
            }
            if (this.blockOverlay) {
                if (!this.$win.find(".overlay").length) {
                    this.$win.append($("<div class='overlay'>").append(this.notify("wrl8b7Ym", this)));
                    this.$win.find("div.overlay").click(function (t) {
                        t.stopPropagation();
                        t.preventDefault();
                        return false
                    })
                }
            } else if (this.moveOverlay) {
                if (this.$win.find(".main-content").length && !this.scrollPosition) {
                    this.scrollPosition = this.$win.find(".main-content").scrollTop()
                }
                this.$win.find(".window-content").hide();
                if (!this.$win.find(".content-container .overlay").length) {
                    this.$win.find(".inner-frame").append($("<div class='overlay'>").append(this.notify("wrl8b7Ym", this)))
                }
            } else {
                if (!this._moveOverlayRemoved || !this._blockOverlayRemoved) {
                    this.$win.find("div.overlay").remove();
                    this.$win.find(".window-content").show();
                    if (this.scrollPosition) {
                        this.$win.find(".main-content").scrollTop(this.scrollPosition);
                        this.scrollPosition = 0
                    }
                    this._moveOverlayRemoved = true;
                    this._blockOverlayRemoved = true
                }
            } if (this.isFlashing === true) {
                return
            }
            if (this.zIndex === -1) {
                this.notify("mMHUNlk%", this, false)
            }
            if (this.$win.length === 0) {
                return
            }
            if (!this.staticPosition) {
                this._setDOMCSS(this.$win, "z-index", this.zIndex);
                this._setDOMCSS(this.$win, "left", this.pos.x);
                this._setDOMCSS(this.$win, "top", this.pos.y)
            }
            if (this.height) {
                this._setDOMCSS(this.$win, "height", this.height)
            } else {
                this.height = this.$win.height()
            }
        };
        t.prototype.showBlockOverlay = function () {
            if (this.unblockTimer) {
                window.clearTimeout(this.unblockTimer)
            }
            this.unblockTimer = window.setTimeout(this._unblockTimer.bind(this), 3e4);
            if (!this.blockOverlay) {
                this.blockOverlay = true;
                this._blockOverlayRemoved = false;
                this.liveUpdate()
            }
        };
        t.prototype.hideBlockOverlay = function () {
            if (this.unblockTimer) {
                window.clearTimeout(this.unblockTimer);
                this.unblockTimer = null
            }
            if (this.blockOverlay) {
                this.blockOverlay = false;
                this.liveUpdate()
            }
        };
        t.prototype.showMoveOverlay = function () {
            this.moveOverlay = true;
            this._moveOverlayRemoved = false
        };
        t.prototype.hideMoveOverlay = function () {
            this.moveOverlay = false
        };
        t.prototype._unblockTimer = function () {
            this.notify("bOsn(oQ9", this);
            this.hideBlockOverlay()
        };
        t.prototype.dataUpdate = function (e, t) {
            this.setOptions(t);
            this.deleteAllSubviews();
            this.create()
        };
        return t
    }(ye);
    ke = function (e) {
        utils.__extends(t, Ce);

        function t(e) {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.updatePosition = function (t) {
            this.view.updatePosition(t)
        };
        t.prototype.raise = function (e) {
            if (!this.view || this.view.lockZIndex === true) {
                return
            }
            var t = this.notify("3Vi_Ps%e", this, {
                doFlashing: e,
                zIndex: this.view.zIndex
            });
            if (t !== this.view.zIndex) {
                this.view.zIndex = t;
                this.view.liveUpdate()
            }
        };
        t.prototype["mMHUNlk%"] = function (e, t) {
            if (t !== true) {
                t = false
            }
            this.raise(t)
        };
        t.prototype["-GKTQQK)"] = function (t) {
            this.raise(false)
        };
        t.prototype["nATeHc%5"] = function (e, a) {
            var i = this.notify("7v%5T22p", this);
            var t = i.getFrameController();
            if (t !== null) {
                return t.frame(e)
            }
            return
        };
        t.prototype["HTnWZGse"] = function (t, e) {
            this.view.$win = $("#" + this.view.id);
            this.view.height = this.view.$win.height()
        };
        t.prototype["_0r2tiwg"] = function (e, t) {
            if (!this.draggingElement) {
                return
            }
            if (!this.draggingElement.drag.down) {
                return
            }
            this.view.updatePosition({
                x: t.pageX - this.draggingElement.drag.start.offsetX,
                y: t.pageY - this.draggingElement.drag.start.offsetY
            });
            this.view.liveUpdate()
        };
        t.prototype["mm-DpP)j"] = function (t, e) {
            if (typeof this.draggingElement == "undefined") {
                return
            }
            this.draggingElement.drag.down = false;
            if (t && t.name && this.name && t.name == this.name) {
                this.raise(false)
            }
            this.notify("Uq1)fBaP", this, this.view.pos)
        };
        t.prototype["mdR0z08O"] = function (t, e) {
            this["mm-DpP)j"](arguments)
        };
        t.prototype["Uz5GZ1iC"] = function (t, e) {
            var i = this.view.position();
            this.draggingElement = t;
            t.drag.down = true;
            t.drag.start = {
                offsetX: e.x - i.x,
                offsetY: e.y - i.y
            };
            this.raise(false)
        };
        t.prototype["wrl8b7Ym"] = function (e) {
            var t = this.notify("7v%5T22p", this);
            return t.getImage("loaderAnimationClean", "browserIcons")
        };
        t.prototype["PjmTAnYn"] = function (a, e) {
            if (!this.view) {
                return
            }
            e = e || window;
            var t = $("#" + this.view.id),
                i = $(e.target);
            this.viewport = {
                target: i,
                width: i.width(),
                height: i.height()
            };
            if (this.view.pos.x + t.width() > this.viewport.width) {
                this.view.updatePosition({
                    x: this.viewport.width - t.width(),
                    y: this.view.pos.y
                })
            }
            if (this.view.pos.y + t.height() > this.viewport.height) {
                this.view.updatePosition({
                    y: this.viewport.height - t.height(),
                    x: this.view.pos.x
                })
            }
            if (this.view.pos.y < 0) {
                this.view.updatePosition({
                    y: 0,
                    x: this.view.pos.x
                })
            }
            this.view.liveUpdate()
        };
        t.prototype["HJySJGyf"] = function (e) {
            if (this.viewport && this.viewport.target.length && this.viewport.width && this.viewport.height) {
                return this.viewport
            }
            var t = $(window);
            this.viewport = {
                target: t,
                width: t.width(),
                height: t.height()
            };
            return this.viewport
        };
        t.prototype["NwOKYUc3"] = function (t) {
            return this.notify("NwOKYUc3", t)
        };
        t.prototype["Uq1)fBaP"] = function (e, t) {
            return this.notify("Uq1)fBaP", this, t)
        };
        t.prototype["yuPMSBc_"] = function (t) {
            return this.notify("yuPMSBc_", this)
        };
        return t
    }(Ce);
    e = function (e) {
        utils.__extends(t, ye);
        utils.mixin(t, U.subViews);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("group", "Element", true);
            this.addOption("clickMessage", null, true);
            this.addOption("data", null);
            this.addOption("propagateClicks", true);
            this.setOptions(e);
            this.drawStartMessage = "gjXVYBoo";
            this.drawEndMessage = "bdx3&c-f"
        }
        t.prototype.create = function () {};
        t.prototype.clickHandler = function (e) {
            t.__super__.clickHandler.apply(this, arguments);
            if (this.propagateClicks === false) {
                e.stopPropagation()
            }
        };
        t.prototype.dataUpdate = function (e, t) {
            this.setOptions(t);
            this.deleteAllSubviews();
            this.create();
            return this
        };
        return t
    }(ye);
    yi = function (i) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments);
            this.drag = {
                down: false,
                start: null,
                dist: null
            }
        }
        t.prototype.mouseDown = function (t) {
            var e = t.data;
            e.notify("Uz5GZ1iC", e, {
                x: t.pageX,
                y: t.pageY
            });
            t.preventDefault();
            t.stopPropagation();
            return false
        };
        t.prototype.attachToDOM = function (e) {
            t.__super__.attachToDOM.apply(this, arguments);
            $("#" + this.id).on("mousedown touchstart", this, this.mouseDown)
        };
        return t
    }(e);
    N = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("hoverView", null);
            this.addOption("lazyHoverClass", null);
            this.addOption("lazyHoverOptions", {});
            this.addOption("expiryInterval", 3e3);
            this.addOption("hoverDelay", 400);
            this.addOption("hoverOnClick", false);
            this.setOptions(e);
            this.hovers = true;
            this.timeout = null;
            if (this.hoverOnClick) {
                this.hoverDelay = 0
            }
        }
        t.prototype.hoverIn = function (t) {
            var e = t.data || this;
            utils.removeOrphanHovers();
            e.hovers = true;
            if (!this.timeout) {
                this.timeout = window.setTimeout(function () {
                    if (e.hovers) {
                        e.drawHover(t)
                    }
                }, e.hoverDelay)
            }
            if (t.stopPropagation) {
                t.stopPropagation();
                t.preventDefault()
            }
        };
        t.prototype.hoverOut = function (t) {
            if (this.timeout) {
                window.clearTimeout(this.timeout);
                this.timeout = null
            }
            var e = t.data || this;
            utils.removeOrphanHovers();
            e.hovers = false;
            e.drawHover(t);
            if (t.stopPropagation) {
                t.stopPropagation();
                t.preventDefault()
            }
        };
        t.prototype.attachToDOM = function (i) {
            t.__super__.attachToDOM.apply(this, arguments);
            var e = $("#" + this.id);
            if (this.hoverOnClick) {
                e.on("click", this, this.hoverIn.bind(this))
            } else {
                e.on("mouseenter", this, this.hoverIn.bind(this));
                e.on("mouseleave onmouseup", this, this.hoverOut.bind(this))
            }
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            if (this.hoverOnClick) {
                e.push({
                    event: "click",
                    callback: this.hoverIn,
                    target: this
                })
            } else {
                e.push({
                    event: "mouseover",
                    callback: this.hoverIn,
                    target: this
                });
                e.push({
                    event: "mouseout",
                    callback: this.hoverOut,
                    target: this
                });
                e.push({
                    event: "mouseup",
                    callback: this.hoverOut,
                    target: this
                })
            }
            return e
        };
        t.prototype.drawHover = function (i) {
            if (this.timeout) {
                window.clearTimeout(this.timeout);
                this.timeout = null
            }
            if (this.lazyHoverClass !== null && this.hoverView === null) {
                this.hoverView = new this.lazyHoverClass(this.controller, this.lazyHoverOptions);
                this.hoverView.create()
            }
            if (this.hovers && this.hoverView) {
                this.hoverView.draw();
                var t = $("#" + this.hoverView.id),
                    o = $("#" + this.id),
                    s = $(window),
                    l = o.offset(),
                    a = i.clientX + 15,
                    e = i.clientY - t.outerHeight() / 2;
                t.hide();
                if (a + t.outerWidth() > s.width()) {
                    a = i.clientX - t.outerWidth() - 40
                }
                var n = e + t.outerHeight(),
                    r = s.height();
                if (n > r) {
                    e = e - (n - r) - 40
                }
                t.css("left", a);
                t.css("top", e);
                t.stop().fadeIn(200);
                if (this.expiryInterval) {
                    this.timeout = setTimeout(this.expiryTimeout.bind(this), this.expiryInterval)
                }
            } else {
                if (this.hoverView) {
                    this.hoverView.removeFromDOM()
                }
            }
        };
        t.prototype.expiryTimeout = function () {
            if (!this.hoverView) {
                return
            }
            var t = $("#" + this.hoverView.id);
            if (!this.hoverView.hidden && t.length) {
                t.remove()
            }
        };
        t.prototype.clickHandler = function (e) {
            t.__super__.clickHandler.apply(this, arguments);
            if (this.hoverView) {
                this.hoverView.removeFromDOM()
            }
            this.hovers = false
        };
        t.prototype.dataUpdate = function (e, i) {
            t.__super__.dataUpdate.apply(this, arguments);
            this.removeFromDOM();
            this.hovers = false
        };
        return t
    }(e);
    K = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("showIcon", false);
            this.addOption("showText", false);
            this.addOption("showSeconds", false);
            this.addOption("interval", 10);
            this.addOption("icon", null);
            this.addOption("caption", "");
            this.addOption("time", 0);
            this.addOption("divider", false);
            this.addOption("runningTimer", false);
            this.addOption("formatFunction", utils.date.secToTimeStr);
            this.setOptions(e);
            this.drawEndMessage = "6p(nJPKd"
        }
        t.prototype.startTimer = function () {
            this.notify("_V6%tK-F", this, {
                time: this.time
            })
        };
        t.prototype.create = function () {
            var t;
            this.timeLeft = this.time;
            if (this.showIcon === true) {
                var i = this.icon;
                if (!i) {
                    i = this.getIcon("duration")
                }
                t = {
                    parent: this,
                    styles: "durationIcon icon",
                    content: i
                };
                this.addSubview(new e(this.controller, t))
            }
            if (this.showText === true) {
                t = {
                    parent: this,
                    content: this.caption,
                    styles: "caption"
                };
                this.addSubview(new e(this.controller, t))
            }
            if (this.divider) {
                t = {
                    parent: this,
                    content: this.divider,
                    styles: "dash"
                };
                this.addSubview(new e(this.controller, t))
            }
            t = {
                parent: this,
                styles: "counter",
                content: this.formatFunction(this.timeLeft, this.showSeconds)
            };
            this.timeLeftDisplay = new e(this.controller, t);
            this.addSubview(this.timeLeftDisplay);
            if (this.runningTimer === true) {
                this.startTimer()
            }
        };
        t.prototype.destroy = function () {
            this.notify("BRfyQ)_c", this)
        };
        t.prototype.timeEvent = function (e) {
            if (this.timeLeft > 0) {
                this.timeLeft -= this.interval
            }
            var t = document.getElementById(this.timeLeftDisplay.id);
            t.innerHTML = this.formatFunction(this.timeLeft, this.showSeconds);
            if (this.timeLeft <= 0) {
                return false
            }
            return true
        };
        return t
    }(e);
    Si = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("href", "#");
            this.addOption("target", null);
            this.addOption("element", "a", true);
            this.setOptions(e)
        }
        t.prototype.compileHTML = function () {
            var e = t.__super__.compileHTML.apply(this, arguments);
            e.attr("href", this.href);
            e.attr("target", this.target);
            return e
        };
        return t
    }(e);
    m = function () {
        utils.mixin(t, U.delegate);
        utils.mixin(t, U.getImage);

        function t(t) {
            t = t || null;
            this.setDelegate(t);
            this.__data = null;
            this.subscribers = [];
            this.id = utils.uniqueID()
        }
        t.prototype.getSubscribers = function () {
            return this.subscribers
        };
        t.prototype.addSubscriber = function (t) {
            this.subscribers.push(t)
        };
        t.prototype._publish = function (e) {
            for (var t = 0, i = this.subscribers.length; t < i; t++) {
                if (typeof this.subscribers[t][e] === "undefined") {
                    continue
                }
                this.subscribers[t][e](this, this.__data)
            }
        };
        t.prototype.publishUpdate = function () {
            this._publish("dataUpdate")
        };
        t.prototype.publishDeltaUpdate = function () {
            this._publish("deltaUpdate")
        };
        t.prototype.getData = function () {
            return this.__data
        };
        t.prototype.setData = function (t) {
            this.__data = t;
            this.informControllerUnblock();
            this.publishUpdate()
        };
        t.prototype.modelUpdate = function () {
            this.informControllerUnblock();
            this.publishUpdate()
        };
        t.prototype.triggerModelUpdate = function (t) {
            this.informControllerUnblock();
            this.notify("1Vzu&V(d", this, t)
        };
        t.prototype.displayError = function (t) {
            var e = t && t.error ? t.error : t;
            var i = {
                content: translate(e),
                title: translate("Error")
            };
            this.notify("w9Uztjx2", this, i);
            this.informControllerUnblock();
            this.publishUpdate()
        };
        t.prototype.informControllerUnblock = function () {
            var e = this.getSubscribers();
            for (var t = 0; t < e.length; t++) {
                if (typeof e[t].view != "undefined" && e[t].view !== null) {
                    this.notify("VY71NNds", e[t].view)
                }
            }
        };
        t.prototype.cleanUp = function () {
            this.__data = undefined;
            this.subscribers = [];
            this.controller = undefined
        };
        return t
    }();
    G = function (e) {
        utils.__extends(t, ye);
        utils.mixin(t, U.subViews);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("rowClass");
            this.addOption("data", null);
            this.clickMessage = "a)z9PPAy";
            this.setOptions(e);
            this.drawStartMessage = "4a43Dphr";
            this.drawEndMessage = "jOsOWUcl"
        }
        t.prototype.create = function () {
            if (this.data === null) {
                return
            }
            for (var t = 0; t < this.data.length; t++) {
                this.addSubview(this.createRow(this.data[t], t))
            }
        };
        t.prototype.dataUpdate = function (e, t) {
            this.deleteAllSubviews();
            this.data = t;
            this.create();
            this.draw()
        };
        t.prototype.createRow = function (t, i) {
            t.parent = this;
            if (typeof t.rowID === "undefined") {
                t.rowID = i
            }
            var e = new this.rowClass(this.controller, t);
            if (e.create) {
                e.create()
            }
            return e
        };
        return t
    }(ye);
    pi = function (e) {
        utils.__extends(t, G);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("pageItems");
            this.setOptions(e);
            this.page = 0;
            this.pageMax = 0
        }
        t.prototype.dataUpdate = function (e, t) {
            this.page = 0;
            this.pageMax = Math.ceil(t.length / this.pageItems) || this.page;
            this.data = t;
            this.createPage(this.page);
            this.draw()
        };
        t.prototype.createPage = function (i) {
            var t;
            this.deleteAllSubviews();
            if (typeof this.data != "undefined") {
                t = (this.page + 1) * this.pageItems;
                if (t > this.data.length) {
                    t = this.data.length
                }
                for (var e = this.page * this.pageItems; e < t; e++) {
                    this.subviews.push(this.createRow(this.data[e], e))
                }
            }
        };
        t.prototype.nextPage = function () {
            if ((this.page + 1) * this.pageItems >= this.data.length) {
                return
            }
            this.page += 1;
            this.createPage(this.page)
        };
        t.prototype.prevPage = function () {
            if (this.page - 1 < 0) {
                return
            }
            this.page -= 1;
            this.createPage(this.page)
        };
        return t
    }(G);
    De = function (e) {
        utils.__extends(t, G);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("pageItems");
            this.addOption("hasPrevButton", false);
            this.addOption("nextButtonClickMessage", "c3RfJScb");
            this.addOption("prevButtonClickMessage", "wNQtmswA");
            this.setOptions(e);
            this.page = 0;
            this.pageMax = 0;
            this.continueButton = new l(this.controller, {
                parent: this,
                name: "nextPageButton",
                content: this.notify("rvHW39mY", this, {
                    imageName: "arrowDown",
                    imageCategory: "icons"
                }),
                clickMessage: this.nextButtonClickMessage,
                styles: "paginate wide bottom"
            });
            this.previousButton = new l(this.controller, {
                parent: this,
                name: "prevPageButton",
                content: this.notify("rvHW39mY", this, {
                    imageName: "arrowUp",
                    imageCategory: "icons"
                }),
                clickMessage: this.prevButtonClickMessage,
                styles: "paginate wide"
            })
        }
        t.prototype.dataUpdate = function (e, t) {
            this.deleteAllSubviews();
            this.page = 0;
            this.pageMax = Math.ceil(t.length / this.pageItems) || this.page;
            this.data = t;
            this.createPage(this.page);
            this.draw()
        };
        t.prototype.hidePageButton = function () {
            if (!this.subviews || this.subviews.length === 0) {
                return
            }
            this.hideNextPageButton();
            this.hidePrevPageButton()
        };
        t.prototype.hideNextPageButton = function () {
            if (this.subviews[this.subviews.length - 1].name == "nextPageButton") {
                this.subviews = this.subviews.splice(0, this.subviews.length - 1)
            }
        };
        t.prototype.hidePrevPageButton = function () {
            if (this.hasPrevButton && this.subviews[0].name == "prevPageButton") {
                this.subviews = this.subviews.splice(1, this.subviews.length)
            }
        };
        t.prototype.showNextPageButton = function () {
            this.subviews.push(this.continueButton)
        };
        t.prototype.showPrevPageButton = function () {
            this.subviews.unshift(this.previousButton)
        };
        t.prototype.createPage = function (i) {
            var t;
            this.hidePageButton();
            if (this.hasPrevButton) {
                this.showPrevPageButton()
            }
            if (typeof this.data != "undefined") {
                t = (this.page + 1) * this.pageItems;
                if (t > this.data.length) {
                    t = this.data.length
                }
                for (var e = this.page * this.pageItems; e < t; e++) {
                    this.subviews.push(this.createRow(this.data[e], e))
                }
            }
            if ((this.page + 1) * this.pageItems < this.data.length) {
                this.showNextPageButton()
            }
        };
        t.prototype.nextPage = function () {
            if ((this.page + 1) * this.pageItems >= this.data.length) {
                this.hideNextPageButton();
                return
            }
            this.page += 1;
            this.createPage(this.page)
        };
        t.prototype.prevPage = function () {
            if (this.page - 1 < 0) {
                return
            }
            this.page -= 1;
            this.createPage(this.page)
        };
        return t
    }(G);
    TreeTable = function (i) {
        utils.__extends(t, i);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("rows");
            this.addOption("name", "treeTable", true);
            this.addOption("group", "TreeTable", true);
            this.addOption("dynamicTitleOffset", 25);
            this.setOptions(e);
            this.dataUpdate(null, this.rows)
        }

        function e(o, s, y) {
            if (!o) {
                return
            }
            s = typeof s === "undefined" ? 1 : s;
            var n = "";
            for (var l = 0, m = o.rows.length; l < m; l++) {
                var t = o.rows[l],
                    p = "level-" + s,
                    g = t.data,
                    u = !! t.rows,
                    h;
                h = a(s, p, g, u);
                n += "<tr " + h + ">";
                for (var r = 0, f = t.cells.length; r < f; r++) {
                    var i = t.cells[r],
                        c = "";
                    if (r === 0) {
                        var d = utils.dynamicTitle(i, y);
                        i = "";
                        if (t.icon) {
                            i += "<span class='icon'>" + t.icon + "</span>"
                        }
                        i += "<span class='text'>" + d;
                        if (t.extraContent) {
                            c = ' class="has-extra-content"';
                            i += "<span class='extra'>" + t.extraContent + "</span>"
                        }
                        i += "</span>";
                        if (t.button) {
                            i += "<div class='button'>" + t.button + "</div>"
                        }
                    }
                    if (i === 0) {
                        i = " "
                    }
                    n += "<td" + c + ">" + i + "</td>"
                }
                if (u) {
                    n += e(t, s + 1);
                    bindListner = true
                }
                n += "</tr>"
            }
            return n
        }

        function a(s, e, i, n) {
            var t = "";
            if (s > 1) {
                e += " subrow"
            }
            if (n) {
                e += " has-sub-rows";
                t += 'data-expand="true"'
            }
            t += ' class="' + e + '"';
            if (i) {
                for (var a in i) {
                    var r = i[a];
                    t += " data-" + a + '="' + r + '"'
                }
            }
            return t
        }
        t.prototype.dataUpdate = function (e, t) {
            this.rows = t;
            this.deleteAllSubviews();
            this.create()
        };
        t.prototype.create = function () {
            var t = "",
                i = "tree-table";
            if (this.styles) {
                i += " " + styles
            }
            t = "<table class='" + i + "' id='" + this.id + "'>";
            t += e(this, 1, this.dynamicTitleOffset);
            t += "</table>";
            this.output = t
        };
        t.prototype.draw = function () {
            if (!this.active) {
                return
            }
            if (!this.output) {
                this.create()
            }
            var t = this.output;
            var e = this.notify(this.drawStartMessage, this, t) || t;
            this.attachToDOM(e);
            this.jQueryEvents();
            this.notify(this.drawEndMessage, this)
        };
        t.prototype.jQueryEvents = function () {
            var t = this.node();
            t.data("controller", this);
            t.find("tr[data-expand]").on("click", function () {
                var t = $(this),
                    a = t.nextAll("tr"),
                    s = t.hasClass("active");
                if (s) {
                    t.removeClass("active")
                } else {
                    t.addClass("active")
                }
                for (var e = 0, n = a.length; e < n; e++) {
                    var i = $(a[e]);
                    if (i.hasClass("subrow")) {
                        if (s) {
                            i.hide()
                        } else {
                            i.show()
                        }
                    } else {
                        break
                    }
                }
                t.trigger("treetable:toggle")
            })
        };
        t.prototype.expandAll = function () {
            var t = this.node();
            t.trigger("treetable:expandAll");
            t.find("tr.subrow").show();
            t.find("tr[data-expand]").addClass("active")
        };
        t.prototype.collapseAll = function () {
            var t = this.node();
            t.trigger("treetable:collapseAll");
            t.find("tr.subrow").hide();
            t.find("tr[data-expand]").removeClass("active")
        };
        return t
    }(e);
    ZombieTable = function (e) {
        utils.__extends(t, G);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("generateSubviews", false);
            this.setOptions(e);
            this.elementsToAppendPerPage = 20;
            this.startIndex = 0;
            this.endIndex = 20;
            this.frag = document.createDocumentFragment();
            this.inital = true;
            this.elementReferences = []
        }
        t.prototype.addMoreElements = function () {
            this.endIndex += this.elementsToAppendPerPage;
            if (this.endIndex > this.data.length) {
                this.endIndex = this.data.length
            }
            this.startIndex += this.elementsToAppendPerPage
        };
        t.prototype.containerResized = function (t) {
            this._containerHeight = t;
            this.node().height(t)
        };
        t.prototype.create = function (r, o) {
            if (this.data === null) return;
            r = r || 0;
            o = o || this.data.length;
            var e, u = "",
                s = {}, n = document.createElement("div");
            for (var t = r, a = o; t < a; t++) {
                e = this.controller["dkFkg0TZ"](this, {
                    index: t,
                    data: this.data[t]
                });
                if (typeof e === "undefined" || e === null) continue;
                this.elementReferences.push(e);
                u += e.drawToString("", s);
                if (this.generateSubviews) this.subviews.push(e);
                this.notify("PWD79p-G", this, {
                    element: e
                })
            }
            n.innerHTML += u;
            while (n.firstChild) this.frag.appendChild(n.firstChild);
            for (var l in s) {
                var i = s[l];
                e = this.frag.querySelector("#" + l);
                for (t = 0, a = i.length; t < a; t++) {
                    var c = i[t].event;
                    var d = i[t].callback;
                    var p = i[t].target;
                    var h = i[t].selector;
                    if (h) {
                        e = this.frag.querySelector(h)
                    }
                    e.addEventListener(c, d.bind(p))
                }
            }
        };
        t.prototype.dataUpdate = function (i, t) {
            if (t === null) {
                return
            }
            var e = this.node();
            this.data = t;
            if (this.generateSubviews) {
                this.deleteAllSubviews()
            }
            this._cleanUpReferences();
            if (e) {
                e.children().remove()
            }
            this.create()
        };
        t.prototype.draw = function () {
            if (!this.active) {
                return
            }
            this.notify("iHzklt)N", this);
            var t = this.compileHTML();
            var e = this.notify(this.drawStartMessage, this, t) || t;
            if (this._containerHeight) {
                e.height(this._containerHeight)
            }
            this.attachToDOM(e);
            this.jQueryEvents();
            if (this.frag) this.node()[0].appendChild(this.frag);
            this.notify(this.drawEndMessage, this)
        };
        t.prototype.containerDrawn = function () {};
        t.prototype.updateScrollbar = function () {};
        t.prototype.updateSingleRow = function (d, l) {
            var t = l;
            var i = {}, s = "",
                n = document.createElement("div");
            element = this.controller["dkFkg0TZ"](this, {
                index: t,
                data: this.data[t]
            });
            if (typeof element === "undefined" || element === null) return;
            this.elementReferences.push(element);
            s += element.drawToString("", i);
            if (this.generateSubviews) this.subviews.push(element);
            this.notify("PWD79p-G", this, {
                element: element
            });
            n.innerHTML += s;
            var a = document.getElementById(this.id);
            a.replaceChild(n.firstChild, a.querySelector("#" + d));
            for (var o in i) {
                var e = i[o];
                element = document.querySelector("#" + o);
                for (t = 0, j = e.length; t < j; t++) {
                    var u = e[t].event;
                    var h = e[t].callback;
                    var c = e[t].target;
                    var r = e[t].selector;
                    if (r) {
                        element = document.querySelector(r)
                    }
                    element.addEventListener(u, h.bind(c))
                }
            }
        };
        t.prototype._cleanUpReferences = function () {
            for (var t = 0; t < this.elementReferences.length; t++) {
                this.deleteSubviewChain(this.elementReferences[t]);
                this.elementReferences[t] = undefined
            }
            this.elementReferences = []
        };
        return t
    }(G);
    O.Input = function (e) {
        utils.__extends(t, e);

        function t(a, i) {
            t.__super__.constructor.apply(this, arguments);
            var e = {
                max: translate("Message content is too long."),
                min: translate("Please enter content"),
                blank: translate("Please enter content")
            };
            this.addOption("currentValue", "");
            this.addOption("caption", "Message");
            this.addOption("inputType", "string");
            this.addOption("minLength", false);
            this.addOption("maxLength", false);
            this.addOption("allowBlank", false);
            this.addOption("validationOutput", {});
            this.addOption("styles", "input", true);
            this.addOption("warningStyle", "warning");
            this.addOption("validationMessages", e);
            this.setOptions(i);
            this._fixValidationMessages(e);
            this.validationOutput = {};
            this.create()
        }
        t.prototype._fixValidationMessages = function (t) {
            if (!this.validationMessages) {
                this.validationMessages = t;
                return
            }
            for (var e in t) {
                var i = t[e];
                if (typeof this.validationMessages[e] === "undefined") {
                    this.validationMessages[e] = i
                }
            }
        };
        t.prototype.create = function (n) {
            if (this.initiated && !n) {
                return
            }
            var t = this.currentValue || "",
                a = "",
                r = this.maxLength,
                i = false,
                e, s;
            if (this.maxLength && this.maxLength > 0) {
                s = t.length;
                i = "<p class='limitMessage'>" + translate(this.caption);
                i += " (<span class='chars'>" + s + "/" + r + "</span>)</p>"
            }
            if (this.inputType == "string") {
                e = "<input type='text' value='" + utils.escapeHtmlEntities(t) + "'" + a + "  />"
            } else if (this.inputType == "text") {
                t = this._convertBreaks(t);
                e = "<textarea rows='5' cols='30'" + a + ">" + t + "</textarea>"
            } else {
                e = false
            }
            this.content = i ? e + i : e;
            this.initiated = true
        };
        t.prototype.jQueryEvents = function () {
            if (!this.maxLength || this.maxLength < 1) {
                return
            }
            var t = this.$el();
            t.on("keyup", this, utils.bind(function (i) {
                var a = this.getValue().length,
                    e = t.parent().find(".limitMessage .chars");
                e.html(a + "/" + this.maxLength);
                !this.validate() ? e.addClass(this.warningStyle) : e.removeClass(this.warningStyle);
                i.stopPropagation()
            }, this))
        };
        t.prototype.retainValue = function () {
            this.currentValue = this.getValue();
            this.create(true)
        };
        t.prototype.$el = function () {
            return $("#" + this.id).find(":input")
        };
        t.prototype.setAttr = function (t, e) {
            return this.$el().attr(t, e)
        };
        t.prototype.getAttr = function (t) {
            return this.$el().attr(t)
        };
        t.prototype.setValue = function (t) {
            return this.$el().val(t)
        };
        t.prototype.getValue = function () {
            return this.$el().val()
        };
        t.prototype.validate = function () {
            var t = true;
            val = this.getValue();
            if (this.maxLength && val.length > this.maxLength) {
                t = false;
                this._addValidationOutput("maxLength", this.validationMessages.max)
            } else {
                this._removeValidationOutput("maxLength")
            } if (this.minLength && val.length < this.minLength) {
                t = false;
                this._addValidationOutput("minLength", this.validationMessages.min)
            } else {
                this._removeValidationOutput("minLength")
            } if (this.allowBlank === false && !/\S/.test(val)) {
                t = false;
                this._addValidationOutput("blank", this.validationMessages.blank)
            } else {
                this._removeValidationOutput("blank")
            }
            var e = t ? "POUKlbut" : "AhB5UK7v";
            this.notify(e, this);
            return t
        };
        t.prototype._addValidationOutput = function (t, e) {
            this.validationOutput[t] = e;
            return this.validationOutput
        };
        t.prototype._removeValidationOutput = function (t) {
            delete this.validationOutput[t];
            return this.validationOutput
        };
        t.prototype._convertBreaks = function (t) {
            return t.replace(/<br(.*?)>/g, "\n")
        };
        t.prototype.addContent = function (t) {
            this.$el().val(this.$el().val() + t)
        };
        return t
    }(e);
    O.Element = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("group", "FormElement");
            this.setOptions(e)
        }
        t.prototype.jQueryEvents = function () {
            $("#" + this.id + " :input").on("click", this, this.clickHandler)
        };
        t.prototype.clickHandler = function (t) {
            t.data.notify(t.data.clickMessage, t.data);
            t.stopPropagation()
        };
        return t
    }(e);
    O.Checkbox = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("checked", false);
            this.addOption("content", "<input type='checkbox' />", true);
            this.addOption("fireClickMessage", false);
            this.setOptions(e)
        }
        t.prototype.isChecked = function () {
            return this.checked
        };
        t.prototype.check = function () {
            this.checked = true
        };
        t.prototype.uncheck = function () {
            this.checked = false
        };
        t.prototype.draw = function () {
            t.__super__.draw.apply(this, arguments);
            $("#" + this.id + " input").prop("checked", this.checked)
        };
        t.prototype.liveUpdate = function () {
            $("#" + this.id + " input").prop("checked", this.checked)
        };
        t.prototype.compileStringOpen = function () {
            if (this.checked) {
                this.content = "<input type='checkbox' checked />"
            } else {
                this.content = "<input type='checkbox' />"
            }
            return t.__super__.compileStringOpen.apply(this, arguments)
        };
        t.prototype.clickHandler = function (e) {
            var t = e.data || this;
            t.checked = $("#" + t.id + " :input").prop("checked");
            e.stopPropagation();
            if (t.fireClickMessage) {
                t.notify(t.clickMessage, t)
            }
        };
        return t
    }(O.Element);
    O.InputFieldWithMax = function (i) {
        utils.__extends(t, i);

        function t(a, i) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("max", 0);
            this.addOption("maxButtonClickMessage", null);
            this.addOption("inputChangeMessage", null);
            this.addOption("maxButtonClass", e);
            this.addOption("textOption", "");
            this.addOption("storageId", "");
            this.addOption("showPlaceholder", true);
            this.setOptions(i);
            this.draw();
            if (!this.data) {
                this.data = 0
            } else {
                this.data = parseInt(this.data, 10);
                if (this.data > this.max) this.data = this.max
            }
            this.create()
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            var i = this._getHoverText();
            var a = this.createSubview(this, {
                styles: "smalltextbox"
            });
            var e = {
                type: "text"
            };
            if (this.storageId !== "") {
                this.data = this.readValue();
                if (this.data > this.max) this.data = this.max
            }
            var s = !this.data ? "" : this.data;
            e.value = s;
            if (!isNaN(this.max) && this.showPlaceholder) {
                e.placeholder = this.max
            }
            this.inputField = this.createSubview(a, {
                element: "input",
                attributes: e
            });
            this.maxButton = this.createSubview(this, {
                styles: "button",
                content: this.notify("rvHW39mY", this, {
                    imageName: "maximum",
                    imageCategory: "icons"
                }),
                hover: i,
                clickMessage: null,
                hoverDelay: 0
            }, this.maxButtonClass)
        };
        t.prototype.draw = function () {
            t.__super__.draw.apply(this, arguments);
            var e = !this.data ? "" : this.data;
            $("#" + this.id + " input").val(e)
        };
        t.prototype.fieldChangeEventHandler = function (e) {
            var i = parseInt($(e.target).val(), 10) || 0;
            var t = e.data || this;
            if (i > t.max) {
                i = t.max;
                $(e.target).val(t.max)
            }
            t.data = i;
            if (t.inputChangeMessage !== null) {
                t.notify.call(t, t.inputChangeMessage, t, i)
            }
            t.storeValue.call(t);
            e.stopPropagation()
        };
        t.prototype.maxButtonClickHandler = function (e) {
            var t = e.data || this;
            $("#" + t.id + " input").val(t.max);
            t.data = t.max;
            if (t.parent.maxButtonClickMessage !== null) {
                t.notify.call(t, t.maxButtonClickMessage, t)
            }
            t.storeValue.call(t);
            e.stopPropagation()
        };
        t.prototype.jQueryEvents = function () {
            $("#" + this.id + " input").on("change blur", this, this.fieldChangeEventHandler);
            $("#" + this.id + " div.button").on("click", this, this.maxButtonClickHandler)
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                selector: "#" + this.inputField.id,
                event: "change",
                callback: this.fieldChangeEventHandler,
                target: this
            });
            e.push({
                selector: "#" + this.inputField.id,
                event: "blur",
                callback: this.fieldChangeEventHandler,
                target: this
            });
            e.push({
                selector: "#" + this.maxButton.id,
                event: "click",
                callback: this.maxButtonClickHandler,
                target: this
            });
            return e
        };
        t.prototype.dataUpdate = function (e, t) {
            this.max = t;
            this.updateLabel()
        };
        t.prototype.updateLabel = function () {
            this.deleteSubviewChain(this.maxButton);
            this.maxButton = undefined;
            this.maxButton.hover = this._getHoverText();
            this.maxButton.create();
            this.maxButton.draw()
        };
        t.prototype._getHoverText = function () {
            if (this.textOption === "recruit") {
                return translate("%d affordable", this.max)
            } else {
                return translate("maximum") + " " + this.max
            }
        };
        t.prototype.overrideInputValue = function (t) {
            $("#" + this.id + " input").val(t);
            this.data = t;
            this.storeValue()
        };
        t.prototype.storeValue = function () {
            if (this.storageId === "") {
                return
            }
            _.storeSession.setItem(this.storageId, this.data);
            this.notify("naNYg0H)", this, this.storageId)
        };
        t.prototype.readValue = function () {
            if (this.storageId === "") {
                return 0
            }
            var t = _.storeSession.getItem(this.storageId);
            return parseInt(t, 10) || 0
        };
        t.prototype.cleanUp = function () {
            $("#" + this.id + " input").off("change");
            $("#" + this.id + " input").off("blur");
            $("#" + this.id + " div.button").off("click");
            t.__super__.cleanUp.apply(this, arguments)
        };
        return t
    }(e);
    O.EditFieldForm = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("saveMessage", "");
            this.addOption("cancelMessage", "");
            this.addOption("originalValue", "");
            this.addOption("inputType", "string");
            this.addOption("maxLength", false);
            this.addOption("minLength", false);
            this.addOption("allowBlank", false);
            this.addOption("validationMessages", false);
            this.addOption("saveIcon", "");
            this.addOption("cancelIcon", "");
            this.addOption("caption", "Message");
            this.addOption("useDefaultIcons", false);
            this.addOption("styles", "editFieldForm", true);
            this.addOption("pasteLinkButton", false);
            this.addOption("pasteMessage", "xhjW7E37");
            this.addOption("pasteText", translate("paste_link"));
            this.setOptions(e);
            if (this.useDefaultIcons) {
                this.saveIcon = "permissionTrueColored";
                this.cancelIcon = "permissionFalseColored"
            }
        }
        t.prototype.create = function () {
            var e, t;
            saveDetails = {
                content: o.getValueOf("Save"),
                styles: "save button"
            };
            t = {
                content: o.getValueOf("Cancel"),
                styles: "cancel button"
            };
            if (this.saveIcon) {
                saveDetails = this.iconDetails(saveDetails, this.saveIcon)
            }
            if (this.cancelIcon) {
                t = this.iconDetails(t, this.cancelIcon)
            }
            this.input = new O.Input(this.controller, {
                parent: this,
                maxLength: this.maxLength,
                minLength: this.minLength,
                allowBlank: this.allowBlank,
                inputType: this.inputType,
                inputLength: this.inputLength,
                currentValue: this.originalValue,
                validationMessages: this.validationMessages,
                caption: this.caption
            });
            this.addSubview(this.input);
            this.saveButton = this.createSubview(this, {
                content: saveDetails.content,
                clickCallback: utils.bind(this.save, this),
                styles: saveDetails.styles
            });
            if (this.cancelMessage) {
                this.cancelButton = this.createSubview(this, {
                    content: t.content,
                    clickCallback: utils.bind(this.cancel, this),
                    styles: t.styles
                })
            }
            if (this.pasteLinkButton) {
                this.pasteButton = this.createSubview(this, {
                    content: this.pasteText,
                    clickMessage: this.pasteMessage,
                    styles: "paste"
                }, l)
            }
            this.validationMessageContainer = this.createSubview(this, {
                name: "validationMessageContainer",
                styles: "validations"
            })
        };
        t.prototype.save = function () {
            if (this.input.validate()) {
                this.notify(this.saveMessage, this);
                this.hideErrors();
                return true
            } else {
                this.presentErrors();
                return false
            }
        };
        t.prototype.cancel = function () {
            this.input.retainValue();
            this.notify(this.cancelMessage, this)
        };
        t.prototype.hideErrors = function () {
            this.validationMessageContainer.setContent("");
            this.input.retainValue();
            this.draw()
        };
        t.prototype.presentErrors = function () {
            var t = "<ul>";
            for (var e in this.input.validationOutput) {
                var i = this.input.validationOutput[e];
                t += "<li>" + i + "</li>"
            }
            t += "</ul>";
            this.validationMessageContainer.setContent(t);
            this.input.retainValue();
            this.draw();
            this.input.$el().trigger("keyup")
        };
        t.prototype.iconDetails = function (t, e, i) {
            t.content = this.notify("rvHW39mY", this, {
                imageName: e,
                imageCategory: i || "browserIcons"
            });
            t.styles += " icon";
            return t
        };
        return t
    }(e);
    (function (l) {
        function e() {
            var e = t.id;
            var i = ze;
            var a = "9FF";
            var s = a + "" + e + "" + i;
            return $.sha1(s)
        }

        function a(e) {
            var t = "";
            $.each(e, function (a, e) {
                if (!e || e.length === 0) {
                    return
                }
                t += a + "=(";
                if (typeof e === "object" && e.length) {
                    for (var i = 0; i < e.length; i++) {
                        t += e[i] + ","
                    }
                } else {
                    t += e
                }
                t += ");"
            });
            return "{" + t + "}"
        }

        function s(t) {
            i.manager = t
        }

        function n(e, r, a, s, n, t) {
            (function o() {
                var l = a.shift(),
                    u = o,
                    o = {};
                if (!l) {
                    if (t) {
                        $.extend(o, t);
                        i.request(e, o, s, n)
                    }
                    return
                }
                if (!a.length) {
                    u = s;
                    if (t) {
                        $.extend(o, t)
                    }
                }
                o[r] = "(" + l + ")";
                i.request(e, o, u, n)
            })()
        }

        function r(r, s, o, e, n, a) {
            a = a || null;
            n = 62e3;
            if (i.manager) {
                s = i.manager.modifyRequest(e, s)
            }
            if (typeof WinJS !== "undefined" && de !== "json") {
                de = "json"
            }
            var l = function (t, s, n) {
                if (s === "parsererror" && t.readyState === 4 && t.status === 200) {
                    return
                }
                if (i.manager) {
                    i.manager.hardError(e, n, a)
                } else {}
            };
            var u = function (t) {
                if (i.manager) {
                    if (typeof t.error !== "undefined" || typeof t.clientCommand !== "undefined") {
                        i.manager.softError(e, t, a)
                    } else {
                        i.manager.success(e, t, o)
                    }
                } else {}
            };
            var t = {
                type: "GET",
                url: we + "" + r,
                data: s
            };
            if (typeof WinJS !== "undefined") {
                t.responseType = de;
                WinJS.Promise.timeout(n, WinJS.xhr(t).then(_successHandlerWinJS, _errorHandlerWinJS));
                return
            }
            t.dataType = de;
            t.timeout = n;
            t.success = u;
            t.error = l;
            if (de === "json") {
                t.xhrFields = {
                    withCredentials: true
                }
            }
            $.ajax(t)
        }

        function o(e) {
            var t = document.createElement("DIV");
            t.innerHTML = e;
            return t.textContent || t.innerText || ""
        }
        i.getHash = e;
        i.request = r;
        i.prepareDict = a;
        i.registerManager = s;
        i.manager = null;
        i.chainActionFromArray = n;
        i.stripHTML = o
    })(this);
    Je = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("interval", 1e3);
            this.addOption("useDOM", true);
            this.setOptions(e);
            this.timerID = null;
            this.timers = [];
            this.start()
        }
        t.prototype.add = function (e) {
            for (var t = 0, a = this.timers.length; t < a; t++) {
                var i = this.timers[t];
                if (typeof i !== "undefined" && i.id === e.id) {
                    return false
                }
            }
            this.timers.push(e)
        };
        t.prototype.remove = function (t) {
            if (typeof t === "undefined" || !t || !t.id) {
                return false
            }
            for (var e = 0, a = this.timers.length; e < a; e++) {
                var i = this.timers[e];
                if (typeof i === "undefined") {
                    continue
                }
                if (i.id === t.id) {
                    this.timers.splice(e, 1)
                }
            }
        };
        t.prototype.start = function () {
            this.timerID = window.setTimeout(this._callback.bind(this), this.interval)
        };
        t.prototype.stop = function () {
            window.clearTimeout(this.timerID)
        };
        t.prototype._callback = function () {
            this.stop();
            for (var i = 0, s = this.timers.length; i < s; i++) {
                var e = true,
                    t = this.timers[i],
                    a;
                if (typeof t === "undefined" || t === null) {
                    this.timers.splice(i, 1);
                    continue
                }
                a = t.node && t.node();
                if (this.useDOM && a && t.name !== "GameController" && !a.length) {
                    e = false
                }
                if (typeof t.timeEvent !== "undefined") {
                    if (e !== false) {
                        e = t.timeEvent.call(t, this)
                    }
                    if (typeof e === "undefined" || e === null) {
                        e = true
                    }
                    if (e === false) {
                        this.timers[i] = undefined;
                        continue
                    }
                }
            }
            this.start()
        };
        return t
    }(V);
    Ge = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("text", null);
            this.addOption("name", "toolbar", true);
            this.addOption("styles", "toolbar", true)
        }
        return t
    }(e);
    R = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.styleArray.push("hover-element");
            this.buildFrame()
        }
        t.prototype.buildFrame = function () {
            this.createSubview(this, {
                styles: "header"
            });
            this.wrapper = this.createSubview(this, {
                styles: "hover-body"
            });
            if (this.content) {
                this.createSubview(this.wrapper, {
                    content: this.content
                });
                this.content = null
            }
            this.createSubview(this, {
                parent: this,
                styles: "footer"
            })
        };
        t.prototype.attachToDOM = function (t) {
            var e = $("#" + this.id);
            if (e.length) {
                e.replaceWith(t);
                return
            }
            if (this.parentID === null) {
                $(".hover")[this.attachMethod](t)
            } else {
                $("#" + this.parentID)[this.attachMethod](t)
            }
        };
        return t
    }(e);
    l = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("hover", null);
            this.addOption("hoverView", null);
            this.addOption("addButtonClass", true);
            this.setOptions(e);
            if (this.addButtonClass) {
                this.styleArray.push("button")
            }
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            if (this.hover === null) {
                return
            }
            this.hoverView = new R(this.controller, {
                styles: "buildingHover"
            });
            this.hoverView.createSubview(this.hoverView, {
                content: this.hover,
                styles: "nameHover clean"
            })
        };
        return t
    }(N);
    Z = function (e) {
        utils.__extends(t, e);
        var i, a;

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("graphic");
            this.addOption("hover", null);
            this.addOption("hoverView", null);
            this.addOption("showOnBackButton", false);
            this.setOptions(e);
            this.over = false;
            this.styleArray.push("gfxButton")
        }
        t.prototype.attachToDOM = function (i) {
            t.__super__.attachToDOM.apply(this, arguments);
            var e = $("#" + this.id).find("img");
            e.on({
                mouseover: this.showActive.bind(this),
                mouseout: this.hideActive.bind(this)
            })
        };
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            if (!this.graphic) {
                return
            }
            if (this.hover) {
                this._createHover()
            }
            this._performCreation()
        };
        t.prototype.showActive = function () {
            if (this.over === true) {
                return
            }
            this.over = true;
            this.setImage(this.hover)
        };
        t.prototype.hideActive = function () {
            if (this.over === false) {
                return
            }
            this.over = false;
            this.setImage(this.orig)
        };
        t.prototype.setImage = function (t) {
            var e = $(t).attr("src");
            this.node().find("img").attr("src", e)
        };
        t.prototype.changeImage = function (t) {
            this.graphic = t;
            this._performCreation();
            this.draw()
        };
        t.prototype._performCreation = function () {
            this.orig = this.notify("rvHW39mY", this, {
                imageName: this.graphic,
                imageCategory: "icons"
            });
            this.hover = this.notify("rvHW39mY", this, {
                imageName: this.graphic + "_hover",
                imageCategory: "icons"
            });
            this.content = this.orig
        };
        t.prototype._createHover = function () {
            this.hoverView = new R(this.controller, {
                styles: "buildingHover"
            });
            this.hoverView.createSubview(this.hoverView, {
                content: this.hover,
                styles: "nameHover clean"
            })
        };
        return t
    }(N);
    li = function (e) {
        utils.__extends(t, e);

        function t(i, a) {
            t.__super__.constructor.apply(this, arguments);
            var e = {};
            e.content = "<--";
            e.styles = "backbutton button";
            this.addOption("icon", null);
            this.addOption("text", null);
            this.addOption("name", "HeadlineButtons", true);
            this.addOption("styles", "buttons", true);
            this.backButton = this.createSubview(this, {
                hidden: true,
                name: "back",
                graphic: "headlineButton_Back",
                clickMessage: "0scd3paU"
            }, Z)
        }
        t.prototype.hideAllButtons = function () {
            for (var t = 0; t < this.subviews.length; t++) {
                var e = this.subviews[t];
                e.hide()
            }
        };
        t.prototype.showAllButtons = function () {
            for (var t = 0; t < this.subviews.length; t++) {
                var e = this.subviews[t];
                if (!e.hideLock) {
                    e.show()
                }
            }
        };
        return t
    }(e);
    fi = function (e) {
        var i = {
            start: ["touchstart", "mousedown"],
            move: ["touchmove", "mousemove"],
            end: ["touchend", "touchcancel", "mouseup"]
        };

        function t(a, i) {
            this.element = a;
            this.options = {};
            i = i || {};
            var t;
            for (t in this.defaultOptions) {
                if (i[t] !== e) {
                    this.options[t] = i[t]
                } else {
                    this.options[t] = this.defaultOptions[t]
                }
            }
            this.supportsWebkit3dTransform = "WebKitCSSMatrix" in window && "m11" in new WebKitCSSMatrix;
            if (typeof a === "string") {
                this.element = document.getElementById(a)
            }
            this.knob = this.element.getElementsByClassName("knob")[0];
            this.track = this.element.getElementsByClassName("track")[0];
            this.start = this.start.bind(this);
            this.move = this.move.bind(this);
            this.end = this.end.bind(this);
            this.addEvents("start");
            this.setValue(this.options.value)
        }
        t.prototype.defaultOptions = {
            value: 0,
            min: 0,
            max: 100,
            change: null
        };
        t.prototype.addEvents = function (t) {
            var e = i[t],
                s = this[t],
                a;
            for (a in e) {
                this.element.addEventListener(e[a], s, false)
            }
        };
        t.prototype.removeEvents = function (t) {
            var e = i[t],
                s = this[t],
                a;
            for (a in e) {
                this.element.removeEventListener(e[a], s, false)
            }
        };
        t.prototype.start = function (t) {
            this.addEvents("move");
            this.addEvents("end");
            this.handle(t)
        };
        t.prototype.move = function (t) {
            this.handle(t)
        };
        t.prototype.end = function () {
            this.removeEvents("move");
            this.removeEvents("end")
        };
        t.prototype.update = function () {
            this.setValue(this.value)
        };
        t.prototype.setValue = function (t) {
            if (t === e) {
                t = this.options.min
            }
            t = Math.min(t, this.options.max);
            t = Math.max(t, this.options.min);
            var i = this.knob.offsetWidth,
                a = this.track.offsetWidth,
                s = this.options.max - this.options.min,
                n = a - i,
                r = Math.round((t - this.options.min) * n / s);
            this.setKnobPosition(r);
            this.value = t;
            this.callback(t)
        };
        t.prototype.setKnobPosition = function (t) {
            if (this.supportsWebkit3dTransform) {
                this.knob.style.webkitTransform = "translate3d(" + t + "px, 0, 0)"
            } else {
                this.knob.style.webkitTransform = this.knob.style.MozTransform = this.knob.style.msTransform = this.knob.style.OTransform = this.knob.style.transform = "translateX(" + t + "px)"
            }
        };
        t.prototype.handle = function (e) {
            e.preventDefault();
            if (e.targetTouches) {
                e = e.targetTouches[0]
            }
            var t = e.pageX,
                i, a = this.knob.offsetWidth,
                s = this.track.offsetWidth,
                r = s - a,
                o = this.options.max - this.options.min,
                n;
            for (i = this.element; i; i = i.offsetParent) {
                t -= i.offsetLeft
            }
            t += a / 2;
            t = Math.min(t, s);
            t = Math.max(t - a, 0);
            this.setKnobPosition(t);
            n = this.options.min + Math.round(t * o / r);
            this.setValue(n)
        };
        t.prototype.callback = function (t) {
            if (this.options.change) {
                this.options.change(t)
            }
        };
        return t
    }();
    $.fn.linkify = function (t, e) {
        return this.each(function () {
            $(this).html(function (s, i) {
                var a;
                i = i.replace(t, function (t) {
                    var i = "onclick=";
                    i = i.concat('"', e, "('", t, "')", '"');
                    return "<a href='#" + t + "' " + i + ">" + t + "</a>"
                });
                a = i;
                return a
            })
        })
    };
    xi = function (a) {
        function t(s) {
            for (var e in i) {
                var a = i[e];
                t.prototype[e] = this[a]
            }
        }
        var s = typeof console !== "undefined",
            i = {
                l: "log",
                w: "warn",
                e: "error"
            };

        function e(t, e) {
            if (!s) {
                return
            }
            try {
                console[t].apply(console, e)
            } catch (i) {}
        }
        t.prototype.log = function () {
            e("log", arguments)
        };
        t.prototype.warn = function () {
            e("warn", arguments)
        };
        t.prototype.error = function () {
            e("error", arguments)
        };
        t.prototype.expose = function (t, e) {
            a[t] = e
        };
        return t
    }(this);
    if (!window.dbg) {}
    Ze = function (a) {
        utils.__extends(e, m);

        function e(t, i) {
            e.__super__.constructor.apply(this, arguments);
            this.__data = this.emptyDataSet();
            this.clearCache();
            this.updateCache();
            this.cacheSize = 0;
            this.pendingRequests = [];
            this.initialNotificationSend = false
        }
        e.prototype.emptyDataSet = function () {
            return {
                habitatDictionary: {},
                playerDictionary: {},
                allianceDictionary: {},
                map: {},
                frames: []
            }
        };
        e.prototype.requestSector = function (e) {
            if (typeof t === "undefined") {
                return
            }
            var a = {
                mapX: e.origin.x,
                mapY: e.origin.y,
                mapWidth: e.size.width,
                mapHeight: e.size.height
            };
            e.id = utils.uniqueID();
            this.pendingRequests.push(e);
            i.request("MapAction/map", a, function (i) {
                var a = -1;
                for (var t = 0; t < this.pendingRequests.length; t++) {
                    if (this.pendingRequests[t].id === e.id) {
                        a = t
                    }
                }
                this.pendingRequests.splice(a, 1);
                i.request = e;
                i = this.precalculateMapData(i);
                if (!this.initialNotificationSend) {
                    this.notify("WpnuBBWG", this, null)
                }
            }.bind(this), this);
            return true
        };
        e.prototype._extractHabitatData = function (t) {
            var e = {
                habitat: {},
                player: {},
                alliance: {}
            };
            if (t.player && t.player.alliance && t.player.alliance.id) {
                $.extend(e.alliance, t.player.alliance);
                t.player.alliance = e.alliance.id
            }
            if (t.player && t.player.id) {
                $.extend(e.player, t.player);
                t.player = e.player.id
            }
            $.extend(e.habitat, t);
            return e
        };
        e.prototype._reconstructMixedObject = function (a) {
            var t = $.extend({}, this.__data.habitatDictionary[a]);
            var e = $.extend({}, this.__data.playerDictionary[t.player]);
            var i = $.extend({}, this.__data.allianceDictionary[e.alliance]);
            if (e.id) t.player = e;
            if (e.id && i.id) t.player.alliance = i;
            return t
        };
        e.prototype.precalculateMapData = function (i) {
            var r = 0,
                o = 0;
            this.readCache();
            var e = {
                origin: {
                    x: Number.POSITIVE_INFINITY,
                    y: Number.POSITIVE_INFINITY
                },
                size: {
                    width: 0,
                    height: 0
                }
            };
            for (var a = 0; a < i.map.tileArray.length; a++) {
                var l = i.map.tileArray[a].habitatDictionary;
                var s = i.map.tileArray[a].frame.origin;
                for (var u in l) {
                    var n = l[u];
                    var t = this._extractHabitatData(n);
                    if (t.habitat) this.__data.habitatDictionary[t.habitat.id] = t.habitat;
                    if (t.player.id && !this.__data.playerDictionary[t.player.id]) this.__data.playerDictionary[t.player.id] = t.player;
                    if (t.alliance.id && !this.__data.allianceDictionary[t.alliance.id]) this.__data.allianceDictionary[t.alliance.id] = t.alliance;
                    if (typeof this.__data.map[n.mapY] === "undefined") this.__data.map[n.mapY] = {};
                    this.__data.map[n.mapY][n.mapX] = n.id
                }
                if (+s.x < e.origin.x || +s.y < e.origin.y) {
                    e.origin.x = +i.map.tileArray[a].frame.origin.x;
                    e.origin.y = +i.map.tileArray[a].frame.origin.y
                }
                if (+s.x > r || +s.y > o) {
                    r = +s.x;
                    o = +s.y
                }
            }
            e.size.width = r + 8 - e.origin.x;
            e.size.height = o + 8 - e.origin.y;
            this.__data.frames.push(e);
            this.updateCache();
            this.__data.request = {};
            $.extend(this.__data.request, i.request);
            i = undefined;
            this.informControllerUnblock();
            this.publishUpdate()
        };
        e.prototype.getHabitatInfo = function (t) {
            if (!this.__data || !this.__data.map[t.y]) return null;
            var e = this.__data.map[t.y][t.x];
            if (!e) return null;
            return this._reconstructMixedObject(e)
        };
        e.prototype.getHabitatInfoForID = function (t) {
            if (!this.__data) {
                return null
            }
            if (this.__data.habitatDictionary[t]) {
                return this._reconstructMixedObject(t)
            }
            return null
        };
        e.prototype.getFreeCastles = function () {
            if (!this.__data) {
                return null
            }
            var e, i = [],
                t;
            for (e in this.__data.habitatDictionary) {
                t = this.__data.habitatDictionary[e];
                if (!t.player) {
                    i.push(t)
                }
            }
            return i
        };
        e.prototype.getClosestCastle = function (e, t) {
            if (!e || !t) {
                return
            }
            for (var i = 0; i < t.length; i++) {
                var a = t[i];
                a.distanceToSource = utils.Map.distanceToHabitat(e.mapX, e.mapY, a.mapX, a.mapY)
            }
            t.sort(function (t, e) {
                return t.distanceToSource - e.distanceToSource
            });
            return t.length ? t[0] : null
        };
        e.prototype.updateHabitatInfo = function (t, e) {
            if (this.pendingRequests.length === 0) {
                this.requestSector(this.__data.request)
            }
        };
        e.prototype.frameContainsFrame = function (t, e) {
            return e.origin.x >= t.origin.x && e.origin.y >= t.origin.y && e.origin.x + e.size.width <= t.origin.x + t.size.height && e.origin.y + e.size.height <= t.origin.y + t.size.height
        };
        e.prototype.getMap = function (t) {
            if (!this.__data) return this.emptyDataSet();
            if (t.size.width > 64) {
                t.size.width = 64
            }
            if (t.size.height > 64) {
                t.size.height = 64
            }
            var a = false;
            for (var e = 0; e < this.__data.frames.length; e++) {
                var s = this.__data.frames[e];
                if (this.frameContainsFrame(s, t)) {
                    a = true
                }
            }
            var i = false;
            for (e = 0; e < this.pendingRequests.length; e++) {
                var n = this.pendingRequests[e];
                if (this.frameContainsFrame(n, t)) {
                    i = true
                }
            }
            if (!a && !i) {
                this.requestSector(t)
            }
            if (i) {}
            this.__data.frame = t;
            return this.__data
        };
        e.prototype._getKey = function () {
            return _.storeSession.createKey("map")
        };
        e.prototype.clearCache = function () {
            _.storeSession.removeItem(this._getKey())
        };
        e.prototype.updateCache = function () {
            _.storeSession.setJSON(this._getKey(), this.__data)
        };
        e.prototype.readCache = function () {
            var t = _.storeSession.getItem(this._getKey());
            this.cacheSize = t.length / 1024;
            this.__data = JSON.parse(t)
        };
        return e
    }(m);
    Oe = function (i) {
        utils.__extends(t, i);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("arrowMap", null);
            this.setOptions(e);
            this.ignoreNextClickEvent = false;
            this.mouse = {
                x: 0,
                y: 0
            };
            this.lastMouseEvent = null;
            this._cache = {
                tile: null,
                habitat: null
            }
        }
        var e = false;
        t.prototype.dataUpdate = function (a, t) {
            if (!t) {
                return
            }
            this.notify("fpfOWXdS", this);
            this.view.mapDataRequestPending = false;
            this.view.updateMapData(t);
            if (!this.view.fastMap) {
                var i = this.view.getTileForCoords($(this.view.canvas).width() / 2, $(this.view.canvas).height() / 2);
                if (t.request.centerToTarget === true) {
                    i = {
                        x: t.request.centerTarget.x,
                        y: t.request.centerTarget.y
                    }
                }
                this.view.center(i)
            }
            this.view.draw();
            if (t && t.map && t.map.tileArray && t.map.tileArray.length && !e) {
                e = true
            }
        };
        t.prototype["F1bw-dct"] = function (e, t) {
            if (this.view.type == "normal") {
                return this.datasource.requestSector(t)
            } else {
                return this.datasource.requestSectorPol(t)
            }
        };
        t.prototype._checkGlobalEventsTarget = function (e, t) {
            this.lastMouseEvent = t;
            if (this.view.drag.down === true) {
                return true
            }
            if (this.view.eventTarget !== "" && t.target.id != this.view.eventTarget) {
                return false
            }
            if (this.view.eventTarget === "" && t.target.id !== "") {
                return false
            }
            return true
        };
        t.prototype["gloYlKk6"] = function (e, i) {
            if (this.ignoreNextClickEvent === true) {
                this.ignoreNextClickEvent = false;
                return null
            }
            if (!this._checkGlobalEventsTarget(e, i)) {
                return null
            }
            var t = this.view.getTileForCoords(this.mouse.x, this.mouse.y);
            if (t.x !== this._cache.tile.x && t.y !== this._cache.tile.y) {
                this._cache.tile = t;
                this._cache.habitat = this.datasource.getHabitatInfo(t)
            }
            if (this._cache.habitat === null) {
                return {
                    mapX: t.x,
                    mapY: t.y
                }
            } else {
                this.notify("qsh7)BXL", this, this._cache.habitat)
            }
            return this._cache.habitat
        };
        t.prototype["_0r2tiwg"] = function (a, e) {
            if (!this._checkGlobalEventsTarget(a, e)) {
                return null
            }
            this.mouse = utils.mouse.getMouseCoords(e);
            var s = this.notify("rwHfd1jF", this);
            if (s === false) {
                this.view.drag.down = false;
                var i = this.view.getTileForCoords(this.mouse.x, this.mouse.y);
                if (i !== this._cache.tile) {
                    this._cache.tile = i;
                    this._cache.habitat = this.datasource.getHabitatInfo(i);
                    this.notify("2P%KzlEn", this, {
                        habitat: this._cache.habitat,
                        mouse: this.mouse
                    })
                }
                return
            }
            if (this.view.drag.down === true) {
                utils.helpers.clearSelection();
                var t = this._pageXY(e);
                if (this.view.type !== "overview") {
                    this.notify("I-269DWF", this)
                }
                var n = (this.view.drag.start.offsetX - t.x) * 1 / this.view.zoom | 0;
                var r = (this.view.drag.start.offsetY - t.y) * 1 / this.view.zoom | 0;
                this.view.scrollBy(n, r);
                this.view.draw();
                this.view.drag.start = {
                    offsetX: t.x,
                    offsetY: t.y
                };
                this.ignoreNextClickEvent = true
            }
        };
        t.prototype["mm-DpP)j"] = function (t, e) {
            if (this.view.drag.down) {
                this.view.drag.down = false
            }
        };
        t.prototype["VjVgns7Y"] = function (i, t) {
            if (!this._checkGlobalEventsTarget(i, t)) {
                return null
            }
            this.draggingElement = this.view;
            var n = this.view.offset;
            this.view.drag.down = true;
            var e = this._pageXY(t);
            var a = e.x;
            var s = e.y;
            this.view.drag.start = {
                offsetX: a,
                offsetY: s
            }
        };
        t.prototype["PjmTAnYn"] = function (t, e) {
            if (this.view.fastMap) {
                this.view.resize($("#map").width(), $("#map").height());
                this.view.preRender()
            } else {
                this.view.updateCanvasSizeFromElement()
            } if (this.arrowMap) {
                this.arrowMap.resize();
                this.arrowMap.draw()
            }
            this.view.draw()
        };
        t.prototype["4dRl-Is9"] = function (e) {
            var t = this.notify("7v%5T22p", this);
            if (t !== null) {
                return t.getMapTileSet(e.type)
            }
            return null
        };
        t.prototype.getLastMouseEvent = function () {
            return this.lastMouseEvent
        };
        t.prototype["wrl8b7Ym"] = function (e) {
            var t = this.notify("7v%5T22p", this);
            return t.getImage("loaderAnimation", "browserIcons")
        };
        t.prototype["UMQBR5lr"] = function (a, t) {
            var e = t.x,
                i = t.y;
            return this.datasource.nextGround(e * i)
        };
        t.prototype._pageXY = function (t) {
            var i = null,
                a = null,
                e = t.originalEvent;
            if (typeof t.pageX !== "undefined" && typeof t.pageY !== "undefined") {
                i = t.pageX;
                a = t.pageY
            } else if (typeof e !== "undefined" && e.targetTouches !== "undefined" && e.targetTouches.length) {
                i = e.targetTouches[0].pageX;
                a = e.targetTouches[0].pageY
            }
            return {
                x: i,
                y: a
            }
        };
        return t
    }(Ce);
    ri = function (a) {
        utils.__extends(e, m);

        function e(t, i) {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.requestSector = function (e) {
            var s = {
                mapX: e.x,
                mapY: e.y,
                mapWidth: e.width,
                mapHeight: e.height
            };
            if (typeof t != "undefined") {
                s[t.id] = i.getHash();
                s.PropertyListVersion = "3"
            } else {
                return
            }
            var a = this;
            i.request("MapAction/map", s, function (t) {
                a.data = undefined;
                t.request = e;
                t = a.precalculateMapData.call(a, t);
                a.setData.call(a, t)
            }, this);
            return true
        };
        e.prototype.nextGround = function (t) {
            t = t + 2127912214 + (t << 12) & 4294967295;
            t = (t ^ 3345072700 ^ t >> 19) & 4294967295;
            t = t + 374761393 + (t << 5) & 4294967295;
            t = (t + 3550635116 ^ t << 9) & 4294967295;
            t = t + 4251993797 + (t << 3) & 4294967295;
            t = (t ^ 3042594569 ^ t >> 16) & 4294967295;
            return ((t & 2147483647) >> 0) % 11
        };
        e.prototype.precalculateMapData = function (a) {
            var s = a.map.tileArray;
            var l, n, e, t, r, o;
            var i = {};
            s.forEach(function (a, s) {
                r = a.map.split(/\n/);
                a.mapArray = [];
                i.x = parseInt(a.frame.origin.x, 10);
                i.y = parseInt(a.frame.origin.y, 10);
                a.frame.origin.x = parseInt(a.frame.origin.x, 10);
                a.frame.origin.y = parseInt(a.frame.origin.y, 10);
                for (t = 0; t < 8; t++) {
                    a.mapArray.push([]);
                    for (e = 0; e < 8; e++) {
                        n = parseInt(r[t].split(",")[e], 10);
                        o = this.nextGround((i.x + e) * (i.y + t));
                        a.mapArray[t].push({
                            bgTileTyp: o,
                            habitat: n
                        })
                    }
                }
                a.map = undefined
            }, this);
            s.sort(function (t, e) {
                return e.frame.origin.y - t.frame.origin.y
            });
            return a
        };
        e.prototype.getHabitatInfo = function (i) {
            if (this.getData() === null) {
                return
            }
            var t, s, a = this.getData().map.tileArray,
                e;
            for (t = 0; t < a.length; t++) {
                e = a[t].frame;
                if (i.x >= parseInt(e.origin.x, 10) && i.x <= parseInt(e.origin.x, 10) + parseInt(e.size.width, 10) && i.y >= parseInt(e.origin.y, 10) && i.y <= parseInt(e.origin.y, 10) + parseInt(e.size.height, 10)) {
                    s = {};
                    for (s in a[t].habitatDictionary) {
                        if (i.x == parseInt(a[t].habitatDictionary[s].mapX, 10) && i.y == parseInt(a[t].habitatDictionary[s].mapY, 10)) {
                            return a[t].habitatDictionary[s]
                        }
                    }
                }
            }
            return null
        };
        e.prototype.getHabitatInfoForID = function (i) {
            var t, e = this.getData().map.tileArray;
            for (t = 0; t < e.length; t++) {
                if (e[t].habitatDictionary.hasOwnProperty(i)) {
                    return e[t].habitatDictionary[i]
                }
            }
            return null
        };
        e.prototype.getFreeCastles = function () {
            if (this.getData() === null) {
                return
            }
            var t, e = this.getData().map.tileArray,
                a = [];
            for (t = 0; t < e.length; t++) {
                for (var s in e[t].habitatDictionary) {
                    var i = e[t].habitatDictionary[s];
                    if (typeof i.player === "undefined" || i.player === null) {
                        a.push(i)
                    }
                }
            }
            return a
        };
        e.prototype.getClosestCastle = function (e, t) {
            if (!e || !t) {
                return
            }
            for (var i = 0; i < t.length; i++) {
                var a = t[i];
                a.distanceToSource = utils.Map.distanceToHabitat(e.mapX, e.mapY, a.mapX, a.mapY)
            }
            t.sort(function (t, e) {
                return t.distanceToSource - e.distanceToSource
            });
            return t.length ? t[0] : null
        };
        e.prototype.updateHabitatInfo = function (e, t) {
            var i, s = this.getData().map.tileArray,
                r;
            for (i = 0, j = s.length; i < j; i++) {
                var a = s[i],
                    n = a.habitatDictionary[e.id],
                    t;
                r = a.frame;
                if (a.habitatDictionary.hasOwnProperty(e.id)) {
                    t = e.player;
                    n.name = e.name;
                    n.points = e.points;
                    if (t) {
                        if (typeof t == "undefined" || t === null) {
                            t = {}
                        }
                        t.points = t.points;
                        t.rank = t.rank;
                        t.alliancePermission = t.alliancePermission;
                        t.id = +t.id;
                        t.isOnVacation = t.isOnVacation
                    }
                }
            }
        };
        e.prototype.setData = function (t) {
            e.__super__.setData.apply(this, arguments);
            this.notify("WpnuBBWG", this, null)
        };
        return e
    }(m);
    si = function (e) {
        utils.__extends(t, m);

        function t(e) {
            t.__super__.constructor.apply(this, arguments);
            this.mapDict = {};
            this.mapDict.loaded = false;
            this.getMapMasterFile()
        }
        t.prototype.getMapMasterFile = function () {
            $.ajax({
                type: "GET",
                url: this.notify("V)_)fU0F", this) + "/tiles.jsonp",
                dataType: "jsonp",
                timeout: 62e3
            });
            window.callback_politicaltiles = function (t) {
                this.buildTileDictionary();
                delete window.callback_politicaltiles
            }.bind(this)
        };
        t.prototype.buildTileDictionary = function () {
            this.mapDict = {};
            this.mapDict.loaded = true;
            this.notify("VY71NNds", this.subscribers[0].view);
            this.publishUpdate()
        };
        t.prototype.calculateSectorsToLoad = function (e) {
            var i = [];
            var t = {
                x: e.x - 3,
                y: e.y - 3
            };
            for (var a = 0; a < 7; a++) {
                t.x = e.x - 3;
                for (var s = 0; s < 7; s++) {
                    i.push(t.x.toString() + "_" + t.y.toString());
                    t.x += 1
                }
                t.y += 1
            }
            return i
        };
        t.prototype.calculateOrigin = function (t) {
            return {
                x: (t.x - 2) * 32,
                y: (t.y - 2) * 32
            }
        };
        t.prototype.requestSectorPol = function (t) {
            var e;
            if (this.__data === null) {
                this.prepareDataStructure({
                    habitatArray: []
                });
                this.__data.request = t
            }
            if (this.mapDict.loaded === false) {
                return false
            }
            var s = {
                x: Math.floor(t.centerTarget.x / 32),
                y: Math.floor(t.centerTarget.y / 32)
            };
            var a = this.calculateSectorsToLoad(s);
            var n = this.calculateOrigin(s);
            var i = [];
            if (this.__data !== null && typeof this.__data.sectorsLoaded !== "undefined") {
                for (e = 0; e < a.length; e++) {
                    if (this.__data.sectorsLoaded.indexOf(a[e]) === -1) {
                        i.push(a[e])
                    }
                }
            } else {
                i = a
            }
            t.sectorsToLoad = i;
            t.origin = n;
            this.request = t;
            if (i.length === 0) {
                this.__data.request.centerTarget = t.centerTarget;
                this.__data.request.centerToTarget = t.centerToTarget;
                this.__data.useFrameOrigin = true;
                this.__data.map.frame = {
                    origin: t.origin
                };
                this.notify("VY71NNds", this.subscribers[0].view);
                this.publishUpdate();
                return false
            }
            this.sectorsHandeled = 0;
            this.totalSectors = i.length;
            window.callback_politicalmap = function (t) {
                t.request = this.request;
                this.precalculateFromOverviewData(t);
                this.sectorsHandeled += 1
            }.bind(this);
            this.__data.habitatDict = {};
            this.__data.map.tileArray = [];
            for (e = 0; e < this.totalSectors; e++) {
                $.ajax({
                    type: "GET",
                    url: this.notify("V)_)fU0F", this) + "/" + i[e] + ".jtile",
                    dataType: "jsonp",
                    timeout: 62e3
                });
                this.notify("_f3L_ht_", this.subscribers[0].view)
            }
            window.setTimeout(function () {
                this.notify("VY71NNds", this.subscribers[0].view);
                this.publishUpdate()
            }.bind(this), 1e3);
            return true
        };
        t.prototype.prepareDataStructure = function (e) {
            var t;
            if (this.__data === null) {
                this.__data = e;
                this.__data.habitatDict = {}
            }
            for (var i = 0, a = e.habitatArray.length; i < a; i++) {
                t = e.habitatArray[i];
                if (typeof this.__data.habitatDict[t.mapy] === "undefined") {
                    this.__data.habitatDict[t.mapy] = {}
                }
                this.__data.habitatDict[t.mapy][t.mapx] = t
            }
            delete this.__data.habitatArray;
            if (typeof this.__data.map === "undefined") {
                this.__data.map = {
                    tileArray: []
                }
            }
            if (typeof this.__data.sectorsLoaded === "undefined") {
                this.__data.sectorsLoaded = []
            }
        };
        t.prototype.parseOriginFromRectString = function (e) {
            var t = e.replace(/\{/g, "").replace(/\}/g, "").split(",");
            var i = {
                sector: {
                    x: Math.floor(parseInt(t[0], 10) / 32),
                    y: Math.floor(parseInt(t[1], 10) / 32)
                },
                origin: {
                    x: parseInt(t[0], 10),
                    y: parseInt(t[1], 10)
                },
                size: {
                    w: parseInt(t[2], 10),
                    h: parseInt(t[3], 10)
                }
            };
            return i
        };
        t.prototype.lookupHabitatInDict = function (t, e) {
            if (typeof e[t.y] === "undefined" || typeof e[t.y][t.x] === "undefined") {
                return null
            }
            return e[t.y][t.x]
        };
        t.prototype.fillMapArrayForSector = function (a, n) {
            var t;
            var i = [];
            for (var e = 0; e < 8; e++) {
                i.push([]);
                t = {
                    x: a.x,
                    y: a.y + e
                };
                for (var s = 0; s < 8; s++) {
                    i[e].push({
                        habitat: this.lookupHabitatInDict(t, n),
                        tile: {
                            x: t.x,
                            y: t.y
                        }
                    });
                    t.x += 1
                }
            }
            return i
        };
        t.prototype.precalculateFromOverviewData = function (t) {
            this.prepareDataStructure(t);
            var r = [];
            var e = this.parseOriginFromRectString(t.rect);
            var i;
            var a, s, n;
            for (n = 0; n < 4; n++) {
                for (s = 0; s < 4; s++) {
                    i = {
                        x: e.origin.x + s * 8,
                        y: e.origin.y + n * 8
                    };
                    r.push({
                        frame: {
                            origin: {
                                x: i.x,
                                y: i.y
                            },
                            size: {
                                width: 8,
                                height: 8
                            }
                        },
                        mapArray: this.fillMapArrayForSector(i, this.__data.habitatDict)
                    })
                }
            }
            for (a = 0; a < r.length; a++) {
                this.__data.map.tileArray.push(r[a])
            }
            this.__data.sectorsLoaded.push(e.sector.x + "_" + e.sector.y);
            this.__data.useFrameOrigin = true;
            this.__data.map.frame = {
                origin: t.request.origin
            };
            this.__data.request.centerTarget = t.request.centerTarget;
            this.__data.request.centerToTarget = t.request.centerToTarget;
            this.__data.sectorsLoaded = []
        };
        t.prototype.getHabitatInfo = function (i) {
            if (this.getData() === null) {
                return
            }
            var t, s, n, a = this.getData().map.tileArray,
                e;
            for (t = 0, n = a.length; t < n; t++) {
                e = a[t].frame;
                if (i.x >= parseInt(e.origin.x, 10) && i.x <= parseInt(e.origin.x, 10) + parseInt(e.size.width, 10) && i.y >= parseInt(e.origin.y, 10) && i.y <= parseInt(e.origin.y, 10) + parseInt(e.size.height, 10)) {
                    s = {};
                    for (s in a[t].habitatDictionary) {
                        if (i.x === parseInt(a[t].habitatDictionary[s].mapX, 10) && i.y === parseInt(a[t].habitatDictionary[s].mapY, 10)) {
                            return a[t].habitatDictionary[s]
                        }
                    }
                }
            }
            return null
        };
        t.prototype.getHabitatInfoForID = function (i) {
            var t, a, e = this.getData().map.tileArray;
            for (t = 0, a = e.length; t < a; t++) {
                frame = e[t].frame;
                if (e[t].habitatDictionary.hasOwnProperty(i)) {
                    return e[t].habitatDictionary[i]
                }
            }
            return null
        };
        return t
    }(m);
    ArrowMap = function (e) {
        "use strict";
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("arrowCanvas", $("#arrow")[0]);
            this.addOption("distanceIndicatorPair", null);
            this.addOption("distanceIndicatorOptions", {
                w: 60,
                h: 20,
                appendingText: ""
            });
            this.setOptions(e);
            this.arrowCtx = this.arrowCanvas.getContext("2d")
        }
        t.prototype._drawArrow = function (e, i, n, s, l, r, o) {
            var h = r.rad,
                c = r.left,
                a = 60 / 100 * 75,
                u = 0,
                t = this.arrowCtx;
            o = o || parseInt(r.dist, 10);
            t.save();
            t.translate(e, i);
            t.rotate(h);
            e = l;
            if (c) {
                n = -1 * n;
                a = -1 * a;
                u = a;
                e = -l
            }
            i = -(s / 2);
            t.lineWidth = 2;
            t.fillStyle = "rgb(0,0,255)";
            t.strokeStyle = "rgb(255,255,255)";
            t.beginPath();
            t.moveTo(e, i);
            t.lineTo(e, i + s);
            t.lineTo(e + a, i + s);
            t.lineTo(e + n, i + s / 2);
            t.lineTo(e + a, i);
            t.lineTo(e, i);
            t.shadowColor = "black";
            t.shadowBlur = 10;
            t.shadowOffsetX = 2;
            t.shadowOffsetY = 2;
            t.fill();
            t.shadowColor = "none";
            t.stroke();
            t.fillStyle = t.strokeStyle;
            t.direction = "left";
            t.fillText(o, e + u + 10, i + 13);
            t.restore()
        };
        t.prototype._calculateAngle = function (o, l) {
            function u(t, e) {
                return Math.sqrt(t * t + e * e)
            }
            var s = l.x - o.x,
                n = -1 * (l.y - o.y),
                i = u(s, n),
                t = false,
                e = false,
                r, a;
            s /= i;
            n /= i;
            a = Math.asin(n);
            r = Math.acos(s);
            if (r > Math.PI / 2) {
                t = true
            }
            if (a > 0) {
                e = true
            }
            if (e && !t) {
                return {
                    left: t,
                    top: e,
                    dist: i,
                    rad: -r
                }
            }
            if (e && t) {
                return {
                    left: t,
                    top: e,
                    dist: i,
                    rad: a
                }
            }
            if (!e && !t) {
                return {
                    left: t,
                    top: e,
                    dist: i,
                    rad: -a
                }
            }
            return {
                left: t,
                top: e,
                dist: i,
                rad: a
            }
        };
        t.prototype.resize = function (i, a) {
            var t = $(this.arrowCanvas).width();
            var e = $(this.arrowCanvas).height();
            $(this.arrowCanvas)[0].getContext("2d").canvas.width = t;
            $(this.arrowCanvas)[0].getContext("2d").canvas.height = e
        };
        t.prototype.draw = function () {
            this.arrowCtx.clearRect(0, 0, this.arrowCanvas.width, this.arrowCanvas.height);
            if (!this.distanceIndicatorPair) {
                return
            }
            var t = this.distanceIndicatorPair.start,
                e = this.distanceIndicatorPair.end,
                i = this.distanceIndicatorPair.distance,
                a = this._calculateAngle(t, e);
            this._drawArrow(t.x, t.y, this.distanceIndicatorOptions.w, this.distanceIndicatorOptions.h, 50, a, i)
        };
        return t
    }(V);
    Re = function (i) {
        var e = false;
        utils.__extends(t, V);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.drawStartMessage = "EBPd)2MV";
            this.drawEndMessage = "cnnoZduj";
            this.addRequired("canvas");
            this.addRequired("mapOrigin");
            this.addOption("zoom", 1);
            this.addOption("eventTarget", "");
            this.addOption("type", "normal");
            this.addOption("offset", {
                x: 0,
                y: 0
            });
            this.addOption("pointOfZoomOffset", {
                x: 0,
                y: 0
            });
            this.addOption("reloadBorderDist", {
                x: 0,
                y: 0
            });
            this.addOption("mapSize", {
                width: 32,
                height: 32
            });
            this.addOption("flexibleBorderDistFactor", null);
            this.addOption("renderingFont", "12px Arial");
            this.addOption("markedCastles", []);
            this.addOption("clearCanvasOnRedraw", false);
            this.addOption("autoAdjustPerformance", false);
            this.addOption("slowBrowser", false);
            this.addOption("initialDrawSpeedRounds", 20);
            this.addOption("slowBrowserMS", 40);
            this.addOption("labelCanvas", null);
            this.addOption("mapContainerSelector", "#mapContainer");
            this.setOptions(e);
            this.mapData = null;
            this.flag = false;
            this.drag = {
                down: false,
                start: null,
                dist: null
            };
            this.mapDataRequestPending = false;
            this.images = {
                ground: [],
                castles: [],
                free: []
            };
            this.tileInfo = {
                width: 1,
                height: 1
            };
            this.drawOffset = {
                even: {
                    x: 0,
                    y: 0
                },
                odd: {
                    x: 0,
                    y: 0
                }
            };
            this.ctx = this.canvas.getContext("2d");
            if (!this.labelCanvas) {
                this.labelCanvas = this.canvas
            }
            this.labelCtx = this.labelCanvas.getContext("2d");
            this.updateCanvasSizeFromElement();
            this.drawSpeed = [];
            this.drawSpeedRounds = this.initialDrawSpeedRounds;
            this.blinkingCache = {};
            this.blinkAlphaStepSize = .025;
            this.blinkingHighTreshold = .8;
            this.blinkingLowThreshold = .025
        }
        t.prototype.updateCanvasSizeFromElement = function () {
            this.canvasWidth = $(this.canvas).width();
            this.canvasHeight = $(this.canvas).height();
            $(this.canvas)[0].getContext("2d").canvas.width = this.canvasWidth;
            $(this.canvas)[0].getContext("2d").canvas.height = this.canvasHeight;
            if (this.labelCanvas) {
                this.labelCanvasWidth = $(this.labelCanvas).width();
                this.labelCanvasHeight = $(this.labelCanvas).height();
                $(this.labelCanvas)[0].getContext("2d").canvas.width = this.labelCanvasWidth;
                $(this.labelCanvas)[0].getContext("2d").canvas.height = this.labelCanvasHeight
            }
            this.drawSpeedRounds = this.initialDrawSpeedRounds
        };
        t.prototype.requestMapData = function (t, i) {
            var a;
            if (e === true) {
                if (this.mapSize.width > 32 || this.mapSize.height > 32) {}
            }
            if (typeof t == "undefined") {
                t = {
                    x: this.mapOrigin.x,
                    y: this.mapOrigin.y
                }
            }
            i = i || true;
            a = {
                x: t.x - this.mapSize.width,
                y: t.y - this.mapSize.height,
                width: this.mapSize.width * 2,
                height: this.mapSize.height * 2,
                centerToTarget: i,
                centerTarget: {
                    x: t.x,
                    y: t.y
                }
            };
            this.mapDataRequestPending = this.notify("F1bw-dct", this, a)
        };
        t.prototype.checkDistanceToMapBorder = function (t) {
            var e = {
                x: t.x - this.mapOrigin.x,
                y: t.y - this.mapOrigin.y
            };
            var i = {
                x: this.mapOrigin.x + this.getRealMapSize() - t.x,
                y: this.mapOrigin.y + this.getRealMapSize() - t.y
            };
            return {
                origin: e,
                bottomright: i
            }
        };
        t.prototype.getCurrentTileSet = function () {
            var t;
            t = this.notify("4dRl-Is9", this);
            if (t) {
                this.images = t.images;
                this.tileInfo = t.tileInfo;
                this.drawOffset = t.drawOffset
            }
        };
        t.prototype.refreshNeededForTile = function (e) {
            var t = this.checkDistanceToMapBorder(e);
            if (this.flexibleBorderDistFactor) {
                this.reloadBorderDist.x = 1 / this.zoom * this.flexibleBorderDistFactor;
                this.reloadBorderDist.y = 1 / this.zoom * this.flexibleBorderDistFactor
            }
            if (this.type === "overview" && t.bottomright.x < 50) {
                this.requestMapData(e, true);
                return true
            }
            if (t.origin.x < this.reloadBorderDist.x || t.origin.y < this.reloadBorderDist.y || t.bottomright.x < this.reloadBorderDist.x || t.bottomright.y < this.reloadBorderDist.y) {
                this.requestMapData(e, true);
                return true
            }
            return false
        };
        t.prototype.updateMapData = function (s) {
            var e, i, t;
            var n = true;
            if (s.useFrameOrigin === true) {
                n = false
            }
            this.mapData = s;
            e = this.mapData.map;
            i = e.tileArray;
            if (n === false) {
                this.mapOrigin = e.frame.origin;
                return
            }
            this.mapOrigin = {
                x: 999999999,
                y: 999999999
            };
            for (var a = 0; a < i.length; a++) {
                t = i[a].frame.origin;
                if (parseInt(t.x, 10) < this.mapOrigin.x && parseInt(t.y, 10) <= this.mapOrigin.y) {
                    this.mapOrigin.x = parseInt(t.x, 10);
                    this.mapOrigin.y = parseInt(t.y, 10)
                } else if (parseInt(t.y, 10) < this.mapOrigin.y && parseInt(t.x, 10) <= this.mapOrigin.x) {
                    this.mapOrigin.x = parseInt(t.x, 10);
                    this.mapOrigin.y = parseInt(t.y, 10)
                }
            }
        };
        t.prototype.getRealMapSize = function () {
            var t;
            if (!this.mapData) return 0;
            if (this.type == "normal") {
                t = Math.sqrt(this.mapData.map.tileArray.length) * 8 || 8
            } else {
                t = 192
            }
            return t
        };
        t.prototype.center = function (e, i) {
            i = i || false;
            if (i === true) {
                this.pointOfZoomOffset.x = this.pointOfZoomOffset.y = 0
            }
            if (this.refreshNeededForTile(e) === true) {
                return
            }
            var a = this.getRealMapSize();
            e = e || {
                x: Math.round(this.mapOrigin.x + a / 2),
                y: Math.round(this.mapOrigin.y + a / 2)
            };
            var s = {
                x: e.x - this.mapOrigin.x,
                y: e.y - this.mapOrigin.y
            };
            var t = {
                x: -1 * s.x * this.tileInfo.width,
                y: -1 * s.y * this.tileInfo.height / this.drawOffset.odd.y
            };
            if (e.y % 2) {
                t.x -= this.drawOffset.odd.x
            } else {
                t.x -= this.drawOffset.even.x
            }
            t.x += this.canvasWidth * .5 / this.zoom - this.tileInfo.width * .5;
            t.y += this.canvasHeight * .5 / this.zoom - this.tileInfo.height / 2 / this.drawOffset.odd.y;
            t.x -= this.pointOfZoomOffset.x;
            t.y -= this.pointOfZoomOffset.y;
            this.offset = t
        };
        t.prototype.showDebugGrid = function (t, a, s, n, e, i) {
            t.strokeStyle = "#FF0000";
            t.font = "8pt Arial";
            t.fillStyle = "#FFFFFF";
            t.strokeRect(e.x, e.y, this.tileInfo.width * this.zoom, this.tileInfo.height / this.drawOffset.odd.y * this.zoom);
            t.fillText(i.x + a + "/" + (i.y + s), e.x, e.y + 10);
            if (n > 0) {
                t.strokeStyle = "#FFFF00";
                t.strokeRect(e.x + this.tileInfo.width / 3 * this.zoom, e.y, this.tileInfo.width / 3 * this.zoom, this.tileInfo.height / this.drawOffset.odd.y * this.zoom)
            }
        };
        t.prototype.getImageForTile = function (t, e) {
            return this.notify("ynLYP3VF", this, {
                habitatID: t,
                bgTileTyp: e
            })
        };
        t.prototype.draw = function () {
            this.getCurrentTileSet();
            if (this.mapDataRequestPending) {
                return
            }
            if (this.mapData === null) {
                this.requestMapData();
                return
            }
            var a = this.getTileForCoords(this.canvasWidth / 2, this.canvasHeight / 2);
            if (this.refreshNeededForTile(a) === true) {
                return
            }
            if (!this.autoAdjustPerformance) {
                this.drawMap();
                return
            }
            if ($.browser.safari) {
                this.slowBrowser = true;
                this.drawSpeedRounds = -1
            }
            if (this.drawSpeedRounds > 0) {
                var s = +new Date;
                this.drawMap();
                var n = +new Date;
                this.drawSpeed.push(n - s);
                this.drawSpeedRounds -= 1
            } else if (this.drawSpeedRounds === 0) {
                var t = 0;
                for (var i = 0; i < this.drawSpeed.length; i++) {
                    t += this.drawSpeed[i]
                }
                t = t / this.drawSpeed.length;
                if (t > this.slowBrowserMS) {
                    this.slowBrowser = true
                } else {
                    this.slowBrowser = false
                }
                this.drawSpeedRounds = -1;
                this.drawMap();
                if (e) {}
            } else {
                this.drawMap()
            }
        };
        t.prototype.drawMap = function () {
            var n, r, o;
            if (this.clearCanvasOnRedraw) {
                this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height)
            }
            if (this.labelCanvas) {
                this.labelCtx.clearRect(0, 0, this.labelCanvas.width, this.labelCanvas.height)
            }
            var s = this.mapData.map;
            var i = s.tileArray;
            var e = i.length;
            var t;
            this._drawnCastles = [];
            this._blinkingCache = [];
            for (var a = e; a--;) {
                this.drawSector(i[a], this.ctx)
            }
            e = this._drawnCastles.length;
            if (this.slowBrowser && this.drag.down) {
                return
            }
            for (t = e; t--;) {
                this.drawInfo(this.labelCtx, this._drawnCastles[t].habInfo.info, this._drawnCastles[t].pos)
            }
        };
        t.prototype.drawSector = function (s, n) {
            var r, o;
            var l, t, e;
            var i, a, u;
            r = {
                x: s.frame.origin.x,
                y: s.frame.origin.y
            };
            o = {
                x: r.x - this.mapOrigin.x,
                y: r.y - this.mapOrigin.y
            };
            for (a = 0; a < 8; a++) {
                for (i = 0; i < 8; i++) {
                    t = this.calculateTilePosition(i, a, o);
                    if (t.x > 0 - this.tileInfo.width * this.zoom && t.x < this.canvasWidth && t.y > -(this.tileInfo.height * this.zoom) - this.tileInfo.height / this.drawOffset.odd.y * this.zoom && t.y < this.canvasHeight) {} else {
                        continue
                    }
                    l = s.mapArray[a][i].habitat;
                    u = s.mapArray[a][i].bgTileTyp;
                    e = this.getImageForTile(l, u);
                    if (e !== null) {
                        if (e.image) {
                            n.drawImage(e.image, t.x, t.y, t.width, t.height);
                            if (e.info.blinking) {
                                this._blinkingCache.push({
                                    id: e.info.id,
                                    rect: {
                                        x: t.x,
                                        y: t.y,
                                        w: t.width,
                                        h: t.height
                                    },
                                    habInfo: e,
                                    pos: t
                                })
                            } else {
                                this._drawnCastles.push({
                                    habInfo: e,
                                    pos: t
                                })
                            }
                        }
                        if (e.color) {
                            n.fillStyle = e.color;
                            n.fillRect(t.x + 1, t.y + 1, t.width - 1, t.height - 1)
                        }
                    }
                }
            }
        };
        t.prototype.calculateTilePosition = function (h, n, u) {
            var a, s, o, r, e, l, i, t;
            a = (this.offset.x + this.pointOfZoomOffset.x) * this.zoom;
            s = (this.offset.y + this.pointOfZoomOffset.y) * this.zoom;
            e = this.tileInfo.width * this.zoom;
            l = this.tileInfo.height * this.zoom;
            if (n % 2) {
                i = this.drawOffset.odd.x * this.zoom;
                t = this.tileInfo.height / this.drawOffset.odd.y * this.zoom
            } else {
                i = this.drawOffset.even.x * this.zoom;
                t = this.tileInfo.height / this.drawOffset.even.y * this.zoom
            }
            o = h * e + i + a + u.x * e;
            r = n * t + s + u.y * t;
            return {
                x: o,
                y: r,
                width: e,
                height: l
            }
        };
        t.prototype.drawInfo = function (e, t, r) {
            var i, a, s, l, u;
            var n = 14;
            var o;
            if (typeof t.name == "undefined" && typeof t.id != "undefined") {
                t.name = translate("Renegade") + " " + t.id
            }
            if (typeof t.name == "undefined") {
                return
            }
            if (this.blinkingCache[t.id] && !this.drag.down) {
                o = this.blinkingCache[t.id];
                t.bgColor = "rgba(" + o.bgColor + "," + o.alpha + ")"
            }
            e.font = this.renderingFont;
            s = e.measureText(t.name);
            i = r.x + this.tileInfo.width * this.zoom / 2 - s.width / 2;
            a = r.y + this.tileInfo.height * this.zoom / this.drawOffset.odd.y / 2 + this.tileInfo.height * this.zoom / this.drawOffset.odd.y / 4;
            if (this.blinkingCache[t.id]) e.clearRect(i - 4, a - 4, s.width + 8, n + 4);
            if (this.markedCastles.indexOf(t.id) != -1) {
                e.fillStyle = "rgba(170,0,255,1.0)";
                e.strokeStyle = "#FFFFFF"
            } else {
                e.fillStyle = t.bgColor;
                e.strokeStyle = t.fgColor
            }
            e.fillRect(i - 4, a - 4, s.width + 8, n + 4);
            e.fillStyle = t.fgColor;
            e.fillText(t.name, i, a + 10);
            a += n + 4;
            s = e.measureText(t.points);
            i = r.x + this.tileInfo.width * this.zoom / 2 - s.width / 2;
            e.fillStyle = t.bgColor;
            e.strokeStyle = t.fgColor;
            if (this.blinkingCache[t.id]) e.clearRect(i - 4, a - 4, s.width + 8, n + 4);
            e.fillRect(i - 4, a - 4, s.width + 8, n + 4);
            e.fillStyle = t.fgColor;
            e.fillText(t.points, i, a + 10)
        };
        t.prototype._drawOneCastleInfo = function (e, i, a) {
            var t = {
                x: Math.floor(i / 32) * 32,
                y: Math.floor(a / 32) * 32
            };
            var n = {
                x: t.x - this.mapOrigin.x,
                y: t.y - this.mapOrigin.y
            };
            var r = this.calculateTilePosition(i - t.x, a - t.y, n);
            var o = this.notify("UMQBR5lr", this, {
                x: i,
                y: a
            });
            var s = this.getImageForTile(e, o);
            if (s.info.blinking === false && this.blinkingCache[e]) {
                delete this.blinkingCache[e]
            }
            this.drawInfo(this.labelCtx, s.info, r)
        };
        t.prototype.startBlinkingCastle = function (t, e, i, a) {
            if (!this.blinkingCache[t]) {
                this.blinkingCache[t] = {
                    id: t,
                    bgColor: e,
                    alpha: 1,
                    countUp: false,
                    mapX: i,
                    mapY: a
                }
            }
            this.notify("3JZYrRFZ", this, null)
        };
        t.prototype.stopBlinking = function () {
            this.blinkingCache = {};
            this.notify("NRMRF%fF", this, null)
        };
        t.prototype.timeEvent = function (i) {
            if (this.drag.down) {
                return
            }
            if (utils.dict.size(this.blinkingCache) === 0) {
                this.stopBlinking()
            }
            var t;
            for (var e in this.blinkingCache) {
                t = this.blinkingCache[e];
                this._drawOneCastleInfo(e, t.mapX, t.mapY);
                if (t.countUp) {
                    t.alpha += this.blinkAlphaStepSize;
                    if (t.alpha > this.blinkingHighTreshold) {
                        t.alpha = 1;
                        t.countUp = false
                    }
                    continue
                }
                t.alpha -= this.blinkAlphaStepSize;
                if (t.alpha <= this.blinkingLowThreshold) {
                    t.alpha = 0;
                    t.countUp = true
                }
            }
        };
        t.prototype.getTileForCoords = function (f, p, t) {
            t = t || this.mapOrigin;
            var l, i, n, r, s, a, u, e, c, d, o;
            if (this.drawOffset.even.y != this.drawOffset.odd.y) {
                throw new Error("getTileForCoords: drawOffset.y must be the same for .x and .y")
            }
            u = this.drawOffset.odd.y;
            e = this.tileInfo.width * this.zoom;
            c = this.tileInfo.height * this.zoom;
            var h = this.pointOfZoomOffset;
            d = (this.offset.x + h.x) * this.zoom;
            o = (this.offset.y + h.y) * this.zoom;
            i = (p - o) / (c / u);
            s = Math.floor(i);
            if (s % 2) {
                a = this.drawOffset.odd.x * this.zoom
            } else {
                a = this.drawOffset.even.x * this.zoom
            }
            l = (f - e * a / e - d) / e;
            n = Math.floor(l + t.x);
            r = Math.floor(i + t.y);
            return {
                x: n,
                y: r
            }
        };
        t.prototype.getTileCenterCoords = function (h, o) {
            var s = this.checkDistanceToMapBorder({
                x: h,
                y: o
            });
            var g, m, y, f, r, e, t, i, a, l, n;
            t = this.drawOffset.odd.y;
            i = this.tileInfo.width * this.zoom;
            a = this.tileInfo.height * this.zoom;
            l = (this.offset.x + this.pointOfZoomOffset.x) * this.zoom;
            n = (this.offset.y + this.pointOfZoomOffset.y) * this.zoom;
            r = Math.floor(o);
            if (r % 2) {
                e = this.drawOffset.odd.x * this.zoom
            } else {
                e = this.drawOffset.even.x * this.zoom
            }
            var u = Math.floor(l + i * s.origin.x + e);
            var d = Math.floor(n + a / t * s.origin.y);
            var c = Math.floor(u + i / 2);
            var p = Math.floor(d + a / t / 2);
            return {
                x: c,
                y: p
            }
        };
        t.prototype.showBlockOverlay = function () {
            var t = $(this.mapContainerSelector);
            if (t.find(".overlay").length) {
                return
            }
            var e = this.notify("wrl8b7Ym", this);
            $(e).attr("draggable", "false");
            t.prepend($("<div class='overlay'>").append(e));
            t.find("div.overlay").click(function (t) {
                t.stopPropagation();
                t.preventDefault();
                return false
            })
        };
        t.prototype.hideBlockOverlay = function () {
            $(this.mapContainerSelector).find("div.overlay").remove()
        };
        t.prototype.scrollBy = function (t, e) {
            this.offset = {
                x: this.offset.x - t,
                y: this.offset.y - e
            }
        };
        t.prototype.setOffset = function (t) {
            this.offset = t
        };
        return t
    }(V);
    CanvasTile = function () {
        "use strict";

        function t(t) {
            this.canvas = t;
            this.ctx = t.getContext("2d");
            this.canvas.width = t.offsetWidth;
            this.canvas.height = t.offsetHeight
        }
        return t
    }();
    ai = function (a) {
        "use strict";
        utils.__extends(t, a);
        var e = false;
        var i = function (t) {
            t = t + 2127912214 + (t << 12) & 4294967295;
            t = (t ^ 3345072700 ^ t >> 19) & 4294967295;
            t = t + 374761393 + (t << 5) & 4294967295;
            t = (t + 3550635116 ^ t << 9) & 4294967295;
            t = t + 4251993797 + (t << 3) & 4294967295;
            t = (t ^ 3042594569 ^ t >> 16) & 4294967295;
            return ((t & 2147483647) >> 0) % 11
        };

        function t(s, a) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("drawStartMessage", "EBPd)2MV");
            this.addOption("drawEndMessage", "cnnoZduj");
            this.addOption("markedCastles", []);
            this.addOption("distanceIndicatorOptions", {
                w: 60,
                h: 20,
                appendingText: ""
            });
            this.addOption("mapContainerSelector", "#mapContainer");
            this.addRequired("canvas");
            this.addRequired("eventTarget");
            this.addOption("debug", false);
            this.addOption("tileInfo", {
                w: 128 * 2,
                h: 48 * 2,
                off_x: 64 * 2
            });
            this.addOption("tiledMap", {
                w: 2,
                h: 2
            });
            this.setOptions(a);
            if (this.debug) {
                e = true
            }
            this.fastMap = true;
            this.PXWIDTH = 256;
            this.PXHEIGHT = 256;
            this.preRenderFlag = false;
            this.drawCalls = 0;
            this._mapFrame = null;
            this.displayRect = {
                x: 0,
                y: 0,
                w: 0,
                h: 0
            };
            this.minBorderDistance = 100;
            this.cArray = [];
            this.cArray.push(new CanvasTile(document.createElement("canvas")));
            this.cArray.push(new CanvasTile(document.createElement("canvas")));
            this.cArray.push(new CanvasTile(document.createElement("canvas")));
            this.cArray.push(new CanvasTile(document.createElement("canvas")));
            this.drag = {
                down: false,
                start: null,
                dist: null
            };
            this.images = {
                ground: [],
                castles: [],
                free: []
            };
            this.type = "normal";
            var i = this.notify("4dRl-Is9", this);
            if (i) {
                this.images = i.images
            }
            this.zoom = 1;
            this.offset = {
                x: 0,
                y: 0
            };
            this.pointOfZoomOffset = {
                x: 0,
                y: 0
            };
            this.tileInfoOrig = $.extend({}, this.tileInfo);
            this.blinkingCache = {};
            this.blinkAlphaStepSize = .025;
            this.blinkingHighTreshold = .8;
            this.blinkingLowThreshold = .025
        }
        t.prototype.drawInfo = function (e, t, r) {
            var i, a, s;
            var o = 14;
            var n;
            if (!t) {
                return
            }
            if (typeof t.name === "undefined" && typeof t.id !== "undefined") {
                t.name = translate("Renegade") + " " + t.id
            }
            if (typeof t.name === "undefined") {
                return
            }
            if (this.blinkingCache[t.id] && !this.drag.down) {
                n = this.blinkingCache[t.id];
                if (n.bgColor === "255, 0, 255") {
                    t.bgColor = "rgb(" + (255 * n.alpha | 0) + ", 0 , " + (255 * n.alpha | 0) + ")"
                } else {
                    t.bgColor = "rgb(" + (255 * n.alpha | 0) + ", 255, 255 )"
                }
            }
            e.font = this.renderingFont;
            s = e.measureText(t.name);
            i = r.x + this.tileInfo.w * this.zoom / 2 - s.width / 2;
            a = r.y + this.tileInfo.h * this.zoom / 2 + this.tileInfo.h * this.zoom / 4;
            if (this.markedCastles.indexOf(+t.id) !== -1) {
                e.fillStyle = "rgba(170,0,255,1.0)";
                e.strokeStyle = "#FFFFFF"
            } else {
                e.fillStyle = t.bgColor;
                e.strokeStyle = t.fgColor
            }
            e.fillRect(i - 4, a - 4, s.width + 8, o + 4);
            e.fillStyle = t.fgColor;
            e.fillText(t.name, i, a + 10);
            a += o + 4;
            s = e.measureText(t.points);
            i = r.x + this.tileInfo.w * this.zoom / 2 - s.width / 2;
            e.fillStyle = t.bgColor;
            e.strokeStyle = t.fgColor;
            e.fillRect(i - 4, a - 4, s.width + 8, o - 2);
            e.fillStyle = t.fgColor;
            e.fillText(t.points, i, a + 6)
        };
        t.prototype.displayedOn = function (u, h, i, a, n) {
            var s = this.getCanvasId(u, h);
            var t = this.relativePixelPosition(u, h);
            var o = t.x + i > this.PXWIDTH;
            var l = t.y + a > this.PXHEIGHT;
            var e = [{
                id: s,
                x: t.x,
                y: t.y,
                w: this.PXWIDTH - t.x < i ? this.PXWIDTH - t.x : i,
                h: this.PXHEIGHT - t.y < a ? this.PXHEIGHT - t.y : a
            }];
            if (o) {
                var r = s + 1;
                var f = s / this.tiledMap.w | 0;
                var p = r / this.tiledMap.w | 0;
                if (p === f && r < this.tiledMap.w * this.tiledMap.h) {
                    e.push({
                        id: r,
                        x: !n ? t.x - this.PXWIDTH : t.x - this.PXWIDTH < 0 ? 0 : t.x - this.PXWIDTH,
                        y: t.y,
                        w: i - e[0].w,
                        h: e[0].h
                    })
                }
            }
            if (l) {
                var c = s + this.tiledMap.w;
                if (c < this.tiledMap.w * this.tiledMap.h) {
                    e.push({
                        id: c,
                        x: t.x,
                        y: !n ? t.y - this.PXHEIGHT : t.y - this.PXHEIGHT < 0 ? 0 : t.y - this.PXHEIGHT,
                        w: e[0].w,
                        h: a - e[0].h
                    })
                }
            }
            if (o && l) {
                var d = s + this.tiledMap.w + 1;
                if (d < this.tiledMap.w * this.tiledMap.h) {
                    e.push({
                        id: d,
                        x: !n ? t.x - this.PXWIDTH : t.x - this.PXWIDTH < 0 ? 0 : t.x - this.PXWIDTH,
                        y: !n ? t.y - this.PXHEIGHT : t.y - this.PXHEIGHT < 0 ? 0 : t.y - this.PXHEIGHT,
                        w: i - e[0].w,
                        h: a - e[0].h
                    })
                }
            }
            return e
        };
        t.prototype._getCanvasRowCol = function (t, e) {
            var i = e / this.PXHEIGHT | 0,
                a = t / this.PXWIDTH | 0;
            return {
                x: a,
                y: i
            }
        };
        t.prototype.getCanvasId = function (e, i) {
            var t = this._getCanvasRowCol(e, i);
            return this.tiledMap.w * t.y + t.x
        };
        t.prototype.relativePixelPosition = function (t, e) {
            var i = this._getCanvasRowCol(t, e);
            t -= i.x * this.PXWIDTH;
            e -= i.y * this.PXHEIGHT;
            return {
                x: t,
                y: e
            }
        };
        t.prototype.preRender = function () {
            if (e) {
                preRenderDebug(this.cArray)
            }
            var t = this.controller.datasource.getMap(this._mapFrame),
                d = 0,
                f = this._mapFrame.origin.y % 2 ? true : false;
            for (var a = t.frame.origin.y; a <= t.frame.origin.y + t.frame.size.height; a++) {
                for (var n = t.frame.origin.x; n <= t.frame.origin.x + t.frame.size.width; n++) {
                    var h = t.map[a] ? t.map[a][n] : null,
                        r = this.notify("ynLYP3VF", this, {
                            habitatID: h ? +h : 0,
                            bgTileTyp: i(n * a)
                        }),
                        u = (n - t.frame.origin.x) * this.tileInfo.w,
                        p = (a - t.frame.origin.y) * this.tileInfo.h,
                        m = a - t.frame.origin.y,
                        o;
                    o = m % 2;
                    if (f) {
                        o ^= 1
                    }
                    if (o) {
                        u += this.tileInfo.off_x
                    }
                    var c = this.displayedOn(u, p, this.tileInfo.w, this.tileInfo.h, false);
                    for (var l = 0, y = c.length; l < y; l++) {
                        var s = c[l];
                        if (s.id > this.tiledMap.w * this.tiledMap.h - 1) {
                            continue
                        }
                        if (e) {
                            debugDraw.call(this, n, a, t, s, r);
                            this.drawCalls += 1
                        } else {
                            this.cArray[s.id].ctx.drawImage(r.image, s.x, s.y);
                            this.drawInfo(this.cArray[s.id].ctx, r.info, s)
                        }
                    }
                    d += 1
                }
            }
            if (e) {
                drawDebugReloadBorder(this.cArray[0], 20, 140, 140, "MediumSpringGreen");
                drawDebugReloadBorder(this.cArray[1], 20, -140, 140, "MediumSpringGreen");
                drawDebugReloadBorder(this.cArray[2], 20, 140, -140, "MediumSpringGreen");
                drawDebugReloadBorder(this.cArray[3], 20, -140, -140, "MediumSpringGreen")
            }
            this.preRenderFlag = true
        };
        var s = function (a, s) {
            var t = s[0];
            var e, i;
            if (a.id === 0) {
                e = 0;
                i = 0
            }
            if (a.id === 1) {
                if (t.id === 0) {
                    e = t.w;
                    i = 0
                } else {
                    e = 0;
                    i = 0
                }
            }
            if (a.id === 2) {
                e = 0;
                i = t.h
            }
            if (a.id === 3) {
                if (t.id === 0) {
                    e = t.w;
                    i = t.h
                } else {
                    e = 0;
                    i = t.h
                }
            }
            var n = a.w;
            var r = a.h;
            return {
                x: e,
                y: i,
                w: n,
                h: r
            }
        };
        t.prototype.draw = function () {
            var l = this.canvas.ctx,
                i = this.displayRect,
                o, a;
            if (e) {
                this.drawCalls = 0
            }
            if (i.w === 0 || i.h === 0) {
                return
            }
            if (!this.preRenderFlag) {
                this.preRender()
            }
            var n = this.displayedOn(i.x, i.y, i.w, i.h, true);
            for (var r = 0, u = n.length; r < u; r++) {
                var t = n[r];
                if (t.id > this.tiledMap.w * this.tiledMap.h - 1) {
                    continue
                }
                o = this.cArray[t.id].canvas;
                a = s(t, n);
                l.drawImage(o, t.x, t.y, t.w, t.h, a.x, a.y, a.w, a.h);
                if (e) {
                    this.drawCalls += 1
                }
            }
            if (e) {
                drawCrosshair(this.canvas);
                drawHUD(this.canvas, this.cArray)
            }
        };
        t.prototype.getTileForCoords = function (e, i) {
            if (!this._mapFrame || !this.displayRect) {
                return null
            }
            if (this.displayRect.w === 0 || this.displayRect.h === 0) {
                return {
                    x: 0,
                    y: 0
                }
            }
            var t = this._mapFrame.origin.y + (i + this.displayRect.y) / this.tileInfo.h | 0;
            var a = t % 2 ? this.tileInfo.off_x : 0;
            var s = this._mapFrame.origin.x + (e + this.displayRect.x - a) / this.tileInfo.w | 0;
            return {
                x: s,
                y: t
            }
        };
        t.prototype.calculateBGCanvasSize = function (t, e) {
            t = t || this.PXWIDTH;
            e = e || this.PXHEIGHT;
            var i = (t - this.tileInfo.off_x) / (8 * this.tileInfo.w);
            var a = (e - 1 / 3 * this.tileInfo.h) / (8 * this.tileInfo.h);
            var s = Math.ceil(i * 2);
            var n = Math.ceil(a * 2);
            return {
                w: s,
                h: n
            }
        };
        t.prototype.resize = function (t, e) {
            this.displayRect.w = t;
            this.displayRect.h = e;
            var a = this.calculateBGCanvasSize(t, e);
            var s = a.w / 2 * 8 * this.tileInfo.w + this.tileInfo.off_x;
            var n = a.h / 2 * 8 * this.tileInfo.h + 1 / 3 * this.tileInfo.h;
            this.PXWIDTH = s;
            this.PXHEIGHT = n;
            for (var i = 0; i < this.cArray.length; i++) {
                this.cArray[i].canvas.width = s;
                this.cArray[i].canvas.height = n
            }
            this.canvas.canvas.width = t;
            this.canvas.canvas.height = e;
            var r = this.getTileForCoords(t / 2, e / 2);
            if (r) {
                this.center(r)
            }
        };
        t.prototype.getCenterTile = function () {
            var t = this.calculateBGCanvasSize();
            var e = t.w * 8;
            var i = t.h * 8;
            var a = e / 2;
            var s = i / 2;
            return {
                origin: {
                    x: a,
                    y: s
                },
                size: {
                    width: e - 1,
                    height: i - 1
                }
            }
        };
        t.prototype.scrollBy = function (t, e) {
            this.displayRect.x += t | 0;
            this.displayRect.y += e | 0;
            if (this.displayRect.x < 0) {
                this.displayRect.x = 0
            }
            if (this.displayRect.y < 0) {
                this.displayRect.y = 0
            }
            var i = this.cArray[0].canvas.width * 2 - this.minBorderDistance;
            var a = this.cArray[0].canvas.height * 2 - this.minBorderDistance;
            if (this.displayRect.y < this.minBorderDistance || this.displayRect.x < this.minBorderDistance || this.displayRect.x + this.displayRect.w > i || this.displayRect.y + this.displayRect.h > a) {
                var s = this.canvas.canvas.width | 0;
                var n = this.canvas.canvas.height | 0;
                var r = this.getTileForCoords(s / 2, n / 2);
                this.center(r);
                this.preRender();
                this.draw()
            }
        };
        t.prototype.setView = function (t, e) {
            this.displayRect.x = t | 0;
            this.displayRect.y = e | 0
        };
        t.prototype.center = function (t) {
            var e = this.canvas.canvas.width;
            var i = this.canvas.canvas.height;
            this._mapFrame = this.getCenterTile();
            this._mapFrame.origin.x = t.x - this._mapFrame.origin.x;
            this._mapFrame.origin.y = t.y - this._mapFrame.origin.y;
            var a = this.cArray[0].canvas.width - e / 2;
            var s = this.cArray[0].canvas.height - i / 2;
            this.setView(a, s)
        };
        t.prototype.getTileTopLeftCoords = function (e, t) {
            e = parseInt(e, 10);
            t = parseInt(t, 10);
            var n = e - this._mapFrame.origin.x;
            var r = t - this._mapFrame.origin.y;
            var o = t % 2 ? this.tileInfo.off_x : 0;
            var i = n * this.tileInfo.w + o | 0;
            var a = r * this.tileInfo.h | 0;
            var s = this.displayedOn(i, a, 1, 1, false)[0];
            return {
                gx: i,
                gy: a,
                x: i - this.displayRect.x,
                y: a - this.displayRect.y,
                rid: s.id,
                rx: s.x,
                ry: s.y
            }
        };
        t.prototype.getTileCenterCoords = function (s, n) {
            var a = this.getTileTopLeftCoords(s, n);
            var t = a.gx + this.tileInfo.w / 2 | 0;
            var e = a.gy + this.tileInfo.h / 2 | 0;
            var i = this.displayedOn(t, e, 1, 1, false)[0];
            return {
                gx: t,
                gy: e,
                x: t - this.displayRect.x,
                y: e - this.displayRect.y,
                rid: i.id,
                rx: i.x,
                ry: i.y
            }
        };
        t.prototype.showBlockOverlay = function () {
            Re.prototype.showBlockOverlay.call(this)
        };
        t.prototype.hideBlockOverlay = function () {
            Re.prototype.hideBlockOverlay.call(this)
        };
        t.prototype._drawOneCastleInfo = function (t, e, a) {
            var n = this.getTileTopLeftCoords(e, a);
            var r = i(e, a);
            var s = this.notify("ynLYP3VF", this, {
                habitatID: t,
                bgTileTyp: r
            });
            if (s.info.blinking === false && this.blinkingCache[t]) {
                delete this.blinkingCache[t]
            }
            this.drawInfo(this.canvas.ctx, s.info, n)
        };
        t.prototype.startBlinkingCastle = function (t, e, i, a) {
            if (!this.blinkingCache[t]) {
                this.blinkingCache[t] = {
                    id: t,
                    bgColor: e,
                    alpha: 1,
                    countUp: false,
                    mapX: i,
                    mapY: a
                }
            }
            this.notify("3JZYrRFZ", this, null)
        };
        t.prototype.stopBlinking = function () {
            this.blinkingCache = {};
            this.notify("NRMRF%fF", this, null)
        };
        t.prototype.timeEvent = function (i) {
            if (this.drag.down) {
                return
            }
            if (utils.dict.size(this.blinkingCache) === 0) {
                this.stopBlinking()
            }
            var t;
            for (var e in this.blinkingCache) {
                t = this.blinkingCache[e];
                this._drawOneCastleInfo(e, t.mapX, t.mapY);
                if (t.countUp) {
                    t.alpha += this.blinkAlphaStepSize;
                    if (t.alpha > this.blinkingHighTreshold) {
                        t.alpha = 1;
                        t.countUp = false
                    }
                    continue
                }
                t.alpha -= this.blinkAlphaStepSize;
                if (t.alpha <= this.blinkingLowThreshold) {
                    t.alpha = 0;
                    t.countUp = true
                }
            }
        };
        t.prototype.updateMapData = function () {
            this.preRenderFlag = false
        };
        return t
    }(V);
    FastView = function (i) {
        utils.__extends(t, i);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e);
            this.create();
            this.timers = [];
            this.elements = [];
            this.storageElements = [];
            this.activeHover = null
        }
        var e = function (t) {
            return t
        };
        t.prototype.create = function () {
            this.notify("_V6%tK-F", this, {
                time: 20
            })
        };
        t.prototype.timeEvent = function () {
            for (var i = 0, s = this.timers.length; i < s; i++) {
                var t = this.timers[i];
                t.time -= 10;
                var n = t.timeFunction || e;
                var a = document.getElementById(t.id);
                if (t.time < 60) a.innerHTML = "< 1m";
                else a.innerHTML = utils.date.secToTimeStr(n(t.time))
            }
        };
        t.prototype.openHtml = function (a, t) {
            var e = "<" + a + " id='" + (t.id || "id" + utils.uniqueID()) + "'";
            var i = t.styles || "";
            if (t.hidden) i += " hidden";
            if (i !== "") e += " class='" + i + "'";
            e += ">";
            return e
        };
        t.prototype.closeHtml = function (t) {
            return "</" + t + ">"
        };
        t.prototype.getEvents = function () {
            var i = t.__super__.getEvents.apply(this, arguments);
            for (var a = 0, n = this.elements.length; a < n; a++) {
                var e = this.elements[a];
                var r = e.clickHandler || this.clickHandler;
                var o = e.hoverInHandler || this.hoverInHandler;
                var l = e.hoverOutHandler || this.hoverOutHandler;
                var s = e.fieldChangeHandler || this.fieldChangeHandler;
                if (e.clickMessage) {
                    i.push({
                        selector: "#" + e.id,
                        event: "click",
                        callback: r,
                        target: this
                    })
                }
                if (e.lazyHoverClass) {
                    i.push({
                        selector: "#" + e.id,
                        event: "mouseover",
                        callback: o,
                        target: this
                    });
                    i.push({
                        selector: "#" + e.id,
                        event: "mouseout",
                        callback: l,
                        target: this
                    })
                }
                if (e.registerChangeHandler) {
                    i.push({
                        selector: "#" + e.id,
                        event: "change",
                        callback: s,
                        target: this
                    });
                    i.push({
                        selector: "#" + e.id,
                        event: "blur",
                        callback: s,
                        target: this
                    })
                }
            }
            return i
        };
        t.prototype._updateStorageElement = function (t, e) {
            _.storeSession.setItem(t, e);
            this.notify("naNYg0H)", this, this.storageId)
        };
        t.prototype.clickHandler = function (e) {
            var s = e.currentTarget.id;
            var t = this.searchElement(s);
            if (!t) return;
            if (t.isMaxButton) {
                var i = document.getElementById(t.inputField.id);
                if (i) {
                    i.value = t.maxAmount
                }
                var a = this.searchStorageElement(t.inputField.id);
                if (a) {
                    this._updateStorageElement(a.storageId, t.maxAmount)
                }
            }
            e.stopPropagation();
            e.preventDefault()
        };
        t.prototype.hoverInHandler = function (t) {
            var e = this.searchElement(t.currentTarget.id);
            if (!e) return;
            if (this.activeHover) {
                this.activeHover.hoverOut({
                    data: this.activeHover
                });
                this.activeHover = undefined
            }
            this.activeHover = new N(this.controller, {
                parent: this,
                lazyHoverClass: e.lazyHoverClass,
                lazyHoverOptions: e.lazyHoverOptions
            });
            this.activeHover.create();
            this.activeHover.hoverIn({
                data: this.activeHover,
                clientX: t.clientX,
                clientY: t.clientY
            });
            t.stopPropagation();
            t.preventDefault()
        };
        t.prototype.hoverOutHandler = function (t) {
            if (!this.activeHover) {
                utils.removeOrphanHovers();
                return
            }
            var e = this.searchElement(t.currentTarget.id);
            if (!e) return;
            this.activeHover.hoverOut({
                data: this.activeHover
            });
            this.activeHover = undefined;
            t.stopPropagation();
            t.preventDefault()
        };
        t.prototype.fieldChangeHandler = function (t) {
            var i = t.currentTarget.id;
            var e = this.searchStorageElement(i);
            if (!e) return;
            if (e.storageId) {
                this._updateStorageElement(e.storageId, document.getElementById(i).value)
            }
            t.stopPropagation();
            t.preventDefault()
        };
        t.prototype.searchElement = function (a, t) {
            var i = null;
            t = t || this.elements;
            if (!t) {
                return i
            }
            for (var e = 0, s = t.length; e < s; e++) {
                if (t[e].id === a) {
                    i = t[e];
                    break
                }
            }
            return i
        };
        t.prototype.searchStorageElement = function (t) {
            return this.searchElement(t, this.storageElements)
        };
        t.prototype.dataUpdate = function (t, e) {};
        t.prototype.addCheckbox = function (t) {
            t.id = t.id || "id" + utils.uniqueID();
            var a = t.checked || false;
            var s = a ? "checked" : "";
            var e = "<input type='checkbox' id='" + t.id + "' " + s;
            var i = t.styles || "";
            if (t.hidden) i += " hidden";
            if (i !== "") e += " class='" + i + "'";
            e += " />";
            this.elements.push(t);
            return e
        };
        t.prototype.addTimer = function (t) {
            t.id = t.id || "id" + utils.uniqueID();
            t.time = t.time || 0;
            t.timeFunction = t.timeFunction || e;
            var i = this.openHtml("div", t);
            if (t.time < 60) i += "< 1m";
            else i += utils.date.secToTimeStr(t.timeFunction(t.time));
            i += this.closeHtml("div");
            this.timers.push(t);
            return i
        };
        t.prototype.addElement = function (t, i) {
            t.id = t.id || "id" + utils.uniqueID();
            var e = this.openHtml("div", t);
            if (typeof t.content !== "undefined" && t.content !== null) {
                e += t.content
            }
            e += this.closeHtml("div");
            if (i) this.elements.push(t);
            return e
        };
        t.prototype.addInputWithMax = function (t) {
            t.id = t.id || "id" + utils.uniqueID();
            var e = "";
            e += this.openHtml("div", {
                styles: t.styles
            });
            e += "<input type='text' id='" + t.id + "' ";
            if (t.hidden) styles += " hidden";
            e += " />";
            e += this.addElement({
                styles: "button",
                content: this.notify("rvHW39mY", this, {
                    imageName: "maximum",
                    imageCategory: "icons"
                }),
                lazyHoverClass: t.lazyHoverClass,
                lazyHoverOptions: t.lazyHoverOptions,
                clickMessage: t.maxButtonClickMessage,
                isMaxButton: true,
                inputField: {
                    id: t.id
                },
                maxAmount: t.max
            }, true);
            e += this.closeHtml("div");
            delete t.lazyHoverClass;
            delete t.lazyHoverOptions;
            this.elements.push(t);
            if (t.storageId) {
                this.storageElements.push({
                    id: t.id,
                    storageId: t.storageId
                })
            }
            return {
                html: e,
                inputFieldId: t.id
            }
        };
        t.prototype.clearfix = function () {
            return this.openHtml("div", {
                styles: "clearfix"
            }) + this.closeHtml("div")
        };
        return t
    }(ye);
    s.Master = function (e) {
        function t(t) {
            this.lastUpdate = null;
            if (typeof t !== "undefined" && t) {
                this.update(t)
            }
        }
        t.prototype._dataKeys = {};
        t.prototype._postMapping = {};
        t.prototype._tainted = {};
        t.prototype._finaliseData = function () {};
        t.prototype.update = function (e) {
            if (utils.dict.size(this._dataKeys) === 0) {
                return
            }
            this.lastUpdate = new Date;
            if (!e) {
                return
            }
            for (var t in this._dataKeys) {
                var i = this._dataKeys[t];
                if (typeof e[i] === "undefined" && typeof this[t] !== "undefined") {
                    continue
                }
                var a = this._postMapping[t] ? this._postProcess(t, e[i]) : e[i];
                this._tainted[t] = this[t] !== a ? true : false;
                this[t] = a
            }
            this._finaliseData()
        };
        t.prototype.getTainted = function () {
            return this._tainted
        };
        t.prototype.clone = function () {
            var e = {}, t;
            for (var i in this._dataKeys) {
                e[i] = this[i]
            }
            t = this.constructor;
            t.prototype._dataKeys = this._dataKeys;
            t.prototype._postProcess = this._postProcess;
            t.prototype._finaliseData = this._finaliseData;
            t.prototype._tainted = {};
            return new t(e)
        };
        t.prototype._postProcess = function (i, t) {
            var e = this._postMapping[i];
            return typeof e === "function" && typeof t !== "undefined" && t !== null ? e(t, this) : null
        };
        return t
    }(this);
    (function (t) {
        namespace("utils.convert");
        t.utils.convert = {
            toDate: function (t) {
                if (t instanceof Date) {
                    return t
                } else if (typeof t === "undefined") {
                    return null
                } else if (typeof t === "string") {
                    var s = t.split(/[a-zA-Z\s]/);
                    var i = s[0].split("-");
                    var a = s[1].split(":");
                    var e = new Date(i[0], i[1] - 1, i[2], a[0], a[1], a[2]);
                    var n = e.getTimezoneOffset() * 60 * 1e3;
                    e.setTime(e.getTime() - n);
                    return e
                }
                return new Date(t)
            },
            toBool: function (t) {
                if (typeof t === "boolean") {
                    return t
                }
                return t === "true" || t === "false" ? t === "true" ? true : false : null
            },
            toNumber: function (t) {
                if (typeof t === "number") {
                    return t
                }
                var e = t && t.indexOf && !! ~t.indexOf(".") ? parseFloat(t, 10) : parseInt(t, 10);
                return isNaN(e) ? null : e
            },
            toRoundedNumber: function (e) {
                return Math.round(t.utils.convert.toNumber(e))
            }
        };

        function e(t, a) {
            if (!t || !t.length) {
                return []
            }
            var i = [];
            for (var e = 0, s = t.length; e < s; e++) {
                i.push(new a(t[e]))
            }
            return i
        }

        function i(t, a) {
            if (!t) {
                return {}
            }
            var e = {};
            for (var i in t) {
                e[i] = new a(t[i])
            }
            return e
        }

        function a(t, n) {
            var e = {};
            if (!t) {
                return e
            }
            if (!t.length) {
                t = Object.keys(t)
            }
            for (var i = 0, r = t.length; i < r; i++) {
                var a = t[i],
                    s = n[a];
                if (s) {
                    e[a] = s
                }
            }
            return e
        }
        t.utils.convert.modeliseArray = e;
        t.utils.convert.modeliseDict = i;
        t.utils.convert.mapWithDictionary = a
    })(this);
    (function (t) {
        if (!t._) {
            t._ = {}
        }
        t._.conv = t.utils.convert
    })(this);
    s.Alliance = function (a) {
        utils.__extends(e, a);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }

        function n(t) {
            if (typeof t !== "undefined" && t) {
                t = escape(t).replace(/\%0A/g, "\\n");
                t = unescape(t).replace(/\\n/g, "<br/>")
            }
            return t
        }

        function r(t) {
            return _.conv.modeliseArray(t, s.Alliance)
        }

        function i(e) {
            var t = _.conv.modeliseArray(e, s.Player);
            t.sort(function (t, e) {
                return parseInt(t.points, 10) > parseInt(e.points, 10) ? -1 : +1
            });
            return t
        }

        function o(e) {
            var t = _.conv.modeliseArray(e, s.ForumThread);
            t.sort(function (t, e) {
                return t.lastMessageDate > e.lastMessageDate ? -1 : +1
            });
            return t
        }
        e.prototype._dataKeys = {
            id: "id",
            name: "name",
            points: "points",
            pointsAverage: "pointsAverage",
            rank: "rank",
            rankAverage: "rankAverage",
            memberCount: "memberCount",
            descriptionText: "descriptionText",
            relationship: "relationship",
            diplomacyToArray: "diplomacyToArray",
            playerArray: "playerArray",
            invitedPlayerArray: "invitedPlayerArray",
            forumThreadArray: "forumThreadArray"
        };
        e.prototype._postMapping = {
            id: _.conv.toNumber,
            points: _.conv.toNumber,
            pointsAverage: _.conv.toNumber,
            relationship: _.conv.toNumber,
            rank: _.conv.toNumber,
            rankAverage: _.conv.toNumber,
            memberCount: _.conv.toNumber,
            descriptionText: n,
            diplomacyToArray: r,
            playerArray: i,
            invitedPlayerArray: i,
            forumThreadArray: o
        };
        e.prototype.hasInvitedPlayer = function (t) {
            return this.invitedPlayerArray.filter(function (e) {
                return +e.id === +t
            }).length
        };
        e.prototype.getUnreadThreadsCount = function (i) {
            var e = 0;
            if (!this.forumThreadArray) {
                return e
            }
            if (!(i instanceof Date)) {
                i = _.conv.toDate(i)
            }
            for (var s in this.forumThreadArray) {
                var a = this.forumThreadArray[s];
                if (i.getTime() < a.lastMessageDate.getTime()) {
                    e += 1;
                    a.read = false
                }
            }
            if (typeof t !== "undefined") {
                var n = t.lastReadForumDate,
                    r = t.unreadAllianceMessages;
                if (n !== null && r > 0 && e === 0) {
                    e += t.unreadAllianceMessages
                }
            }
            return e
        };
        return e
    }(s.Master);
    s.AllianceReport = function (a) {
        utils.__extends(t, a);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            id: "id",
            type: "type",
            date: "date",
            alliance: "alliance",
            sendingPlayer: "sendingPlayer",
            receivingPlayer: "receivingPlayer",
            variables: "variables"
        };
        t.prototype._postMapping = {
            id: _.conv.toNumber,
            type: _.conv.toNumber,
            date: _.conv.toDate,
            alliance: e,
            sendingPlayer: i,
            receivingPlayer: i,
            variables: r
        };
        t.prototype._finaliseData = function () {
            this.title = n(this.type);
            this._assignShortcuts()
        };

        function n(e) {
            var i = {
                1: "Invitation sent",
                2: "Invitation accepted",
                3: "Decline invitation",
                4: "Player dismissed",
                5: "Permission changed",
                6: "Member leaves alliance",
                7: "Diplomacy changed"
            }, t = i[e];
            return typeof t !== "undefined" ? translate(t) : ""
        }

        function e(t) {
            return new s.Alliance(t)
        }

        function i(t) {
            return new s.Player(t)
        }

        function r(t) {
            if (!t) {
                return {}
            }
            var i = {};
            i.newDiplomaticRelation = _.conv.toNumber(t.newDiplomaticRelation);
            i.oldDiplomaticRelation = _.conv.toNumber(t.oldDiplomaticRelation);
            i.newAlliancePermission = _.conv.toNumber(t.newAlliancePermission);
            i.oldAlliancePermission = _.conv.toNumber(t.oldAlliancePermission);
            if (typeof t.alliance !== "undefined") {
                i.alliance = e(t.alliance)
            }
            return i
        }
        t.prototype._assignShortcuts = function () {
            if (!this.variables) {
                this.variables = {};
                return
            }
            this.newDiplomaticRelation = this.variables.newDiplomaticRelation;
            this.oldDiplomaticRelation = this.variables.oldDiplomaticRelation;
            this.newAlliancePermission = this.variables.newAlliancePermission;
            this.oldAlliancePermission = this.variables.oldAlliancePermission;
            this.destinationAlliance = this.variables.alliance
        };
        return t
    }(s.Master);
    s.Building = function (i) {
        utils.__extends(t, i);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            primaryKey: "primaryKey",
            order: "order",
            identifier: "identifier",
            level: "level",
            upgradeOf: "upgradeOf",
            upgradeTo: "upgradeToArray",
            buildResources: "buildResourceDictionary",
            buildDuration: "buildDuration",
            buildSpeedupCost: "buildSpeedupCost",
            volumeResource: "volumeResource",
            volumeAmount: "volumeAmount",
            storeAmount: "storeAmount",
            storeResources: "storeResourceArray",
            generateResources: "generateResourceDictionary",
            marketDistance: "marketDistance",
            marketRates: "marketRateDictionary",
            modifier: "modifierArray",
            units: "unitFactoryArray",
            knowledges: "knowledgeFactoryArray",
            requiredKnowledges: "requiredKnowledgeArray",
            functions: "functionArray",
            missions: "missionFactoryArray",
            battleValues: "battleValueDictionary"
        };
        t.prototype._postMapping = {
            primaryKey: _.conv.toNumber,
            order: _.conv.toNumber,
            level: _.conv.toNumber,
            buildDuration: _.conv.toNumber,
            buildSpeedupCost: _.conv.toNumber,
            volumeResource: _.conv.toNumber,
            volumeAmount: _.conv.toNumber,
            storeAmount: _.conv.toNumber,
            marketDistance: _.conv.toNumber,
            marketRates: o,
            modifier: n,
            units: r,
            knowledges: e,
            requiredKnowledges: e,
            missions: l
        };
        t.prototype._finaliseData = function () {
            this.buildingType = a(this.identifier);
            this.untranslatedIdentifier = this.identifier.split("/")[0];
            this.name = translate(this.untranslatedIdentifier)
        };

        function a(t) {
            if (!t) {
                return -1
            }
            var e = t.split("/")[0],
                i = {
                    Keep: 1,
                    Arsenal: 2,
                    Tavern: 3,
                    Library: 4,
                    Fortifications: 5,
                    Market: 6,
                    Farm: 7,
                    Lumberjack: 8,
                    "Wood Store": 9,
                    Quarry: 10,
                    "Stone Store": 11,
                    "Ore Mine": 12,
                    "Ore Store": 13
                };
            return i[e] || -1
        }

        function n(t) {
            return _.conv.mapWithDictionary(t, be)
        }

        function r(t) {
            return _.conv.mapWithDictionary(t, y)
        }

        function o(t) {
            if (!t) {
                return []
            }
            var e = [];
            for (var i in t) {
                var a = t[i];
                e.push(new s.MarketRate({
                    resourceID: i,
                    rates: a
                }))
            }
            return e.sort(function (t, e) {
                return t.resourceID < e.resourceID ? -1 : +1
            })
        }

        function e(t) {
            if (!t) {
                return []
            }
            var i = [];
            for (var e = 0, a = t.length; e < a; e++) {
                i.push(A[t[e]])
            }
            return _.sortByOrder(i)
        }

        function l(t) {
            if (!t) {
                return []
            }
            var i = [];
            for (var e = 0, a = t.length; e < a; e++) {
                i.push(E[t[e]])
            }
            return _.sortByOrder(i)
        }
        t.prototype.getDescription = function () {
            return translate("BKServerBuilding-" + (this.primaryKey - this.level))
        };
        t.prototype.isUpgradeable = function (e) {
            var a = e.habitatResources,
                s = this.upgradeTo,
                t, i;
            if (!s || !e || !a) {
                return false
            }
            t = c[s];
            i = t.volumeResource;
            if (!t) {
                return false
            }
            for (var n in t.buildResources) {
                var l = t.buildResources[n];
                if (l > a[n].amount) {
                    return false
                }
            }
            if (i) {
                var o = t.volumeAmount - (this.volumeAmount || 0),
                    r = a[i];
                if (o > r.storeAmount - r.amount) {
                    return false
                }
            }
            for (var u in t.requiredKnowledges) {
                var h = t.requiredKnowledges[u];
                if (!e.habitatKnowledges[h.primaryKey]) {
                    return false
                }
            }
            return true
        };
        return t
    }(s.Master);
    s.BuildingUpgrade = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            id: "id",
            buildingTarget: "buildingTargetID",
            complete: "complete",
            durationFactor: "durationFactor",
            durationPerUnitInSeconds: "durationPerUnitInSeconds"
        };
        t.prototype._postMapping = {
            complete: _.conv.toDate,
            durationFactor: _.conv.toNumber,
            durationPerUnitInSeconds: _.conv.toNumber,
            buildingTarget: i
        };
        t.prototype._finaliseData = function () {
            this.overHalfDuration = this.isSpeededup() || this.isHalfDurationReached()
        };

        function i(t) {
            var e = null;
            if (typeof c !== "undefined" && typeof c[t] !== "undefined") {
                e = c[t]
            }
            return e
        }
        t.prototype.isSpeededup = function () {
            return this.durationFactor === .5
        };
        t.prototype.isHalfDurationReached = function () {
            var e = (this.complete - (new Date - W)) / 1e3;
            var i = this.durationInSeconds;
            var t = e - i;
            if (t < 0) {
                t = 0
            }
            return e < i / 2 + t
        };
        t.prototype.getCompletionString = function () {
            return translate("Level %d done in %@", this.buildingTarget.level, "")
        };
        t.prototype.getCompletionDate = function () {
            return utils.date.formatDateTime(this.complete)
        };
        return t
    }(s.Master);
    s.Discussion = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            id: "id",
            title: "title",
            lastEntry: "lastEntry",
            lastEntryDate: "lastEntryDate",
            lastReadDate: "lastReadDate",
            discussionMember: "discussionMember",
            discussionListener: "discussionListener"
        };
        t.prototype._postMapping = {
            id: _.conv.toNumber,
            lastEntryDate: _.conv.toDate,
            lastReadDate: _.conv.toDate
        };
        t.prototype._finaliseData = function () {
            this.previouslyRead = i(this.lastReadDate, this.lastEntryDate)
        };

        function i(t, e) {
            var i = true,
                s = typeof t === "undefined" || t === null,
                a = false;
            if (t instanceof Date & e instanceof Date) {
                a = t.getTime() < e.getTime()
            }
            if (s || a) {
                i = false
            }
            return i
        }
        return t
    }(s.Master);
    s.DiscussionEntry = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            id: "id",
            content: "content",
            offenseLevel: "offenseLevel",
            creationDate: "creationDate",
            player: "player"
        };
        t.prototype._postMapping = {
            id: _.conv.toNumber,
            offenseLevel: _.conv.toNumber,
            creationDate: _.conv.toDate
        };
        return t
    }(s.Master);
    s.ForumThread = function (i) {
        utils.__extends(t, i);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }

        function a(t) {
            if (t) {
                t = new s.Player(t)
            }
            return t
        }

        function e(t) {
            if (typeof t === "undefined" || t === null) {
                t = true
            }
            return _.conv.toBool(t)
        }
        t.prototype._dataKeys = {
            id: "id",
            closed: "closed",
            lastMessageDate: "lastMessageDate",
            topic: "topic",
            owner: "owner",
            read: "read"
        };
        t.prototype._postMapping = {
            id: _.conv.toNumber,
            closed: _.conv.toBool,
            lastMessageDate: _.conv.toDate,
            owner: a,
            read: e
        };
        t.prototype._finaliseData = function () {
            this.read = e(this.read)
        };
        return t
    }(s.Master);
    s.Habitat = function (p) {
        "use strict";
        utils.__extends(e, p);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype._dataKeys = {
            id: "id",
            name: "name",
            habitatType: "habitatType",
            points: "points",
            mapX: "mapX",
            mapY: "mapY",
            nextNPCUpgradeDate: "nextNPCUpgradeDate",
            nextBattleDate: "nextBattleDate",
            externalHabitatUnitsResources: "externalHabitatUnitsResources",
            lastTick: "lastTick",
            habitatResources: "habitatResourceDictionary",
            habitatMissions: "habitatMissionArray",
            habitatKnowledges: "habitatKnowledgeArray",
            habitatKnowledgeOrders: "habitatKnowledgeOrderArray",
            habitatUnits: "habitatUnitArray",
            habitatUnitOrders: "habitatUnitOrderArray",
            externalHabitatUnits: "externalHabitatUnitArray",
            habitatBuildings: "habitatBuildingDictionary",
            habitatBuildingUpgrades: "habitatBuildingUpgradeArray",
            habitatTransits: "habitatTransitArray",
            player: "player",
            creationDate: "creationDate"
        };
        e.prototype._postMapping = {
            id: _.conv.toNumber,
            points: _.conv.toNumber,
            player: w,
            mapX: _.conv.toNumber,
            mapY: _.conv.toNumber,
            nextBattleDate: _.conv.toDate,
            habitatResources: T,
            habitatMissions: l,
            habitatKnowledges: u,
            habitatKnowledgeOrders: h,
            habitatUnitOrders: o,
            habitatUnits: d,
            habitatBuildingUpgrades: m,
            habitatTransits: g
        };
        e.prototype._finaliseData = function () {
            this.name = b(this.name, this.id);
            this.habitatModifier = this.findModifiers();
            this.habitatBuildings = f(this.habitatBuildings, this);
            this.stats = {
                units: {
                    allDefending: this.getAllDefendingUnits(),
                    own: this.getUnitsForBattleType(C.OWN_HABITAT),
                    external: this.getUnitsForBattleType(C.EXTERNAL_UNITS_TO_DEFENSE),
                    attacker: this.getUnitsForBattleType(C.ATTACKER)
                },
                resources: this.getAllResources()
            };
            this._applyModifierToHabitatUnits()
        };

        function i(s, t) {
            var e = [];
            if (!t) {
                return e
            }
            for (var i = 0, n = t.length; i < n; i++) {
                var a = t[i];
                a.habitatId = s;
                e.push(a)
            }
            return e
        }

        function b(t, e) {
            e = _.defaultsTo(e, "0");
            return typeof t === "undefined" || t === false ? translate("Renegade") + " " + e : t
        }

        function w(t) {
            return new s.Player(t)
        }

        function T(t) {
            return _.conv.modeliseDict(t, s.HabitatResource)
        }

        function l(t) {
            var e = _.conv.modeliseArray(t, s.HabitatMission);
            return _.sortByOrder(e)
        }

        function u(t) {
            return _.conv.mapWithDictionary(t, A)
        }

        function h(t, n) {
            if (!t) {
                return []
            }
            var i = [];
            for (var e = 0, r = t.length; e < r; e++) {
                var a = t[e];
                a.habitatId = n.id;
                i.push(new s.KnowledgeOrder(a))
            }
            return _.sortByOrder(i)
        }

        function d(t) {
            return _.conv.modeliseArray(t, s.HabitatUnit)
        }

        function o(t, a) {
            t = i(a.id, t);
            var e = _.conv.modeliseArray(t, s.UnitOrder);
            e.sort(function (t, e) {
                return t.id < e.id ? -1 : +1
            });
            return e
        }

        function f(t, a) {
            if (!t || !c) {
                return {}
            }
            var e = {};
            for (var i in t) {
                e[i] = new s.HabitatBuilding({
                    habitat: a,
                    building: c[i]
                })
            }
            return e
        }

        function m(e) {
            var t = _.conv.modeliseArray(e, s.BuildingUpgrade);
            t.sort(function (t, e) {
                return t.complete < e.complete ? -1 : +1
            });
            return t
        }

        function g(t, a) {
            if (!t) {
                return []
            }
            t = i(a.id, t);
            var e = _.conv.modeliseArray(t, s.Transit);
            e.sort(function (t, e) {
                var i = t.destinationETA.getTime(),
                    a = e.destinationETA.getTime();
                return i < a ? -1 : +1
            });
            return e
        }

        function a(i, e) {
            for (var t in i) {
                if (typeof e[t] === "undefined") {
                    e[t] = i[t]
                } else {
                    e[t] += i[t]
                }
            }
            return e
        }

        function n() {
            var t = {};
            for (var e in J) {
                t[J[e]] = 0
            }
            return t
        }
        e.prototype.getAllResources = function () {
            var t = {};
            if (!this.habitatResources) {
                return t
            }
            for (var e in this.habitatResources) {
                var i = this.habitatResources[e],
                    a = i.amount,
                    s = i.storeAmount;
                t[e] = a > s ? s : a
            }
            return t
        };
        e.prototype.getAllDefendingUnits = function () {
            var e = n();
            if (!this.habitatUnits) {
                return e
            }
            for (var i = 0; i < this.habitatUnits.length; i++) {
                var t = this.habitatUnits[i],
                    r = t.battleType === C.OWN_HABITAT,
                    o = t.battleType === C.EXTERNAL_UNITS_TO_DEFENSE;
                if (r || o) {
                    for (var a = 0; a < t.units.length; a++) {
                        var s = t.units[a];
                        e[s.primaryKey] = s.count
                    }
                }
            }
            return e
        };
        e.prototype.getUnitsForBattleType = function (t) {
            var e = n();
            if (!this.habitatUnits) {
                return e
            }
            t = t || C.OWN_HABITAT;
            for (var i = 0; i < this.habitatUnits.length; i++) {
                var a = this.habitatUnits[i];
                if (a.battleType === t) {
                    for (var s = 0; s < a.units.length; s++) {
                        var r = a.units[s];
                        e[r.primaryKey] = r.count
                    }
                }
            }
            return e
        };
        e.prototype.getSortedBuildings = function () {
            var t = [];
            for (var e in this.habitatBuildings) {
                t.push(this.habitatBuildings[e])
            }
            return t.sort(function (t, e) {
                return t.building.order < e.building.order ? -1 : +1
            })
        };
        e.prototype.getSortedMissions = function (i, r) {
            i = _.defaultsTo(i, []);
            var a = [],
                s;
            s = function (t) {
                return t.mission.primaryKey === e.primaryKey
            };
            for (var o in E) {
                var e = E[o],
                    n = this.habitatMissions.filter(s),
                    t = {
                        running: false,
                        order: e.order,
                        primaryKey: e.primaryKey,
                        mission: e,
                        selected: false
                    };
                if (n.length) {
                    t.running = true;
                    t.executable = true;
                    t.complete = n[0].complete
                } else {
                    t.executable = e.isMissionPossible(this);
                    if (t.executable) {
                        t.selected = !! ~i.indexOf(e.primaryKey)
                    }
                }
                a.push(t)
            }
            return _.sortByOrder(D(this, a, r))
        };

        function S() {
            var e = $.extend(true, {}, ee);
            var i = $.extend(true, {}, y);
            var t;
            for (t in e) {
                e[t] = 0
            }
            for (t in i) {
                i[t] = 0
            }
            return {
                resources: e,
                units: i
            }
        }

        function D(c, h, d) {
            var l = S(),
                o, u, i, s, t, n, e, a;
            o = h.filter(function (t) {
                return t.executable === true && t.running === false
            });
            u = h.filter(function (t) {
                return t.executable === false || t.running === true
            });
            i = o.filter(function (t) {
                return t.selected === true
            });
            s = o.filter(function (t) {
                return t.selected === false
            });
            if (i.length) {
                for (t = 0, n = i.length; t < n; t++) {
                    e = i[t];
                    a = r(c, e.mission, l);
                    if (d && a.exceeds) {
                        e.executable = false
                    } else {
                        l = a.newConsumed
                    }
                }
                for (t = 0, n = s.length; t < n; t++) {
                    e = s[t];
                    a = r(c, e.mission, l);
                    if (a.exceeds) {
                        e.executable = false
                    }
                }
            }
            return i.concat(s, u)
        }

        function r(r, t, o) {
            var a = false,
                e = 0,
                i = $.extend(true, {}, o);
            if (t.resourceConsumptions) {
                for (var s in t.resourceConsumptions) {
                    e = t.resourceConsumptions[s];
                    i.resources[s] += e
                }
            }
            if (t.unitConsumptions) {
                for (var n in t.unitConsumptions) {
                    e = t.unitConsumptions[n];
                    i.units[n] += e
                }
            }
            a = k(r, i);
            return {
                newConsumed: i,
                exceeds: a
            }
        }

        function k(i, t) {
            var e = 0,
                r = i.getOwnDefendingUnits();
            for (var a in t.resources) {
                var s = i.habitatResources[a];
                if (!s) {
                    continue
                }
                e = t.resources[a];
                if (e > s.amount) {
                    return true
                }
            }
            for (var n in t.units) {
                e = t.units[n];
                if (e > r[n]) {
                    return true
                }
            }
            return false
        }
        e.prototype.getTavern = function () {
            if (!this.habitatBuildings) {
                return null
            }
            for (var e in this.habitatBuildings) {
                var t = this.habitatBuildings[e].building;
                if (t.missions && t.missions.length) {
                    return t
                }
            }
            return null
        };
        e.prototype.getMarket = function () {
            if (!this.habitatBuildings) {
                return null
            }
            for (var e in this.habitatBuildings) {
                var t = this.habitatBuildings[e].building;
                if (t.marketDistance && t.marketRates.length === 3) {
                    return t
                }
            }
            return null
        };
        e.prototype.getSlowestHabitatUnit = function (i) {
            var t = 0;
            for (var e = 0, n = i.length; e < n; e++) {
                var a = i[e];
                if (!a) {
                    continue
                }
                var s = a.getSecondsPerField(this);
                if (s > t) {
                    t = s
                }
            }
            return t
        };
        e.prototype.getHabitatUnitAmount = function (r) {
            var a = 0;
            for (var t = 0, o = this.habitatUnits.length; t < o; t++) {
                var e = this.habitatUnits[t],
                    s = e.battleType;
                if (typeof s === "undefined" || s !== C.OWN_HABITAT) {
                    continue
                }
                for (var i = 0, l = e.units.length; i < l; i++) {
                    var n = e.units[i];
                    if (n.primaryKey === r) {
                        a = n.count;
                        break
                    }
                }
            }
            return a
        };
        e.prototype.getHabitatUnits = function () {
            var e = [],
                t, i;
            for (t = 0, i = this.habitatUnits.length; t < i; t++) {
                var a = this.habitatUnits[t],
                    s = a.battleType;
                if (typeof s !== "undefined" && s === C.OWN_HABITAT) {
                    e = a.units
                }
            }
            if (e.length === 0) {
                for (t = 0, i = y.length; t < i; t++) {
                    var n = mUnit[t].clone();
                    n.setCount(0);
                    e.push(n)
                }
            }
            return _.sortByOrder(e)
        };
        e.prototype.getAllDefendingUnits = function () {
            return this._getBundledUnits(this.habitatUnits, [C.OWN_HABITAT, C.EXTERNAL_UNITS_TO_DEFENSE])
        };
        e.prototype.getOwnDefendingUnits = function () {
            return this._getBundledUnits(this.habitatUnits, [C.OWN_HABITAT])
        };
        e.prototype.getAttackingUnits = function () {
            return this._getBundledUnits(this.habitatUnits, [C.ATTACKER])
        };
        e.prototype.getExternDefendingUnits = function () {
            return this._getBundledUnits(this.externalHabitatUnits, [C.EXTERNAL_UNITS_TO_DEFENSE])
        };
        e.prototype.getExternAttackingUnits = function () {
            return this._getBundledUnits(this.externalHabitatUnits, [C.ATTACKER])
        };
        e.prototype.getHabitatMission = function (s) {
            var e;
            for (var t = 0, n = this.habitatMissions.length; t < n; t++) {
                var i = this.habitatMissions[t],
                    a = i.mission;
                if (typeof a !== "undefined" && a.primaryKey === s) {
                    e = i;
                    break
                }
            }
            return e
        };
        e.prototype.getHabitatKnowledge = function (s) {
            var e;
            for (var t = 0, n = this.habitatKnowledgeOrders.length; t < n; t++) {
                var i = this.habitatKnowledgeOrders[t],
                    a = i.knowledge;
                if (typeof a !== "undefined" && a.primaryKey === s) {
                    e = i;
                    break
                }
            }
            return e
        };
        e.prototype.isHabitatAttacked = function () {
            var e = false;
            for (var i = 0, n = this.habitatTransits.length; i < n; i++) {
                var a = this.habitatTransits[i];
                var s = a.destinationHabitat;
                if (!s) {
                    continue
                }
                var r = t.habitate.hasOwnProperty(s.id);
                var o = a.transitType === v.ATTACKER;
                if (o && r) {
                    e = true;
                    break
                }
            }
            if (this.nextBattleDate && this.nextBattleDate !== null) {
                e = true
            }
            return e
        };
        e.prototype.validateMissions = function (u, i) {
            var r = {}, o = {}, l, e, s, t;
            if (!i) {
                return []
            }
            l = i.slice(0, i.length);
            for (e = 0, s = i.length; e < s; e++) {
                t = E[i[e]];
                if (t.unitConsumptions) {
                    o = a(t.unitConsumptions, o)
                }
                if (t.resourceConsumptions) {
                    r = a(t.resourceConsumptions, r)
                }
            }
            for (e = 0, s = u.length; e < s; e++) {
                var n = u[e],
                    d = typeof n === "number" || typeof n === "string",
                    h, c;
                t = d ? E[n] : n;
                h = !! ~i.indexOf(t.primaryKey);
                c = t.isMissionPossible(this.id, o, r) === true;
                if (h && c) {
                    l.push(t.primaryKey)
                }
            }
            return l
        };
        e.prototype.getAllMarketRates = function () {
            var t = [];
            for (var i in this.habitatBuildings) {
                var e = this.habitatBuildings[i].building;
                if (typeof e.marketRates !== "undefined" && e.marketRates !== null) {
                    t = t.concat(e.marketRates)
                }
            }
            return t
        };
        e.prototype.getMarketRateForResource = function (e) {
            var i = this.getAllMarketRates();
            e = parseInt(e, 10);
            for (var t = 0; t < i.length; t++) {
                if (i[t].resourceID === e) {
                    return i[t]
                }
            }
            return null
        };
        e.prototype.getColorClass = function () {
            var t = {};
            for (var e in this.habitatResources) {
                var a = this.habitatResources[e],
                    i = a.amount / a.storeAmount;
                if (i === 1) {
                    t[e] = "red"
                } else if (i < 1 && i > .79) {
                    t[e] = "orange"
                }
            }
            return t
        };
        e.prototype.distanceTo = function (t, e) {
            return utils.Map.distanceToHabitat(this.mapX, this.mapY, t, e)
        };
        e.prototype.findModifiers = function () {
            var e = [],
                i, r, t, a;
            if (this.habitatKnowledges) {
                for (i = 0, r = this.habitatKnowledges.length; i < r; i++) {
                    var s = this.habitatKnowledges[i];
                    if (s.modifier) {
                        for (t = 0, a = s.modifier.length; t < a; t++) {
                            e.push(s.modifier[t])
                        }
                    }
                }
            }
            if (this.habitatBuildings) {
                for (var o in this.habitatBuildings) {
                    var n = this.habitatBuildings[o];
                    if (n.modifier) {
                        for (t = 0, a = n.modifier.length; t < a; t++) {
                            e.push(n.modifier[t])
                        }
                    }
                }
            }
            e.sort(function (t, e) {
                return t.primaryKey < e.primaryKey ? -1 : +1
            });
            return e
        };
        e.prototype.getSyncableUnits = function (a, s) {
            var n = function (a, o, t) {
                if (typeof t === "string") {
                    t = new Date(t)
                }
                var s = [];
                for (var e = 0, l = a.units.length; e < l; e++) {
                    var i = a.units[e];
                    if (i.count === 0) {
                        continue
                    }
                    var u = o * i.secondsPerField * 1e3;
                    var n = new Date((new Date).valueOf() + u);
                    if (n <= t) {
                        var r = i.clone();
                        r._arrivalTime = n;
                        s.push(r)
                    }
                }
                return s
            };
            var r = this.distanceTo(a.mapX, a.mapY);
            var t = [];
            for (var e = 0, o = this.habitatUnits.length; e < o; e++) {
                var i = this.habitatUnits[e],
                    l = i.battleType !== C.OWN_HABITAT;
                if (l || i.sourceHabitat.id !== this.id) {
                    continue
                }
                t = t.concat(n(i, r, s))
            }
            return t
        };
        e.prototype._applyModifierToHabitatUnits = function () {
            for (var e = 0, r = this.habitatModifier.length; e < r; e++) {
                var s = this.habitatModifier[e];
                if (s.type !== xe.MOVEMENTSPEED) {
                    continue
                }
                for (var a = 0, n = this.habitatUnits.length; a < n; a++) {
                    var t = this.habitatUnits[a],
                        o = t.battleType !== C.OWN_HABITAT,
                        l = t.sourceHabitat.id !== this.id;
                    if (o || l) {
                        continue
                    }
                    for (var i = 0, u = t.units.length; i < u; i++) {
                        var h = t.units[i];
                        h.secondsPerField *= s.percentage
                    }
                }
            }
        };
        e.prototype._getBundledUnits = function (n, c) {
            var e = {}, a, l, s, h;
            if (!n) {
                return e
            }
            for (a = 0, l = n.length; a < l; a++) {
                var t = n[a],
                    r = t.battleType;
                if (r === null || typeof r === "undefined" || !! ~c.indexOf(r) === false) {
                    continue
                }
                if (!t.units && t.habitatUnitDictionary) {
                    t.units = x(t.habitatUnitDictionary)
                }
                for (s = 0, h = t.units.length; s < h; s++) {
                    var i = t.units[s],
                        u = i.count,
                        o;
                    if (i.count <= 0) {
                        continue
                    }
                    o = e[i.primaryKey];
                    if (o && o > 0) {
                        e[i.primaryKey] += u
                    } else {
                        e[i.primaryKey] = u
                    }
                }
            }
            return e
        };

        function x(t) {
            var e = [];
            for (var i in t) {
                var s = t[i],
                    a = y[i].clone();
                a.setCount(s);
                e.push(a)
            }
            return e
        }
        e.prototype.getHabitatUnitOrderByID = function (i) {
            for (var t = 0, a = this.habitatUnitOrders.length; t < a; t++) {
                var e = this.habitatUnitOrders[t];
                if (+e.id === +i) {
                    return e
                }
            }
            return null
        };
        e.prototype.getRecruitableUnits = function () {
            var t = [];
            for (var s in J) {
                var e = J[s],
                    i = y[e],
                    a = i.getMaxRecruiting(this),
                    n = {
                        habitatID: this.id,
                        unitID: e,
                        maxAmount: a,
                        recruitable: a > 0 && i.isRecruitable(this)
                    };
                t.push(n)
            }
            return t
        };
        e.prototype.getActiveRecruitings = function () {
            var a = [];
            for (var n in J) {
                var r = J[n],
                    e = {
                        unitID: r,
                        orders: []
                    };
                for (var i = 0, o = this.habitatUnitOrders.length; i < o; i++) {
                    var t = this.habitatUnitOrders[i],
                        s = {
                            amountDone: t.amountDone,
                            orderAmount: t.orderAmount,
                            amount: t.orderAmount - t.amountDone,
                            complete: t.complete,
                            nextUnitComplete: t.nextUnitComplete,
                            isSpeedUp: t.isSpeededup(),
                            overHalfDuration: t.isHalfDurationReached(),
                            canFinish: t.isSpeededup() || t.isHalfDurationReached(),
                            id: t.id,
                            unitID: +t.unit.primaryKey
                        };
                    if (s.unitID === e.unitID) {
                        e.orders.push(s)
                    }
                }
                a.push(e)
            }
            return a
        };
        e.prototype.getTotalRecruitingCosts = function () {
            var e = {
                speedup: {
                    count: 0,
                    costs: 0
                },
                finish: {
                    count: 0,
                    costs: 0
                }
            };
            for (var i = 0, a = this.habitatUnitOrders.length; i < a; i++) {
                var t = this.habitatUnitOrders[i];
                if (!t.isSpeededup()) {
                    e.speedup.count += t.orderAmount;
                    e.speedup.costs += t.orderAmount * t.unit.buildSpeedupCost
                } else {
                    e.finish.count += t.orderAmount;
                    e.finish.costs += t.orderAmount * t.unit.buildSpeedupCost
                }
            }
            return e
        };
        return e
    }(s.Master);
    s.HabitatBuilding = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            habitat: "habitat",
            building: "building"
        };
        t.prototype._postMapping = {};
        t.prototype._finaliseData = function () {
            this.isUpgradeable = false;
            this.fullyUpgraded = !this.building.upgradeTo || this.building.upgradeTo.length === 0;
            this.currentUpgrades = i(this.habitat.habitatBuildingUpgrades, this.building.buildingType);
            this.highestUpgradeBuilding = a(this.currentUpgrades, this.building);
            if (!this.fullyUpgraded) {
                this.isUpgradeable = this.highestUpgradeBuilding.isUpgradeable(this.habitat)
            }
        };

        function i(t, s) {
            var e = [];
            if (!t || !t.length) {
                return e
            }
            for (var i = 0, n = t.length; i < n; i++) {
                var a = t[i];
                if (a.buildingTarget.buildingType === s) {
                    e.push(a)
                }
            }
            return e.sort(function (t, e) {
                return t.complete < e.complete ? -1 : +1
            })
        }

        function a(t, e) {
            return t.length ? t[t.length - 1].buildingTarget : e
        }
        return t
    }(s.Master);
    s.HabitatMission = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }

        function i(t) {
            var e = null;
            if (typeof E !== "undefined" && typeof E[t] !== "undefined") {
                e = E[t]
            }
            return e
        }
        t.prototype._dataKeys = {
            mission: "missionId",
            complete: "complete",
            durationFactor: "durationFactor",
            durationInSeconds: "durationInSeconds"
        };
        t.prototype._postMapping = {
            mission: i,
            complete: _.conv.toDate,
            durationFactor: _.conv.toNumber,
            durationInSeconds: _.conv.toNumber
        };
        t.prototype.isSpeededup = function () {
            return this.durationFactor === .5
        };
        t.prototype.isHalfDurationReached = function () {
            var e = (this.complete - (new Date - W)) / 1e3;
            var t = e - this.durationInSeconds;
            if (t < 0) {
                t = 0
            }
            return e < this.durationInSeconds / 2 + t
        };
        return t
    }(s.Master);
    s.HabitatResource = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }

        function i(t) {
            var e = "Unkown";
            if (typeof ee !== "undefined" && typeof ee[t] !== "undefined") {
                e = ee[t].identifier
            }
            return e
        }
        t.prototype._dataKeys = {
            amount: "amount",
            resourceID: "resourceId",
            generateAmount: "generateAmount",
            lastUpdate: "lastUpdate",
            storeAmount: "storeAmount"
        };
        t.prototype._postMapping = {
            amount: _.conv.toRoundedNumber,
            generateAmount: _.conv.toNumber,
            storeAmount: _.conv.toNumber,
            resourceID: _.conv.toNumber
        };
        t.prototype._finaliseData = function () {
            this.name = i(this.resourceID)
        };
        return t
    }(s.Master);
    s.HabitatUnit = function (i) {
        utils.__extends(t, i);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            habitat: "habitat",
            sourceHabitat: "sourceHabitat",
            battleType: "battleType",
            units: "habitatUnitDictionary"
        };
        t.prototype._postMapping = {
            battleType: _.conv.toNumber,
            habitat: e,
            sourceHabitat: e,
            units: a
        };

        function e(t) {
            return new s.Habitat(t)
        }

        function a(a) {
            var e = [],
                s, t;
            s = function (e) {
                return e.primaryKey === t.primaryKey
            };
            for (var n in a) {
                var o = a[n];
                t = y[n].clone();
                t.setCount(o);
                e.push(t)
            }
            for (var l in y) {
                var r, i;
                t = y[l];
                r = e.filter(s);
                if (r.length) {
                    continue
                }
                i = t.clone();
                i.setCount(0);
                e.push(i)
            }
            return _.sortByOrder(e)
        }
        return t
    }(s.Master);
    s.Knowledge = function (a) {
        utils.__extends(e, a);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype._dataKeys = {
            primaryKey: "primaryKey",
            order: "order",
            identifier: "identifier",
            buildResources: "buildResourceDictionary",
            buildDuration: "buildDuration",
            buildSpeedupCost: "buildSpeedupCost",
            volumeResource: "volumeResource",
            volumeAmount: "volumeAmount",
            modifier: "modifierArray",
            requiredKnowledges: "requiredKnowledgeArray"
        };
        e.prototype._postMapping = {
            primaryKey: _.conv.toNumber,
            order: _.conv.toNumber,
            buildDuration: _.conv.toNumber,
            buildSpeedupCost: _.conv.toNumber,
            volumeResource: _.conv.toNumber,
            volumeAmount: _.conv.toNumber,
            modifier: s
        };
        e.prototype._finaliseData = function () {
            this.imageCategory = "knowledges"
        };

        function s(t) {
            return _.conv.mapWithDictionary(t, be)
        }

        function i(e, s, n) {
            var i = [];
            for (var r in e) {
                var t = e[r];
                if (!t.requiredKnowledges) {
                    continue
                }
                for (var o in t.requiredKnowledges) {
                    rk = t.requiredKnowledges[o];
                    if (rk.primaryKey === n) {
                        var a = t.clone();
                        a.origin = s;
                        i.push(a)
                    }
                }
            }
            return i
        }
        e.prototype.getDescription = function () {
            return translate("BKServerKnowledge-" + this.primaryKey)
        };
        e.prototype.getEnabled = function () {
            var t = [],
                a = [],
                e = this.primaryKey;
            t = t.concat(i(c, "building", e));
            t = t.concat(i(y, "units", e));
            t = t.concat(i(A, "knowledge", e));
            if (this.modifier) {
                for (var n in this.modifier) {
                    var s = this.modifier[n];
                    s.origin = "modifier";
                    a.push(s)
                }
            }
            return {
                enables: t,
                bonus: a
            }
        };
        e.prototype.isExplorable = function (e) {
            if (typeof e === "string" || typeof e === "number") {
                e = t.habitate[e]
            }
            var i = e.habitatResources;
            for (var a in this.buildResources) {
                var n = this.buildResources[a];
                if (n > i[a].amount) {
                    return false
                }
            }
            if (this.volumeResource) {
                var s = i[this.volumeResource];
                if (this.volumeAmount > s.storeAmount - s.amount) {
                    return false
                }
            }
            if (this.requiredKnowledges) {
                for (var r in this.requiredKnowledges) {
                    var o = A[this.requiredKnowledges[r]];
                    if (!o.alreadyResearched(e)) {
                        return false
                    }
                }
            }
            return true
        };
        e.prototype.alreadyResearched = function (e) {
            if (typeof e === "string" || typeof e === "number") {
                e = t.habitate[e]
            }
            for (var i in e.habitatKnowledges) {
                if (e.habitatKnowledges[i].primaryKey === this.primaryKey) {
                    return true
                }
            }
            return false
        };
        return e
    }(s.Master);
    s.KnowledgeOrder = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            habitatId: "habitatId",
            knowledge: "knowledgeId",
            complete: "complete",
            durationFactor: "durationFactor",
            durationInSeconds: "durationInSeconds"
        };
        t.prototype._postMapping = {
            knowledge: i,
            habitatId: _.conv.toNumber,
            complete: _.conv.toDate,
            durationFactor: _.conv.toNumber,
            durationInSeconds: _.conv.toNumber
        };

        function i(t) {
            var e = null;
            if (typeof A !== "undefined" && A[t] !== "undefined") {
                e = A[t]
            }
            return e
        }
        t.prototype.isSpeededup = function () {
            return this.durationFactor === .5
        };
        t.prototype.isHalfDurationReached = function () {
            var e = (this.complete - (new Date - W)) / 1e3;
            var i = this.durationInSeconds;
            var t = e - i;
            if (t < 0) {
                t = 0
            }
            return e < i / 2 + t
        };
        return t
    }(s.Master);
    s.MarketRate = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            resourceID: "resourceID",
            rates: "rates"
        };
        t.prototype._postMapping = {
            resourceID: _.conv.toNumber
        };
        return t
    }(s.Master);
    s.Mission = function (i) {
        utils.__extends(e, i);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype._dataKeys = {
            primaryKey: "primaryKey",
            order: "order",
            identifier: "identifier",
            buildSpeedupCost: "buildSpeedupCost",
            duration: "duration",
            unitProductions: "unitProduction",
            unitProductionVariance: "unitProductionVariance",
            unitConsumptions: "unitConsumption",
            resourceProductions: "resourceProduction",
            resourceProductionVariance: "resourceProductionVariance",
            resourceConsumptions: "resourceConsumption"
        };
        e.prototype._postMapping = {
            primaryKey: _.conv.toNumber,
            order: _.conv.toNumber,
            buildSpeedupCost: _.conv.toNumber,
            duration: _.conv.toNumber,
            unitProductionVariance: _.conv.toNumber,
            resourceProductionVariance: _.conv.toNumber
        };
        e.prototype.getDescription = function () {
            return translate("BKServerMission-" + this.primaryKey)
        };
        e.prototype.isMissionPossible = function (e, n, a) {
            if (!(e instanceof s.Habitat)) {
                e = t.habitate[e]
            }
            n = _.defaultsTo(n, {});
            a = _.defaultsTo(a, {});
            var h = e.getTavern().missions,
                m = this.unitConsumptions,
                c = false;
            if (e.getHabitatMission(this.primaryKey)) {
                return false
            }
            for (var y in h) {
                if (h[y].primaryKey === this.primaryKey) {
                    c = true;
                    break
                }
            }
            if (!c) {
                return false
            }
            if (this.resourceConsumptions) {
                for (var i in this.resourceConsumptions) {
                    var v = this.resourceConsumptions[i],
                        p = e.habitatResources[i].amount;
                    if (typeof a[i] !== "undefined") {
                        p -= a[i]
                    }
                    if (p < v) {
                        return false
                    }
                }
            }
            if (this.unitConsumptions) {
                var r = e.getHabitatUnits();
                if (!r.length) {
                    return false
                }
                for (var o = 0, f = r.length; o < f; o++) {
                    var l = r[o],
                        d = l.count,
                        u = m[l.primaryKey],
                        g = n[l.primaryKey];
                    if (u && typeof givenUnit !== "undefined") {
                        d -= g
                    }
                    if (d < u) {
                        return false
                    }
                }
            }
            return true
        };
        return e
    }(s.Master);
    s.Modifier = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            identifier: "identifier",
            order: "order",
            percentage: "percentage",
            primaryKey: "primaryKey",
            targets: "targetArray",
            type: "type",
            corps: "corps"
        };
        t.prototype._postMapping = {
            primaryKey: _.conv.toNumber,
            order: _.conv.toNumber,
            percentage: _.conv.toNumber,
            type: _.conv.toNumber
        };
        return t
    }(s.Master);
    s.Player = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        _habitatArray = null;

        function i(t) {
            return _.conv.modeliseDict(t, s.Habitat)
        }

        function n(t) {
            if (!t) {
                return new s.Alliance
            }
            return new s.Alliance(t)
        }
        t.prototype._dataKeys = {
            id: "id",
            nick: "nick",
            points: "points",
            rank: "rank",
            loginId: "loginId",
            touchDate: "touchDate",
            alliancePermission: "alliancePermission",
            creationDate: "creationDate",
            gold: "gold",
            habitate: "habitatDictionary",
            allianceInvitations: "allianceInvitationArray",
            conquerResourceAmounts: "conquerResourceAmounts",
            conquestPointDictionary: "conquestPointDictionary",
            alliance: "alliance",
            unreadDiscussionCount: "unreadDiscussionCount",
            unreadReportCount: "unreadReportCount",
            lastReadForumDate: "lastReadForumDate",
            lastReadReportDate: "lastReadReportDate",
            isOnVacation: "isOnVacation",
            remainingVacationHours: "remainingVacationHours",
            vacationStartDate: "vacationStartDate",
            reportSetup: "reportSetup",
            discussions: "discussions"
        };
        t.prototype._postMapping = {
            touchDate: _.conv.toDate,
            loginId: _.conv.toNumber,
            alliancePermission: _.conv.toNumber,
            habitate: i,
            alliance: n
        };
        t.prototype._finaliseData = function () {
            this.firstHabitat = this.getSortedHabitate()[0];
            this.sortedMissions = this.getSortedMissions();
            if (this.alliance) {
                this.unreadAllianceMessages = this.alliance.getUnreadThreadsCount(this.lastReadForumDate)
            }
            this.updateStatistics();
            _habitatArray = null
        };
        t.prototype.hasAlliance = function () {
            return this.alliance && this.alliance.lastUpdate !== null
        };
        t.prototype.hasAlliancePermission = function (t) {
            if (t === h.ALL) {
                return this.alliancePermission === h.ALL
            }
            return !!(this.alliancePermission & t)
        };
        t.prototype.updateStatistics = function () {
            this.stats = {
                units: {
                    own: this.getOwnUnits()
                },
                resources: this.getAllResources(),
                freePeople: this.calculateFreePeople()
            }
        };
        t.prototype.getAllResources = function () {
            var e = {};
            for (var t in a) {
                e[a[t]] = 0
            }
            for (var s in this.habitate) {
                var i = this.habitate[s].stats.resources;
                for (t in i) {
                    e[t] += i[t]
                }
            }
            return e
        };
        t.prototype.getOwnUnits = function () {
            var e = {};
            for (var t in J) {
                e[J[t]] = 0
            }
            for (var a in this.habitate) {
                var i = this.habitate[a].stats.units.own;
                for (t in i) {
                    e[t] += i[t]
                }
            }
            return e
        };
        t.prototype.calculateFreePeople = function () {
            var e = 0;
            for (var s in this.habitate) {
                var t = this.habitate[s];
                var n = t.stats.resources[a.PEOPLE];
                if (!t.habitatResources) {
                    continue
                }
                var i = t.habitatResources[a.PEOPLE];
                if (!i) {
                    continue
                }
                var r = i.storeAmount;
                var o = Math.floor(r - n);
                e += o
            }
            return e
        };
        t.prototype.setDiscussions = function (t) {
            this.discussions = t;
            this.sortDiscussions()
        };
        t.prototype.sortDiscussions = function () {
            this.discussions.sort(function (t, e) {
                return t.lastEntryDate > e.lastEntryDate ? -1 : +1
            })
        };
        t.prototype.findTransitsByGeneratedTransitId = function (a) {
            for (var s in this.habitate) {
                var e = this.habitate[s];
                for (var t = 0, n = e.habitatTransits.length; t < n; t++) {
                    var i = e.habitatTransits[t];
                    if (i.generatedTransitId === a) {
                        return i
                    }
                }
            }
            return null
        };
        t.prototype.getSortedMissions = function () {
            if (!E) {
                return []
            }
            var t = [];
            for (var e in E) {
                t.push(E[e])
            }
            t.sort(function (t, e) {
                if (t.order < e.order) {
                    return -1
                } else {
                    return 1
                }
            });
            return t
        };
        t.prototype.getSortedHabitate = function (e, t, i, s) {
            e = e || "special";
            t = t || (s ? "dist" : "alpha");
            i = i || "asc";
            var r = i === "dsc" ? true : false,
                a;
            if (e === "special") {
                if (!this._sorters[t] || !this._sorters[t][i]) {
                    return []
                }
                a = this._sorters[t][i];
                if (t === "dist") {
                    for (var o in this.habitate) {
                        var n = this.habitate[o];
                        n._tmpDist = utils.Map.distanceToHabitat(n.mapX, n.mapY, s.mapX, s.mapY)
                    }
                }
            }
            if (e === "unit") {
                a = function (t, e) {
                    return function (i, a) {
                        if (e) {
                            a = [i, i = a][0]
                        }
                        return i.stats.units.own[t] - a.stats.units.own[t]
                    }
                }(t, r)
            }
            if (e === "resource") {
                a = function (t, e) {
                    return function (i, a) {
                        if (e) {
                            a = [i, i = a][0]
                        }
                        return i.stats.resources[t] - a.stats.resources[t]
                    }
                }(t, r)
            }
            if (!_habitatArray || !_habitatArray.length) {
                _habitatArray = [];
                for (var l in this.habitate) {
                    _habitatArray.push(this.habitate[l])
                }
            }
            if (_habitatArray.length > 1) {
                _habitatArray.sort(a)
            }
            return _habitatArray
        };
        t.prototype._sorters = {
            alpha: {
                asc: function (t, e) {
                    return t.name.toLowerCase() < e.name.toLowerCase() ? -1 : +1
                },
                dsc: function (t, e) {
                    return t.name.toLowerCase() < e.name.toLowerCase() ? +1 : -1
                }
            },
            allUnits: {
                asc: function (t, e) {
                    var i = t.habitatResources[a.SILVER].amount;
                    var s = e.habitatResources[a.SILVER].amount;
                    t = utils.dict.sumUp(t.stats.units.own);
                    e = utils.dict.sumUp(e.stats.units.own);
                    if (t === e) {
                        if (i > s) {
                            return -1
                        }
                        if (i < s) {
                            return 1
                        }
                        return 0
                    }
                    if (t < e) {
                        return -1
                    }
                    if (t > e) {
                        return 1
                    }
                    return 0
                },
                dsc: function (t, e) {
                    var i = t.habitatResources[a.SILVER].amount;
                    var s = e.habitatResources[a.SILVER].amount;
                    t = utils.dict.sumUp(t.stats.units.own);
                    e = utils.dict.sumUp(e.stats.units.own);
                    if (t === e) {
                        if (i > s) {
                            return -1
                        }
                        if (i < s) {
                            return 1
                        }
                        return 0
                    }
                    if (t < e) {
                        return 1
                    }
                    if (t > e) {
                        return -1
                    }
                    return 0
                }
            },
            mainResources: {
                asc: function (t, e) {
                    var i = t.habitatResources[a.SILVER].amount;
                    var s = e.habitatResources[a.SILVER].amount;
                    t = utils.dict.sumUp(t.stats.resources, [a.WOOD, a.STONE, a.ORE]);
                    e = utils.dict.sumUp(e.stats.resources, [a.WOOD, a.STONE, a.ORE]);
                    if (t === e) {
                        if (i > s) {
                            return -1
                        }
                        if (i < s) {
                            return 1
                        }
                        return 0
                    }
                    if (t < e) {
                        return -1
                    }
                    if (t > e) {
                        return 1
                    }
                    return 0
                },
                dsc: function (t, e) {
                    var i = t.habitatResources[a.SILVER].amount;
                    var s = e.habitatResources[a.SILVER].amount;
                    t = utils.dict.sumUp(t.stats.resources, [a.WOOD, a.STONE, a.ORE]);
                    e = utils.dict.sumUp(e.stats.resources, [a.WOOD, a.STONE, a.ORE]);
                    if (t === e) {
                        if (i > s) {
                            return -1
                        }
                        if (i < s) {
                            return 1
                        }
                        return 0
                    }
                    if (t < e) {
                        return 1
                    }
                    if (t > e) {
                        return -1
                    }
                }
            },
            dist: {
                asc: function (t, e) {
                    var i = t.habitatResources[a.SILVER].amount;
                    var s = e.habitatResources[a.SILVER].amount;
                    if (t._tmpDist === e._tmpDist) {
                        if (i > s) {
                            return -1
                        }
                        if (i < s) {
                            return 1
                        }
                        return 0
                    }
                    if (t._tmpDist < e._tmpDist) {
                        return -1
                    }
                    if (t._tmpDist > e._tmpDist) {
                        return 1
                    }
                    return 0
                },
                dsc: function (t, e) {
                    var i = t.habitatResources[a.SILVER].amount;
                    var s = e.habitatResources[a.SILVER].amount;
                    if (t._tmpDist === e._tmpDist) {
                        if (i > s) {
                            return -1
                        }
                        if (i < s) {
                            return 1
                        }
                        return 0
                    }
                    if (t._tmpDist < e._tmpDist) {
                        return 1
                    }
                    if (t._tmpDist > e._tmpDist) {
                        return -1
                    }
                    return 0
                }
            }
        };
        return t
    }(s.Master);
    s.Report = function (i) {
        utils.__extends(t, i);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            id: "id",
            type: "type",
            date: "date",
            habitat: "habitat",
            sendingPlayer: "sendingPlayer",
            receivingPlayer: "receivingPlayer",
            published: "published",
            variables: "variables"
        };
        t.prototype._postMapping = {
            id: _.conv.toNumber,
            type: _.conv.toNumber,
            date: _.conv.toDate,
            habitat: e,
            published: _.conv.toBool,
            variables: a
        };
        t.prototype._finaliseData = function () {
            this.serverID = this.id;
            this._parseVariables();
            this.internalCategory = n(this.type, this.battleType)
        };

        function a(t) {
            if (typeof t === "undefined") {
                return {}
            }
            return t
        }

        function n(i, a) {
            if (!i) {
                return null
            }
            var e, t = {};
            t[f.ATTACK_WARNING] = 1;
            t[f.LOST_FOREIGN_DEFENDER] = 1;
            t[f.CONQUEST_FAILED] = 2;
            t[f.CONQUEST] = 2;
            t[f.TRANSIT_RETURNED] = 3;
            t[f.DELIVERED_RESOURCES] = 3;
            t[f.DELIVERED_DEFENSE] = 3;
            t[f.KNOWLEDGE_RESEARCHED] = 4;
            t[f.MISSION_FINISHED] = 5;
            t[f.SPY_FINISHED] = 6;
            t[f.SPY_CAPTURED] = 6;
            t[f.BATTLE_ROUND_FINISHED] = -1;
            e = t[i] || null;
            if (e === -1) {
                e = a === 0 || a === 1 ? 1 : 2
            }
            return e
        }

        function e(e) {
            if (!e) {
                return null
            }
            var t = new s.Habitat(e);
            if (!t.name) {
                t.name = ""
            }
            return t
        }
        t.prototype._parseVariables = function () {
            var t = this.variables;
            this.knowledge = null;
            this.mission = null;
            this.destinationETA = null;
            this.resources = null;
            this.units = null;
            this.buildings = null;
            this.destinationHabitat = null;
            this.sourceHabitat = null;
            this.transitType = null;
            this.battleType = null;
            this.unitsLoss = null;
            this.defenderUnitDictionary = null;
            this.battlePartyDictionary = null;
            this.copperAmount = null;
            this.silverAmount = null;
            this.successful = null;
            this.impactDate = null;
            if (typeof t.knowledgeId !== "undefined") {
                this.knowledge = A[t.knowledgeId]
            }
            if (typeof t.missionId !== "undefined") {
                this.mission = E[t.missionId]
            }
            if (typeof t.destinationETA !== "undefined") {
                this.destinationETA = _.conv.toDate(t.destinationETA)
            }
            if (typeof t.resourceDictionary !== "undefined") {
                this.resources = t.resourceDictionary
            }
            if (typeof t.unitDictionary !== "undefined") {
                this.units = t.unitDictionary
            }
            if (typeof t.buildings !== "undefined") {
                this.buildings = t.buildings
            }
            if (typeof t.destinationHabitat !== "undefined") {
                this.destinationHabitat = e(t.destinationHabitat)
            }
            if (typeof t.sourceHabitat !== "undefined") {
                this.sourceHabitat = e(t.sourceHabitat)
            }
            if (typeof t.transitType !== "undefined") {
                this.transitType = _.conv.toNumber(t.transitType)
            }
            if (typeof t.battleType !== "undefined") {
                this.battleType = _.conv.toNumber(t.battleType)
            }
            if (typeof t.lossDictionary !== "undefined") {
                this.unitsLoss = t.lossDictionary
            }
            if (typeof t.defenderUnitDictionary !== "undefined") {
                this.defenderUnitDictionary = t.defenderUnitDictionary
            }
            if (typeof t.battlePartyDictionary !== "undefined") {
                this.battlePartyDictionary = t.battlePartyDictionary
            }
            if (typeof t.copperAmount !== "undefined") {
                this.copperAmount = _.conv.toNumber(t.copperAmount)
            }
            if (typeof t.silverAmount !== "undefined") {
                this.silverAmount = _.conv.toNumber(t.silverAmount)
            }
            if (typeof t.successful !== "undefined") {
                this.successful = _.conv.toBool(t.successful)
            }
            if (typeof t.impactDate !== "undefined") {
                this.impactDate = _.conv.toDate(t.impactDate)
            }
        };
        return t
    }(s.Master);
    s.Resource = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            primaryKey: "primaryKey",
            identifier: "identifier",
            order: "order"
        };
        t.prototype._postMapping = {
            primaryKey: _.conv.toNumber,
            order: _.conv.toNumber
        };
        return t
    }(s.Master);
    s.Settings = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            maxItemsInBuildingList: "habitatBuildingUpgradeListBoundary",
            maxItemsInRecruitingList: "habitatUnitRecruitingListBoundary",
            tutorialPointOffset: "tutorialPointOffset",
            CDNUrl: "CDNUrl",
            maxAllianceDescriptionLength: "Alliance.descriptionText.length",
            maxDiscussionTitleLength: "Discussion.title.length",
            maxDiscussionEntryContentLength: "DiscussionEntry.content.length",
            maxForumNameLength: "Forum.name.length",
            maxForumMessageContentLength: "ForumMessage.content.length",
            maxForumThreadTopicLength: "ForumThread.topic.length",
            alliancePlayerLimit: "alliance.playerLimit",
            allianceReportDaysOfExpiry: "allianceReportDaysOfExpiry",
            battleDamageModifier: "battleDamageModifier",
            conquerHabitatMultiplier: "conquerHabitatMultiplier",
            habitatBuildingUpgradeListBoundary: "habitatBuildingUpgradeListBoundary",
            habitatUnitRecruitingListBoundary: "habitatUnitRecruitingListBoundary",
            massMarketCastleCount: "massMarketCastleCount",
            massMissionCastleCount: "massMissionCastleCount",
            massRecruitmentCastleCount: "massRecruitmentCastleCount",
            maximumPlayerInvitations: "maximumPlayerInvitations",
            militaryCampDaysValid: "militaryCampDaysValid",
            minAmountForTurnBasedBattleSystem: "minAmountForTurnBasedBattleSystem",
            minimumVacationHours: "minimumVacationHours",
            nameMaximumLength: "nameMaximumLength",
            nameMinimumLength: "nameMinimumLength",
            allianceNameLengthMin: "allianceNameLengthMin",
            allianceNameLengthMax: "allianceNameLengthMax",
            habitatNameLengthMin: "habitatNameLengthMin",
            habitatNameLengthMax: "habitatNameLengthMax",
            playerNameLengthMin: "playerNameLengthMin",
            playerNameLengthMax: "playerNameLengthMax",
            newbieProtectionDays: "newbieProtectionDays",
            nightDefenseEndHour: "nightDefenseEndHour",
            nightDefenseModifier: "nightDefenseModifier",
            nightDefenseStartHour: "nightDefenseStartHour",
            npcHabitatAllowedBuildingUpgradeArray: "npcHabitatAllowedBuildingUpgradeArray",
            npcHabitatBuildingUpgradesPerInterval: "npcHabitatBuildingUpgradesPerInterval",
            npcHabitatMaxUpgradePoints: "npcHabitatMaxUpgradePoints",
            npcHabitatUpgradeInterval: "npcHabitatUpgradeInterval",
            passwordMaximumLength: "passwordMaximumLength",
            passwordMinimumLength: "passwordMinimumLength",
            rankingCacheAge: "rankingCacheAge",
            reportDaysOfExpiry: "reportDaysOfExpiry",
            secondsBetweenBattleRounds: "secondsBetweenBattleRounds",
            serverVersion: "serverVersion",
            spyAttackSecondsPerField: "spyAttackSecondsPerField",
            vacationDelayHours: "vacationDelayHours",
            yearlyVacationHours: "yearlyVacationHours",
            nightModusActive: "nightModusActive",
            transportNobleMetal: "transportNobleMetal"
        };
        t.prototype._postMapping = {
            maxItemsInBuildingList: _.conv.toNumber,
            maxItemsInRecruitingList: _.conv.toNumber,
            tutorialPointOffset: _.conv.toNumber,
            maxAllianceDescriptionLength: _.conv.toNumber,
            maxDiscussionTitleLength: _.conv.toNumber,
            maxDiscussionEntryContentLength: _.conv.toNumber,
            maxForumNameLength: _.conv.toNumber,
            maxForumMessageContentLength: _.conv.toNumber,
            maxForumThreadTopicLength: _.conv.toNumber,
            alliancePlayerLimit: _.conv.toNumber,
            allianceReportDaysOfExpiry: _.conv.toNumber,
            battleDamageModifier: _.conv.toNumber,
            conquerHabitatMultiplier: _.conv.toNumber,
            habitatBuildingUpgradeListBoundary: _.conv.toNumber,
            habitatUnitRecruitingListBoundary: _.conv.toNumber,
            massMarketCastleCount: _.conv.toNumber,
            massMissionCastleCount: _.conv.toNumber,
            massRecruitmentCastleCount: _.conv.toNumber,
            maximumPlayerInvitations: _.conv.toNumber,
            militaryCampDaysValid: _.conv.toNumber,
            minAmountForTurnBasedBattleSystem: _.conv.toNumber,
            minimumVacationHours: _.conv.toNumber,
            nameMaximumLength: _.conv.toNumber,
            nameMinimumLength: _.conv.toNumber,
            allianceNameLengthMin: _.conv.toNumber,
            allianceNameLengthMax: _.conv.toNumber,
            habitatNameLengthMin: _.conv_toNumber,
            habitatNameLengthMax: _.conv_toNumber,
            playerNameLengthMin: _.conv_toNumber,
            playerNameLengthMax: _.conv_toNumber,
            newbieProtectionDays: _.conv.toNumber,
            nightDefenseEndHour: _.conv.toNumber,
            nightDefenseModifier: _.conv.toNumber,
            nightDefenseStartHour: _.conv.toNumber,
            npcHabitatBuildingUpgradesPerInterval: _.conv.toNumber,
            npcHabitatMaxUpgradePoints: _.conv.toNumber,
            npcHabitatUpgradeInterval: _.conv.toNumber,
            passwordMaximumLength: _.conv.toNumber,
            passwordMinimumLength: _.conv.toNumber,
            rankingCacheAge: _.conv.toNumber,
            reportDaysOfExpiry: _.conv.toNumber,
            secondsBetweenBattleRounds: _.conv.toNumber,
            spyAttackSecondsPerField: _.conv.toNumber,
            vacationDelayHours: _.conv.toNumber,
            yearlyVacationHours: _.conv.toNumber,
            nightModusActive: _.conv.toBool,
            transportNobleMetal: _.conv.toBool
        };
        t.prototype._finaliseData = function () {
            this.maxRankingListItemsPerPage = 50;
            this.massBuildingCastleCount = 1
        };
        return t
    }(s.Master);
    s.Stringtable = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            manifestUrl: "manifestUrl",
            urlLang: "urlLang",
            lang: "lang"
        };
        t.prototype.setUpTable = function () {
            var i = this.manifestUrl,
                t = this.urlLang;
            var e = function (t, e) {
                if (e) {
                    t += "?hash=" + e
                }
                $.ajax({
                    url: t,
                    async: false,
                    success: function (t) {
                        this.table = t
                    }.bind(this)
                })
            }.bind(this);
            $.ajax({
                url: i,
                async: false,
                success: function (i) {
                    var a = i[oe + ".json"];
                    e(t, a)
                }.bind(this),
                error: function () {
                    e(t)
                }.bind(this)
            })
        };
        t.prototype.getValueOf = function (e) {
            var t = this.table[e];
            if (!t) {
                t = "??" + e + "??"
            }
            return t
        };
        t.prototype.setValueOf = function (t, e) {
            this.table[t] = e
        };
        return t
    }(s.Master);
    s.Transit = function (a) {
        utils.__extends(e, a);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype._dataKeys = {
            id: "id",
            habitatId: "habitatId",
            transitType: "transitType",
            destinationETA: "destinationETA",
            resources: "resourceDictionary",
            units: "unitDictionary",
            sourceHabitat: "sourceHabitat",
            destinationHabitat: "destinationHabitat"
        };
        e.prototype._postMapping = {
            id: _.conv.toNumber,
            habitatId: _.conv.toNumber,
            transitType: _.conv.toNumber,
            destinationETA: _.conv.toDate,
            sourceHabitat: i,
            destinationHabitat: i,
            units: n
        };
        e.prototype._finaliseData = function () {
            this.slowestUnit = r(this.units);
            this.generatedTransitId = l(this.habitatId, this.destinationETA);
            this.formattedETA = o(this.destinationETA)
        };

        function i(t) {
            if (!t) {
                return
            }
            return new s.Habitat(t)
        }

        function n(a) {
            var e = [],
                s, t;
            s = function (e) {
                return e.primaryKey === t.primaryKey
            };
            for (var n in a) {
                var o = a[n];
                t = y[n].clone();
                t.setCount(o);
                e.push(t)
            }
            for (var l in y) {
                var r, i;
                t = y[l];
                r = e.filter(s);
                if (r.length) {
                    continue
                }
                i = t.clone();
                i.setCount(0);
                e.push(i)
            }
            return e.sort(function (t, e) {
                return t.order < e.order ? -1 : +1
            })
        }

        function r(t) {
            if (!t || !t.length) {
                return null
            }
            var e = t[0];
            for (var i = 0, s = t.length; i < s; i++) {
                var a = t[i];
                if (a.count === 0) {
                    continue
                }
                if (a.secondsPerField > e.secondsPerField) {
                    e = a;
                    break
                }
            }
            return e
        }

        function o(t) {
            if (t instanceof Date) {
                t = utils.date.formatDateTime(t)
            }
            return t
        }

        function l(t, e) {
            return t + "_" + e.toString().replace(/\s/g, "_")
        }
        e.prototype.getIconData = function () {
            if (this.transitType === v.DEFENSE) {
                return {
                    imageName: "transitDefense",
                    imageCategory: "icons",
                    syncIconName: this.sourceHabitat && t.habitate[this.sourceHabitat.id] ? "defenseSyncWhite" : undefined
                }
            } else if (this.transitType === v.TRANSIT_DEFENSE) {
                return {
                    imageName: "TransitDefenseReturn",
                    imageCategory: "reportIcons"
                }
            } else if (this.transitType === v.ATTACKER) {
                return {
                    imageName: "transitAttack",
                    imageCategory: "icons",
                    syncIconName: this.sourceHabitat && t.habitate[this.sourceHabitat.id] ? "attackSyncWhite" : undefined
                }
            } else if (this.transitType === v.TRANSIT_ATTACKER) {
                return {
                    imageName: "TransitAttackReturn",
                    imageCategory: "reportIcons"
                }
            } else if (this.transitType === v.TRANSPORT) {
                return {
                    imageName: "transport",
                    imageCategory: "icons"
                }
            } else if (this.transitType === v.TRANSIT_TRANSPORT) {
                return {
                    imageName: "TransitTransportReturn",
                    imageCategory: "reportIcons"
                }
            } else if (this.transitType === v.SPY) {
                return {
                    imageName: "transitSpy",
                    imageCategory: "icons"
                }
            } else if (this.transitType === v.TRANSIT_SPY) {
                return {
                    imageName: "TransitSpyReturn",
                    imageCategory: "reportIcons"
                }
            }
        };
        e.prototype.getTitle = function () {
            var t, e;
            if (this.sourceHabitat) {
                t = utils.sanitize(this.sourceHabitat.name)
            }
            if (this.destinationHabitat) {
                e = utils.sanitize(this.destinationHabitat.name)
            }
            if (this.sourceHabitat && this.destinationHabitat) {
                return t + " &rarr; " + e
            } else if (this.sourceHabitat) {
                return t
            } else if (this.destinationHabitat) {
                return e
            }
        };
        return e
    }(s.Master);
    s.Unit = function (i) {
        utils.__extends(t, i);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            primaryKey: "primaryKey",
            order: "order",
            identifier: "identifier",
            buildResources: "buildResourceDictionary",
            buildDuration: "buildDuration",
            buildSpeedupCost: "buildSpeedupCost",
            volumeResource: "volumeResource",
            volumeAmount: "volumeAmount",
            storeAmount: "storeAmount",
            secondsPerField: "secondsPerField",
            corps: "corps",
            battleValues: "battleValueDictionary",
            requiredKnowledges: "requiredKnowledgeArray",
            storeResources: "storeResourceArray"
        };
        t.prototype._postMapping = {
            primaryKey: _.conv.toNumber,
            order: _.conv.toNumber,
            buildDuration: _.conv.toNumber,
            buildSpeedupCost: _.conv.toNumber,
            volumeResource: _.conv.toNumber,
            volumeAmount: _.conv.toNumber,
            storeAmount: _.conv.toNumber,
            secondsPerField: _.conv.toNumber,
            storeResources: s,
            requiredKnowledges: n
        };
        t.prototype._finaliseData = function () {
            this.imageCategory = "units";
            this.count = 0
        };

        function s(t) {
            return _.conv.mapWithDictionary(t, ee)
        }

        function n(t) {
            return _.conv.mapWithDictionary(t, A)
        }
        t.prototype.setCount = function (t) {
            this.count = t
        };
        t.prototype.getDescription = function () {
            return translate("BKServerUnit-" + this.primaryKey)
        };
        t.prototype.getSecondsPerField = function (t) {
            return e(xe.MOVEMENTSPEED, this.secondsPerField, t)
        };
        t.prototype.getBuildDuration = function (t) {
            return e(xe.BUILDSPEED, this.buildDuration, t)
        };

        function e(n, t, e) {
            if (!e) {
                return t || 0
            }
            var i = 1;
            for (var a = 0, r = e.habitatModifier.length; a < r; a++) {
                var s = e.habitatModifier[a],
                    o = s.type === n,
                    l = !! ~s.targets.indexOf("Unit");
                if (o && l) {
                    i += s.percentage - 1
                }
            }
            return i === 1 ? t : Math.floor(t * i)
        }
        t.prototype.getMaxRecruiting = function (e) {
            if (!e) {
                return 0
            }
            var t = 999999,
                i = e.habitatResources[a.PEOPLE],
                o = i.storeAmount - i.amount;
            for (var s in this.buildResources) {
                var l = this.buildResources[s],
                    u = e.habitatResources[s],
                    n = u.amount / l;
                if (n < t) {
                    t = n
                }
            }
            var r = o / this.volumeAmount;
            if (r < t) {
                t = r
            }
            return Math.floor(t)
        };
        t.prototype.isRecruitable = function (t) {
            if (!t) {
                return false
            }
            if (this.requiredKnowledges) {
                for (var e in this.requiredKnowledges) {
                    var i = this.requiredKnowledges[e];
                    if (!t.habitatKnowledges[i.primaryKey]) {
                        return false
                    }
                }
            }
            if (this.primaryKey === J.OXCART) {
                var a = t.getMarket();
                if (!a.units[J.OXCART]) {
                    return false
                }
            }
            return true
        };
        t.prototype.applyAllModifiers = function (e) {
            var s = $.extend({}, this.buildResources),
                n = this.getBuildDuration(e),
                r = this.getSecondsPerField(e),
                t = this.battleValues;
            for (var a = 0; a < e.habitatModifier.length; a++) {
                var i = e.habitatModifier[a];
                if ( !! ~i.targets.indexOf("Unit")) {
                    switch (i.type) {
                    case xe.OFFENSE:
                        t = this._applyBattleValueModifier("offense", i, t);
                        break;
                    case xe.DEFENSE:
                        t = this._applyBattleValueModifier("defense", i, t);
                        break
                    }
                }
            }
            return {
                buildResources: s,
                buildDuration: n,
                secondsPerField: r,
                battleValues: t,
                primaryKey: this.primaryKey,
                order: this.order,
                identifier: this.identifier,
                buildSpeedupCost: this.buildSpeedupCost,
                volumeResource: this.volumeResource,
                volumeAmount: this.volumeAmount,
                storeAmount: this.storeAmount,
                storeResources: this.storeResources,
                corps: this.corps,
                requiredKnowledges: this.requiredKnowledges,
                count: this.count,
                imageCategory: this.imageCategory
            }
        };
        t.prototype._applyBattleValueModifier = function (a, t, e) {
            if (t.corps === null || typeof t.corps === "string" && t.corps === this.corps) {
                for (var i = 0; i < e.length; i++) {
                    e[i].offense = Math.round(e[i][a] * +t.percentage)
                }
            }
            return e
        };
        return t
    }(s.Master);
    s.UnitOrder = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._dataKeys = {
            id: "id",
            unit: "unitId",
            complete: "complete",
            nextUnitComplete: "nextUnitComplete",
            durationFactor: "durationFactor",
            durationPerUnitInSeconds: "durationPerUnitInSeconds",
            orderAmount: "orderAmount"
        };
        t.prototype._postMapping = {
            id: _.conv.toNumber,
            complete: _.conv.toDate,
            nextUnitComplete: _.conv.toDate,
            durationFactor: _.conv.toNumber,
            durationPerUnitInSeconds: _.conv.toNumber,
            orderAmount: _.conv.toNumber,
            unit: i
        };
        t.prototype._finaliseData = function () {
            this.amountDone = 0
        };

        function i(t) {
            var e = null;
            if (typeof y !== "undefined" && typeof y[t] !== "undefined") {
                e = y[t]
            }
            return e
        }
        t.prototype.isSpeededup = function () {
            return this.durationFactor === .5
        };
        t.prototype.isHalfDurationReached = function () {
            var e = (this.complete - (new Date - W)) / 1e3;
            var i = this.durationPerUnitInSeconds * this.orderAmount;
            var t = e - i;
            if (t < 0) {
                t = 0
            }
            return e < i / 2 + t
        };
        return t
    }(s.Master);
    u = new s.Settings({
        maxItemsInBuildingList: 2,
        maxItemsInRecruitingList: 2,
        tutorialPointOffset: 20,
        CDNUrl: "http://cdn.lordsandknights.com/"
    });
    ii = function (i) {
        utils.__extends(e, Oe);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addOption("zoomMin", .5);
            this.addOption("zoomMax", 2);
            this.addOption("blinkingSpeed", 100);
            this.setOptions(t);
            this.lastMouse = {
                x: -1 * $(document).width() / 2,
                y: -1 * $(document).height() / 2
            };
            this.blinkingTimer = null
        }
        e.prototype.dataUpdate = function (t, i) {
            this.view.stopBlinking();
            e.__super__.dataUpdate.apply(this, arguments)
        };
        e.prototype.setZoom = function (t) {
            if (t > this.zoomMin && t < this.zoomMax) {
                this.view.zoom = t;
                if (this.mouse.x != this.lastMouse.x || this.mouse.y != this.lastMouse.y) {
                    if (!this.view.fastMap) {
                        this.view.setOffset({
                            x: this.view.offset.x - this.mouse.x + this.lastMouse.x,
                            y: this.view.offset.y - this.mouse.y + this.lastMouse.y
                        })
                    }
                    this.lastMouse = this.mouse
                }
                this.view.pointOfZoomOffset.x = this.mouse.x / t;
                this.view.pointOfZoomOffset.y = this.mouse.y / t
            }
        };
        e.prototype["ynLYP3VF"] = function (t, e) {
            return this.getTileNormalMap(t, e)
        };
        e.prototype.getTileNormalMap = function (r, s) {
            var a, e = {}, o = 0;
            var i;
            var n, c;
            var l;
            var f = this.notify("7v%5T22p", this);
            var p = [1, 1, 0, 0, 0, 0, 0, 0, 2, 2, 0];
            var u = p[s.bgTileTyp];
            if (s.habitatID === 0) {
                a = r.images.ground[s.bgTileTyp]
            } else {
                e = this.datasource.getHabitatInfoForID(s.habitatID);
                if (!e) {
                    return null
                }
                if (parseInt(e.points, 10) >= 110) {
                    o = 1
                }
                if (typeof e.player != "undefined") {
                    if (u === 0) {
                        a = r.images.castles[0 + o]
                    } else if (u == 1) {
                        a = r.images.castles[2 + o]
                    } else {
                        a = r.images.castles[4 + o]
                    }
                } else {
                    if (u === 0) {
                        a = r.images.free[0 + o]
                    } else if (u == 1) {
                        a = r.images.free[2 + o]
                    } else {
                        a = r.images.free[4 + o]
                    }
                }
                e.bgColor = M.NEUTRAL.BG;
                e.fgColor = M.NEUTRAL.FG;
                e.blinking = false;
                if (typeof t == "undefined") {
                    return {
                        image: a,
                        info: e
                    }
                }
                for (n in t.habitate) {
                    for (i = 0; i < t.habitate[n].habitatTransits.length; i++) {
                        c = t.habitate[n].habitatTransits[i];
                        if (c.destinationHabitat.id == s.habitatID && c.transitType == v.ATTACKER) {
                            if (s.habitatID == n) {
                                e.fgColor = M.ATTACKED.FG;
                                e.bgColor = M.ATTACKED.BG;
                                e.blinking = true;
                                this.view.startBlinkingCastle(s.habitatID, M.ATTACKED.BG_BLINK, e.mapX, e.mapY);
                                return {
                                    image: a,
                                    info: e
                                }
                            }
                            e.fgColor = M.ATTACKER.FG;
                            e.bgColor = M.ATTACKER.BG;
                            e.blinking = true;
                            this.view.startBlinkingCastle(s.habitatID, M.ATTACKER.BG_BLINK, e.mapX, e.mapY);
                            return {
                                image: a,
                                info: e
                            }
                        }
                    }
                    for (i = 0; i < t.habitate[n].externalHabitatUnits.length; i++) {
                        l = t.habitate[n].externalHabitatUnits[i];
                        if (l.battleType == C.ATTACKER && l.habitat.id == s.habitatID) {
                            e.fgColor = M.ATTACKER.FG;
                            e.bgColor = M.ATTACKER.BG;
                            e.blinking = true;
                            this.view.startBlinkingCastle(s.habitatID, M.ATTACKER.BG_BLINK, e.mapX, e.mapY);
                            return {
                                image: a,
                                info: e
                            }
                        }
                    }
                    for (i = 0; i < t.habitate[n].habitatUnits.length; i++) {
                        l = t.habitate[n].habitatUnits[i];
                        if (l.battleType == C.ATTACKER && l.habitat.id == s.habitatID) {
                            e.fgColor = M.ATTACKED.FG;
                            e.bgColor = M.ATTACKED.BG;
                            e.blinking = true;
                            this.view.startBlinkingCastle(s.habitatID, M.ATTACKED.BG_BLINK, e.mapX, e.mapY);
                            return {
                                image: a,
                                info: e
                            }
                        }
                    }
                }
                for (n in t.habitate) {
                    if (parseInt(n, 10) == s.habitatID) {
                        e.fgColor = M.OWN.FG;
                        e.bgColor = M.OWN.BG;
                        return {
                            image: a,
                            info: e
                        }
                    }
                }
                if (typeof e.player == "undefined" || typeof e.player.alliance == "undefined") {
                    return {
                        image: a,
                        info: e
                    }
                }
                if (!t.hasAlliance()) {
                    return {
                        image: a,
                        info: e
                    }
                }
                var d = e.player.alliance.id,
                    y;
                if (t.alliance && t.alliance.diplomacyToArray) {
                    var h = t.alliance.diplomacyToArray;
                    for (i = 0; i < h.length; i++) {
                        if (d == h[i].id) {
                            switch (h[i].relationship.toString()) {
                            case "-1":
                                e.fgColor = M.ENEMY.FG;
                                e.bgColor = M.ENEMY.BG;
                                break;
                            case "0":
                                break;
                            case "1":
                                e.fgColor = M.NAP.FG;
                                e.bgColor = M.NAP.BG;
                                break;
                            case "2":
                                e.fgColor = M.ALLY.FG;
                                e.bgColor = M.ALLY.BG;
                                break;
                            case "3":
                                e.fgColor = M.VASALL.FG;
                                e.bgColor = M.VASALL.BG;
                                break;
                            default:
                                break
                            }
                        }
                    }
                    if (d == t.alliance.id) {
                        e.fgColor = M.ALLIANCE.FG;
                        e.bgColor = M.ALLIANCE.BG
                    }
                }
            }
            return {
                image: a,
                info: e
            }
        };
        e.prototype["3JZYrRFZ"] = function (t) {
            if (this.blinkingTimer) {
                return
            }
            this.blinkingTimer = new Je(this, {
                interval: this.blinkingSpeed,
                useDOM: false
            });
            this.blinkingTimer.add(t)
        };
        e.prototype["NRMRF%fF"] = function (t) {
            if (this.blinkingTimer) {
                this.blinkingTimer.stop()
            }
            this.blinkingTimer = null
        };
        return e
    }(Oe);
    ei = function (i) {
        utils.__extends(e, Oe);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addOption("zoomMin", .5);
            this.addOption("zoomMax", 1.25);
            this.setOptions(t);
            this.markedCastles = []
        }
        e.prototype.setZoom = function (t, e) {
            if (t > this.zoomMin && t < this.zoomMax) {
                this.view.zoom = t
            }
        };
        e.prototype["gloYlKk6"] = function (i, a) {
            var t = e.__super__["gloYlKk6"].apply(this, arguments);
            if (t !== null) {
                this.notify("1mA0BwR5", this, {
                    x: t.mapX,
                    y: t.mapY
                })
            }
        };
        e.prototype["ynLYP3VF"] = function (t, e) {
            return this.getTileOverviewMap(t, e)
        };
        e.prototype.getTileOverviewMap = function (l, r) {
            var e;
            var i = r.habitatID;
            if (i === null) {
                return null
            } else {
                e = re.NEUTRAL;
                if (this.markedCastles.indexOf(i.id) != -1) {
                    return {
                        color: re.MARKED
                    }
                }
                for (var o in t.habitate) {
                    if (o == i.id) {
                        return {
                            color: re.OWN
                        }
                    }
                }
                if (i.playerid === "") {
                    return {
                        color: re.FREE
                    }
                }
                if (i.allianceid === "") {
                    return {
                        color: re.NEUTRAL
                    }
                }
                if (!t.hasAlliance()) {
                    return {
                        color: re.NEUTRAL
                    }
                }
                var n = i.allianceid,
                    u;
                if (t.alliance && t.alliance.diplomacyToArray) {
                    var s = t.alliance.diplomacyToArray;
                    for (var a = 0; a < s.length; a++) {
                        if (+n === +s[a].id) {
                            switch (s[a].relationship.toString()) {
                            case "-1":
                                e = re.ENEMY;
                                break;
                            case "0":
                                break;
                            case "1":
                                e = re.NAP;
                                break;
                            case "2":
                                e = re.ALLY;
                                break;
                            case "3":
                                e = re.VASALL;
                                break;
                            default:
                                break
                            }
                        }
                    }
                    if (n == t.alliance.id) {
                        e = re.ALLIANCE
                    }
                }
            }
            return {
                color: e
            }
        };
        e.prototype.setMarkedCastles = function (t) {
            this.markedCastles = t
        };
        return e
    }(Oe);
    (function (t) {
        function e(t, r, e, i, a) {
            var l = t.id || 0,
                n = true,
                s;
            if (typeof o !== "undefined" && typeof e === "undefined") {
                e = translate("BKClient")
            }
            if (a === "alert") {
                n = false;
                a = i;
                i = function () {}
            }
            s = {
                title: e,
                content: r,
                modal: true,
                confirmButton: n,
                success: i,
                failure: a,
                uniqueKey: l
            };
            if (typeof t.controller !== "undefined") {
                t.notify("w9Uztjx2", t, s)
            } else {
                t["w9Uztjx2"](t, s)
            }
        }

        function i(t, i, a, s) {
            e(t, i, a, s, "alert")
        }

        function a(t, a, e) {
            if (!t) {
                return t
            }
            a = typeof a !== "undefined" ? a : 18;
            e = typeof e !== "undefined" ? e : 5;
            var n = t.length,
                s = "unchanged",
                i = n - a,
                r = a + 6;
            if (i > 0 && i < e) {
                s = "dynamic-title-" + i
            } else if (i > e) {
                s = "dynamic-title truncated";
                t = t.substring(0, r) + "&#133;"
            } else if (i === e) {
                s = "dynamic-title-" + (i - 1)
            }
            return '<span class="' + s + '">' + t + "</span>"
        }
        t.utils.dialog = {};
        t.utils.dialog.alert = i;
        t.utils.dialog.confirm = e;
        t.utils.dynamicTitle = a
    })(this);
    (function (t) {
        if (!t.helpers) {
            t.helpers = {}
        }
        ie.getRelationshipString = function (e) {
            var t = translate("Neutral");
            if (e === 2) {
                t = translate("Allies")
            } else if (e === 1) {
                t = translate("NAP")
            } else if (e === -1) {
                t = translate("Enemy")
            } else if (e === 3) {
                t = translate("Vassal / Feudal Lord")
            }
            return t
        };
        ie.getRelationshipImage = function (e) {
            var t = "neutral";
            if (e === 2) {
                t = "ally"
            } else if (e === 1) {
                t = "nap"
            } else if (e === -1) {
                t = "enemy"
            } else if (e === 3) {
                t = "liege"
            }
            return t
        }
    })(this);
    ti = function (i) {
        utils.__extends(e, i);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.setOptions(t)
        }
        e.prototype._createController = function (i, a, t) {
            t = t || this.controller;
            var e = new i(t, a);
            t.addSubController(e);
            return e
        };
        e.prototype._connectDatasource = function (a, i, t) {
            t = t || this.controller;
            var e = new a(t);
            i.linkDataSource(e);
            e.addSubscriber(i);
            t.addDatasource(e);
            return e
        };
        e.prototype._attachView = function (a, t, e, s) {
            e = e || {};
            var i = new a(t, e);
            t.add(i);
            if (s) {
                t.draw();
                if (typeof t["PjmTAnYn"] !== "undefined") t["PjmTAnYn"]()
            }
            return i
        };
        e.prototype._join = function (e, i, a, s, n) {
            var t = this._createController(e, i);
            var r = this._connectDatasource(a, t);
            var o = this._attachView(s, t, n, true);
            return {
                controller: t,
                view: o,
                datasource: r
            }
        };
        e.prototype.createProfileWindow = function () {
            var t = this._join(Y.Controller, {
                name: "Player"
            }, Y.DataSource, Y.View, {
                styles: "win profile",
                name: "profileView",
                headlineContent: "<span>" + translate("Player") + "</span>"
            });
            t.datasource.loadProfile();
            return t.controller
        };
        e.prototype.createAllianceWindow = function () {
            var e = this._join(r.Controller, {
                name: "Alliance",
                group: "alliance"
            }, r.DataSource, r.Window, {
                styles: "win alliance",
                headlineContent: "<span>" + o.getValueOf("Alliance") + "</span>",
                minimumWindowHeight: 108
            });
            e.datasource.setData(t.alliance);
            return e.controller
        };
        e.prototype.createForumWindow = function () {
            var e = this._join(q.Controller, {
                name: "Forum"
            }, r.DataSource, q.Messages, {
                styles: "win forum",
                headlineContent: "<span>" + o.getValueOf("Alliance Forum") + "</span>"
            });
            e.datasource.setData(t.alliance);
            return e.controller
        };
        e.prototype.createMessagesWindow = function () {
            var t = this._join(H.Controller, {
                name: "Messages"
            }, H.DataSource, H.Window, {
                styles: "win messages",
                headlineContent: "<span>" + o.getValueOf("Messages") + "</span>"
            });
            t.datasource.refresh();
            return t.controller
        };
        e.prototype.createBuildingsWindow = function () {
            var t = this._join(fe.Controller, {
                name: "Buildings",
                group: "globalActionList"
            }, fe.DataSource, fe.View, {
                styles: "win buildingList",
                headlineContent: "<span>" + o.getValueOf("Running Building Upgrades") + "</span>",
                minimumWindowHeight: 100
            });
            t.datasource.modelUpdate();
            return t.controller
        };
        e.prototype.createRecruitmentWindow = function () {
            var t = this._join(ae.Controller, {
                name: "Recruitment",
                group: "globalActionList"
            }, ae.DataSource, ae.Window, {
                styles: "win recruitingList",
                headlineContent: "<span>" + o.getValueOf("Unit Orders") + "</span>",
                minimumWindowHeight: 100
            });
            t.datasource.loadRecruitingList();
            return t.controller
        };
        e.prototype.createGlobalTroopMovements = function () {
            var t = this._join(x.Controller, {
                name: "TroopOverview",
                group: "globalActionList"
            }, x.DataSource, x.Window, {
                styles: "win troopMovements",
                headlineContent: "<span>" + o.getValueOf("Troop overview") + "</span>",
                minimumWindowHeight: 100
            });
            t.controller.init();
            return t.controller
        };
        e.prototype.createGlobalMarketWindow = function () {
            var t = this._join(B.Controller, {
                name: "globalMarket",
                group: "globalActionList"
            }, B.DataSource, B.Window, {
                styles: "win globalMarket",
                headlineContent: translate("Market"),
                minimumWindowHeight: 166
            });
            t.datasource.loadDefaultMarket();
            return t.controller
        };
        e.prototype.createGlobalMissionsWindow = function () {
            var t = this._join(z.Controller, {
                name: "globalMissions",
                group: "globalActionList"
            }, z.DataSource, z.Window, {
                styles: "win globalMissions",
                headlineContent: translate("Missions"),
                minimumWindowHeight: 145
            });
            t.datasource.loadMissions();
            return t.controller
        };
        e.prototype.createShopWindow = function (t, e) {
            var i = {
                name: "gold"
            };
            var a = {
                styles: "win shop",
                headlineContent: "<span>" + o.getValueOf("Gold") + "</span>",
                resizeable: false
            };
            if (t) $.extend(i, t);
            if (e) $.extend(a, e);
            var s = this._join(g.Controller, i, g.DataSource, g.Window, a);
            s.datasource.loadCountries();
            return s.controller
        };
        e.prototype.createPlayerInfoWindow = function () {
            if (typeof g.PlayerInfoController === "undefined") return null;
            var t = this._join(g.PlayerInfoController, {
                name: "playerInfos"
            }, g.DataSource, g.PlayerInfo, {
                styles: "win playerInfo",
                headlineContent: translate("Details"),
                resizeable: false,
                closable: false,
                staticPosition: true
            });
            return t.controller
        };
        e.prototype.createCastleListWindow = function () {
            var t = this._join(F.Controller, {
                name: "castleList",
                group: "globalActionList"
            }, F.DataSource, F.View, {
                styles: "win castleList",
                headlineContent: "<span>" + o.getValueOf("Habitat list") + "</span>",
                hasSortBar: true,
                showSummary: true
            });
            t.datasource.modelUpdate();
            return t.controller
        };
        e.prototype.createSelectCastleWindow = function (t) {
            var e = this._join(F.Controller, {
                name: "selectCastle_" + t.habitat.id,
                group: "lastRaidController"
            }, F.DataSource, F.View, {
                styles: "win castleList",
                headlineContent: "<span>" + o.getValueOf("Habitat list") + "</span>",
                hasSortBar: true,
                showSummary: false,
                castleSelectMessage: "IqJr%3cr",
                foreignHabitat: t.habitat
            });
            e.datasource.setForeignHabitat(t.habitat);
            e.datasource.modelUpdate();
            return e.controller
        };
        e.prototype.createLastRaidWindow = function (t) {
            if (!t.habitat.name) {
                t.habitat.name = translate("Renegade") + " " + t.habitat.id
            }
            var e = this._join(D.LastRaidController, {
                name: "ForeignHabitat_lastRaid_" + t.habitat.id,
                group: "lastRaidController",
                habitat: t.habitat
            }, D.DataSource, D.LastRaidWindow, {
                styles: "win lastRaid",
                headlineContent: t.habitat.name + " (" + t.habitat.points + ")",
                habitat: t.habitat,
                lastRaid: t.lastRaid
            });
            e.datasource.modelUpdate();
            return e.controller
        };
        e.prototype.createForeignActionWindow = function (t) {
            if (!t.foreignHabitat.name) {
                t.foreignHabitat.name = translate("Renegade") + " " + t.foreignHabitat.id
            }
            var e = this._join(D.ActionController, {
                name: t.controllerName,
                group: "ForeignHabitatActionController",
                habitat: t.foreignHabitat,
                exclusionIDs: t.exclusionIDs,
                miniController: t.controller,
                syncTransit: t.syncTransit
            }, D.DataSource, D.ActionWindow, {
                styles: "win foreignAction " + t.action,
                action: t.action,
                headlineContent: utils.sanitize(t.foreignHabitat.name) + " (" + t.foreignHabitat.points + ")",
                foreignHabitat: t.foreignHabitat,
                isFreeCastle: t.isFreeCastle,
                hasSortBar: true,
                destinationETA: t.destinationETA
            });
            e.datasource.setAction(t.action);
            e.datasource.setForeignHabitat(t.foreignHabitat);
            if (t.destinationETA) {
                e.datasource.setSyncData(t.destinationETA)
            }
            e.datasource.modelUpdate();
            return e.controller
        };
        e.prototype.createForeignHabitatWindow = function (t) {
            var e = this._join(D.Controller, {
                habitat: t,
                foreign: true,
                name: t.id,
                group: "ForeignHabitatController"
            }, D.DataSource, D.Window, {
                styles: "win foreignHabitat",
                habitat: t,
                hidden: false,
                showMiniWindow: false,
                resizeable: true
            });
            e.datasource.setData(t);
            return e.controller
        };
        e.prototype.createTransactionWindow = function (e) {
            var t = this._join(g.TransactionController, {
                name: "transactionController",
                group: "globalActionList"
            }, g.TransactionDatasource, g.TransactionWindow, {
                styles: "win playerInfo",
                headlineContent: translate("Details"),
                resizeable: false,
                closeable: false,
                staticPosition: true
            });
            t.datasource.pollTransactionState(e);
            return t.controller
        };
        e.prototype.createSuccessWindow = function (t) {
            var e = this._join(g.SuccessController, {
                name: "successController",
                group: "globalActionList"
            }, g.TransactionDatasource, g.SuccessWindow, {
                styles: "win successWindow",
                headlineContent: translate("shop.shop"),
                resizeable: false,
                closeable: false,
                staticPosition: true,
                success: t.success,
                showIcon: t.showIcon
            });
            return e.controller
        };
        e.prototype.createSettingsWindow = function () {
            var t = this.notify("Hj0tSQ-A", this);
            var e = this._join(ve.Controller, {
                name: "Settings"
            }, Y.DataSource, ve.Window, {
                styles: "win settingsWindow",
                name: "Settings",
                headlineContent: "<span>" + translate("Preferences") + "</span>",
                volumes: t ? t.getVolume() : null,
                resizeable: false
            });
            return e.controller
        };
        return e
    }(V);
    (function (i) {
        function e() {
            return _.storeLocal.createKey("lr")
        }
        var t = {};
        t["ddBiE8_C"] = function (i, t) {
            _.storeLocal.setJSON(e(), t)
        };
        t["8lU2br-q"] = function (t) {
            return _.storeLocal.getJSON(e())
        };
        t["a-0&ZL8y"] = function (e) {
            if (t["8lU2br-q"]() !== null) {
                return true
            }
            return false
        };
        t["xg1xV7cY"] = function (i) {
            var e = i.foreignHabitat;
            var a = "ForeignHabitat_lastRaid_" + e.id;
            var t = this.findControllerByName(a);
            if (t !== null) {
                t.view.show(!t.view.hidden);
                return t
            }
            this.windowFactory.createLastRaidWindow({
                habitat: e,
                lastRaid: this["8lU2br-q"]()
            })
        };
        t["1YZFdYsA"] = function (e, a) {
            var i = e.habitat.id,
                t = this.findControllerByName("selectCastle_" + i);
            if (t !== null) {
                if (t.view.hidden) {
                    t.view.show(false)
                } else {
                    t.view.show(true)
                }
                return t
            }
            this.windowFactory.createSelectCastleWindow({
                habitat: e.habitat
            })
        };
        t["IqJr%3cr"] = function (n, e) {
            var a = e.id;
            var s = e.foreignHabitat;
            var t = this["8lU2br-q"]();
            t.sourceHabID = a;
            this["ddBiE8_C"](null, t);
            var i = this.findControllerByName("ForeignHabitat_lastRaid_" + s.id);
            if (!i) {
                return
            }
            i.updateSourceHabitat(t)
        };
        U.gameController = {};
        U.gameController.lastRaid = t
    })(this);
    NetworkController = function (s) {
        "use strict";
        utils.__extends(e, V);
        var a = "3";

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addOption("showNoSessionDialog", true);
            this.addOption("callbackOnSoftError", false);
            this.setOptions(t)
        }
        e.prototype._informAllChildControllers = function (t, a) {
            if (t.controller && t.getSubscribers) {
                var i = t.getSubscribers();
                for (var e = 0; e < i.length; e++) {
                    if (i[e].view) {
                        t.notify(a, i[e].view)
                    }
                }
            }
        };
        e.prototype._timeoutError = function (t, e) {
            utils.dialog.alert(t, "No response from server (timeout)", "Error", function () {
                if (t.controller) {
                    t.controller["bOsn(oQ9"]()
                } else {
                    t["bOsn(oQ9"]()
                }
            })
        };
        e.prototype._genericError = function (i, t) {
            var e = o ? translate("Internal error.") : "Internal error.";
            if (t.message) {
                e = t.message
            }
            utils.dialog.alert(i, e, "Error", function () {
                window.logout()
            })
        };
        e.prototype.modifyRequest = function (s, e) {
            if (t) {
                e[t.id] = i.getHash()
            }
            e.PropertyListVersion = a;
            this._informAllChildControllers(s, "_f3L_ht_");
            return e
        };
        e.prototype.success = function (t, e, i) {
            if (t.controller) {
                t.controller = this.controller
            }
            this._informAllChildControllers(t, "VY71NNds");
            i.call(t, e)
        };
        e.prototype.softError = function (t, e, i) {
            if (t.controller) {
                t.controller = this.controller
            }
            this._informAllChildControllers(t, "VY71NNds");
            if (e.clientCommand) {
                this._handleClientCommand(t, e)
            } else {
                this._handleSimpleErrorMessage(t, e)
            } if (this.callbackOnSoftError && i) {
                i.call(t, e)
            }
        };
        e.prototype._handleClientCommand = function (r, a) {
            var t = a.clientCommand,
                s = o && !t.isLocalized ? translate(t.message) : t.message,
                n = o ? translate("Error") : "Error",
                e = t.action,
                i = this._getActionFunction(e);
            if (e & Ue.showDialog && this.showNoSessionDialog) {
                utils.dialog.alert(this.controller, s, n, i)
            } else {
                i()
            }
        };
        e.prototype._handleSimpleErrorMessage = function (a, e) {
            var t = e.error || "",
                i = ["No session.", "Minimum vacation time is not reached", "An error occured while communicating with the payment provider. Please contact the support on support@xyrality.com !"];
            if (o) {
                if (t === "An error occured while communicating with the payment provider. Please contact the support on support@xyrality.com !") {
                    t = "payment.error"
                }
                t = {
                    content: translate(t),
                    title: translate("Error")
                }
            } else {
                t = {
                    content: t,
                    title: "Error"
                }
            } if (!this.showNoSessionDialog) {
                if ( !! ~i.indexOf(e.error)) {
                    this.notify("RtV09EsC", this)
                }
                if (this.callbackOnSoftError && errorCallback) {
                    errorCallback.call(a, e)
                }
                return
            }
            if ( !! ~i.indexOf(e.error)) {
                utils.dialog.alert(this.controller, t.content, t.title, function () {
                    window.logout()
                });
                this.notify("RtV09EsC", this)
            } else {
                utils.dialog.alert(this.controller, t.content, t.title, null)
            }
        };
        e.prototype.hardError = function (t, e, i) {
            if (t.controller) {
                t.controller = this.controller
            }
            this._informAllChildControllers(t, "VY71NNds");
            if (e) {
                e === "timeout" ? this._timeoutError(t, e) : this._genericError(t, e)
            }
            if (i && typeof i === "function") {
                i.call(t, e)
            } else {}
        };
        e.prototype._getActionFunction = function (t) {
            if (t & Ue.updateSession) {
                return function () {
                    this.notify("bOsn(oQ9", this)
                }.bind(this)
            }
            if (t & Ue.logout) {
                this.notify("RtV09EsC", this);
                return function () {
                    window.logout()
                }.bind(this)
            }
            if (t & Ue.clearCache) {
                return function () {
                    this.notify("Rnei-XWw", this)
                }.bind(this)
            }
            return null
        };
        return e
    }(V);
    RankingListControls = function (i) {
        "use strict";
        utils.__extends(t, i);
        var e = 2,
            a = 13;

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }

        function s(e) {
            var t = $(e);
            if (t.is("#executeSearch")) {
                if (!t.hasClass("disabled")) {
                    this.executeSearch(t)
                }
                return true
            }
            if (t.is(".control.button") && t.not("#executeSearch")) {
                this.buttonClicked(t);
                return true
            }
            return false
        }
        t.prototype.clickHandler = function (t) {
            this.bubble(t, s.bind(this), this.templateData.controlsHtmlID)
        };
        t.prototype.keyboardHandler = function (i) {
            var t = $(i.target),
                s = t.parents(".search").find("#executeSearch"),
                n = t.val().trim();
            if (i.keyCode === a) {
                this.executeSearch(t)
            }
            if (n.length > e) {
                s.removeClass("disabled")
            }
        };
        t.prototype.executeSearch = function (i) {
            var t = i.parents(".search").find("input").val().trim();
            if (t.length > e) {
                this.notify("Ih)KLSsD", this, {
                    query: t
                })
            }
        };
        t.prototype.buttonClicked = function (t) {
            this.notify("V(xgXe-G", this, {
                type: t.data("type")
            })
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                selector: "#" + this.templateData.controlsHtmlID,
                event: "click",
                callback: this.clickHandler,
                target: this
            });
            e.push({
                selector: "#" + this.templateData.controlsHtmlID + " input",
                event: "keyup",
                callback: this.keyboardHandler,
                target: this
            });
            return e
        };
        t.prototype.dataUpdate = function (e, t) {
            this.templateData = t;
            this.create();
            this.draw()
        };
        return t
    }(TemplateView);
    RankingList = function (e) {
        "use strict";
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }

        function i(e) {
            var t = $(e);
            if (t.is(".rowInfo")) {
                this.openPlayerProfile(t);
                return true
            }
            if (t.is(".up") || t.is(".down")) {
                this.arrowButtonClicked(t);
                return true
            }
            return false
        }
        t.prototype.clickHandler = function (t) {
            this.bubble(t, i.bind(this), this.templateData.htmlID)
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                selector: "#" + this.templateData.htmlID,
                event: "click",
                callback: this.clickHandler,
                target: this
            });
            return e
        };
        t.prototype.openPlayerProfile = function (t) {
            this.notify("h4MWA4%j", this, {
                playerID: t.data("id")
            })
        };
        t.prototype.arrowButtonClicked = function (t) {
            this.notify("pHawGOIe", this, {
                page: +t.data("page")
            })
        };
        t.prototype.dataUpdate = function (e, t) {
            this.templateData = t;
            this.create();
            this.draw()
        };
        return t
    }(TemplateView);
    $e = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e);
            this.applyFrame();
            this.styleArray.push("content-frame");
            if (this.clickMessage) {
                this.styleArray.push("clickable")
            }
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            this.applyFrame();
            this.wrapper = this.createSubview(this, {
                styles: "frame-content"
            })
        };
        t.prototype.draw = function () {
            t.__super__.draw.apply(this, arguments);
            if (this.wrapper) {
                $("#" + this.wrapper.id).append("<div class='clearfix'></div>")
            }
        };
        t.prototype.applyFrame = function () {
            var e = ["t", "b", "l", "r"];
            var t;
            for (t = 0; t < e.length; t++) {
                this.createSubview(this, {
                    styles: "frame-side " + e[t]
                })
            }
        };
        return t
    }(e);
    w = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e);
            this.applyCorners()
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            this.applyCorners()
        };
        t.prototype.applyCorners = function () {
            var e = ["tl", "tr", "bl", "br"];
            var t;
            for (t = 0; t < e.length; t++) {
                this.createSubview(this, {
                    styles: "frame-corner " + e[t]
                })
            }
        };
        return t
    }($e);
    I = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("title", "");
            this.addOption("titleClickMessage", null);
            this.addOption("clickData", null);
            this.addOption("detail", null);
            this.addOption("icon", null);
            this.addOption("iconClickMessage", null);
            this.addOption("styles", "content-header");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var t = "headline";
            if (this.titleClickMessage) {
                t += " clickable"
            }
            this.headline = this.createSubview(this, {
                styles: t,
                clickMessage: this.titleClickMessage,
                data: this.clickData
            });
            if (this.icon) {
                this.styles += " with-icon";
                var e = this.icon;
                if (typeof this.icon === "string") {
                    e = this.icon
                }
                this.createSubview(this.headline, {
                    content: e,
                    styles: "icon",
                    clickMessage: this.iconClickMessage,
                    data: this.data
                })
            }
            if (this.detail) {
                this.createSubview(this, {
                    styles: "detail",
                    content: this.detail
                })
            }
            this.createSubview(this.headline, {
                styles: "title",
                content: this.title
            });
            this.clearfix()
        };
        return t
    }(e);
    k = function (i) {
        utils.__extends(t, i);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("icon");
            this.addOption("iconCategory", "icons");
            this.addOption("detail");
            this.addOption("iconHover", null);
            this.setOptions(e);
            this.styleArray.push("listButton")
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            var i = "";
            var a = e;
            if (this.icon) {
                i = this.notify("rvHW39mY", this, {
                    imageName: this.icon,
                    imageCategory: this.iconCategory
                });
                this.wrapper.styles += " with-icon"
            }
            if (this.iconHover !== null) {
                a = N
            }
            this.createSubview(this, {
                content: i,
                styles: "icon",
                hoverView: this.iconHover
            }, a);
            this.createSubview(this, {
                content: this.content,
                styles: "contentText"
            });
            this.createSubview(this, {
                content: this.detail,
                styles: "detail"
            });
            this.content = ""
        };
        return t
    }(w);
    vi = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("showIcon", false);
            this.addOption("showText", false);
            this.addOption("showColors", false);
            this.addOption("caption", "");
            this.addOption("capacity", 0);
            this.addOption("maxCapacity", 0);
            this.addOption("onlyMax", false);
            this.addOption("capacityButton", false);
            this.addOption("capacityButtonMessage", "I1%KdUSg");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var i, t = "";
            if (this.showIcon === true) {
                this.createSubview(this, {
                    content: this.notify("rvHW39mY", this, {
                        imageName: "capacity",
                        imageCategory: "icons"
                    }),
                    styles: "capacityIcon icon"
                })
            }
            if (this.showText === true) {
                this.createSubview(this, {
                    content: this.caption,
                    styles: "caption"
                })
            }
            if (this.showColors === true) {
                if (+this.capacity === 0 || +this.maxCapacity === 0 || +this.capacity > +this.maxCapacity) {
                    t = "red"
                }
            }
            if (this.capacityButton) {
                this.createSubview(this, {
                    styles: "capacityButton button",
                    content: this.getIcon("capacityFullWhite"),
                    clickMessage: this.capacityButtonMessage
                })
            }
            var e = this.maxCapacity;
            if (this.onlyMax !== true) {
                e = this.capacity + " / " + this.maxCapacity
            }
            this.capacityElement = this.createSubview(this, {
                styles: t + " value",
                content: e
            })
        };
        return t
    }(e);
    _i = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("worldDawn");
            this.addRequired("worldDusk");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            if (this.worldDusk == null || this.worldDawn == null) {
                return
            }
            this.createSubview(this, {
                content: this.notify("rvHW39mY", this, {
                    imageName: "dayIcon",
                    imageCategory: "icons"
                })
            });
            this.createSubview(this, {
                time: this.worldDawn,
                showIcon: false,
                showText: false,
                formatFunction: utils.date.formatDateTime
            }, K);
            this.createSubview(this, {
                content: this.notify("rvHW39mY", this, {
                    imageName: "nightIcon",
                    imageCategory: "icons"
                })
            });
            this.createSubview(this, {
                time: this.worldDusk,
                showIcon: false,
                showText: false,
                formatFunction: utils.date.formatDateTime
            }, K)
        };
        return t
    }(e);
    Se = function (a) {
        if (typeof a === "undefined") {
            return
        }
        var e = $(".tabbar." + a),
            t = e.find(".tab");

        function i() {
            t.each(function () {
                var t = $(this);
                t.removeClass("active");
                t.find("img").attr("src", t.data("default"))
            })
        }
        t.each(function () {
            var t = $(this),
                a = t.find(".tab-content"),
                e = t.find("img"),
                n = t.data("default"),
                s = t.data("active");
            if (t.hasClass("filler")) {
                return
            }
            a.on("mouseenter", function () {
                if (!t.hasClass("active")) {
                    e.attr("src", s)
                }
            });
            a.on("mouseleave", function () {
                if (!t.hasClass("active")) {
                    e.attr("src", n)
                }
            });
            t.click(function () {
                i();
                if (t.hasClass("active")) {
                    t.stopPropagation()
                } else {
                    t.addClass("active");
                    e.attr("src", s)
                }
            })
        });
        if (e.find(".tab.active").length !== 1) {
            i();
            t.first().addClass("active");
            t.first().find("img").attr("src", t.first().data("active"))
        }
        return {
            clear: i,
            $bar: e,
            $tabs: t
        }
    };
    Ve = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.styleArray.push("editControls");
            this.addOption("name", "editControls", true);
            this.addOption("hidden", true, true);
            this.addOption("cmDelete", "S5dD%5UP");
            this.addOption("cmSelect", "CO6NsrgM");
            this.addOption("deleteText", "Delete");
            this.addOption("count", 0);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.btnDelete = this.createSubview(this, {
                name: "deleteSelection",
                content: this._deleteContents(),
                hover: translate("Delete"),
                clickMessage: this.cmDelete
            }, l);
            this.btnAll = this.createSubview(this, {
                name: "all",
                content: translate("All"),
                clickMessage: this.cmSelect
            }, l);
            this.updateCounter()
        };
        t.prototype.updateCounter = function (t) {
            this.count = t;
            this.btnDelete.content = this._deleteContents();
            if (!this.count) {
                this.btnDelete.addClass("disabled")
            } else {
                this.btnDelete.removeClass("disabled")
            }
            this.btnDelete.draw()
        };
        t.prototype._deleteContents = function () {
            return translate(this.deleteText, this.count || 0)
        };
        return t
    }(e);
    CastleHoverExtension = function (i) {
        utils.__extends(e, i);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addRequired("themeController");
            this.setOptions(t);
            this.castleHoverShown = false;
            this.castleHoverOffset = 100
        }
        e.prototype.getHoverCircles = function (s) {
            var e = [];
            e.push({
                icon: this.themeController.getImage("buttonAlliance", "icons"),
                data: {
                    action: "showAlliance"
                },
                activeTypes: ["own", "player", "noob_vacation"],
                hover: translate("Alliance Profile")
            });
            e.push({
                icon: this.themeController.getImage("buttonCastle", "icons"),
                data: {
                    action: "visitCastle"
                },
                activeTypes: ["own"],
                hover: translate("Castle")
            });
            e.push({
                icon: this.themeController.getImage("buttonBuildings", "icons"),
                data: {
                    action: "buildingList"
                },
                activeTypes: ["own"],
                hover: translate("Habitat Buildings")
            });
            e.push({
                icon: this.themeController.getImage("buttonTroops", "icons"),
                data: {
                    action: "unitList"
                },
                activeTypes: ["own"],
                hover: translate("Troop overview")
            });
            e.push({
                icon: this.themeController.getImage("transport", "icons"),
                data: {
                    action: "sendResources"
                },
                activeTypes: ["player", "noob_vacation"],
                hover: translate("Send Resources")
            });
            e.push({
                icon: this.themeController.getImage("transitDefense", "icons"),
                data: {
                    action: "sendDefense"
                },
                activeTypes: ["player", "noob_vacation"],
                hover: translate("Defend Habitat")
            });
            if (this.controller["a-0&ZL8y"]() === true) {
                e.push({
                    icon: this.themeController.getImage("lastRaid", "icons"),
                    data: {
                        action: "lastRaid"
                    },
                    activeTypes: ["player", "free"],
                    hover: translate("Attack with last formation")
                })
            }
            e.push({
                icon: this.themeController.getImage("transitAttack", "icons"),
                data: {
                    action: "attack"
                },
                activeTypes: ["player", "free"],
                hover: translate("Attack Habitat")
            });
            e.push({
                icon: this.themeController.getImage("transitSpy", "icons"),
                data: {
                    action: "sendSpy"
                },
                activeTypes: ["player", "free"],
                hover: translate("Send Spy")
            });
            e.push({
                icon: this.themeController.getImage("buttonPlayer", "icons"),
                data: {
                    action: "showPlayer"
                },
                activeTypes: ["own", "player", "noob_vacation"],
                hover: translate("Player Profile")
            });
            e.push({
                icon: this.themeController.getImage("buttonMessagesBlack", "icons"),
                data: {
                    action: "sendMessage"
                },
                activeTypes: ["player", "noob_vacation"],
                hover: translate("Send Message")
            });
            e.push({
                icon: this.themeController.getImage("trade", "icons"),
                data: {
                    action: "transports"
                },
                activeTypes: ["own", "player", "free", "noob_vacation"],
                hover: translate("Transits")
            });
            e.push({
                icon: this.themeController.getImage("pasteBoardCastle", "icons"),
                data: {
                    action: "copyCastleLink"
                },
                activeTypes: ["own", "player", "free", "noob_vacation"],
                hover: translate("Copy castle link")
            });
            e.push({
                icon: this.themeController.getImage("buttonMap", "icons"),
                data: {
                    action: "markCastle"
                },
                activeTypes: ["own", "player", "free", "noob_vacation"],
                hover: translate("mark castle")
            });
            if (utils.dict.size(t.habitate) > 1) {
                e.filter(function (t) {
                    return t.data.action === "sendResources"
                })[0].activeTypes.push("own");
                e.filter(function (t) {
                    return t.data.action === "sendDefense"
                })[0].activeTypes.push("own")
            }
            var a = [];
            for (var i = 0; i < e.length; i++) {
                if (e[i].activeTypes.indexOf(s) != -1) {
                    a.push(e[i])
                }
            }
            return a
        };
        e.prototype.createHoverWindow = function (o) {
            var e = this.controller.findControllerByName("castleHover"),
                t = o.habitat,
                p = o.mouse,
                l = this.controller.findControllerByName("map"),
                c = l.view.getTileCenterCoords(t.mapX, t.mapY),
                u = {
                    x: -10,
                    y: -5
                }, d = l.view.zoom,
                i = this.notify("I0Yl10Wi", this, t),
                r;
            if (e !== null) {
                this.controller.removeSubController(e);
                e.view.deleteAllSubviews();
                e.view.removeFromDOM();
                delete e.view;
                e = undefined
            }
            var h = this.notify("vkycgQL)", this, t.creationDate);
            if (i == "player" && (h !== "" || t.player.isOnVacation.toString() == "true")) {
                i = "noob_vacation"
            }
            r = this.getHoverCircles(i);
            var n = "Yoqka19h";
            if (i == "own") {
                n = "AAeX&RO7"
            }
            var s = new pe.CastleHoverController(this.controller, {
                name: "castleHover",
                habitat: t
            });
            this.controller.addSubController(s);
            var a = new pe.CastleHover(s, {
                styles: "castleHover",
                circleMessage: n,
                circleInfoArray: r,
                castleType: i,
                position: c,
                offset: u,
                zoom: d,
                circleSpeed: 100,
                data: {
                    habitat: t
                }
            });
            s.add(a);
            a.create();
            a.draw();
            this.castleHoverShown = true;
            return a
        };
        return e
    }(V);
    Q.Window = function (i) {
        utils.__extends(e, i);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.staticPosition = true;
            this.create()
        }
        e.prototype.create = function () {
            this.container = this.createSubview(this, {
                name: "bottombarContainer",
                styles: "container"
            });
            this.createSubview(this.container, {
                name: "bottombarCenterTop",
                styles: "shield"
            });
            var i = this.createSubview(this.container, {
                name: "bottombarLeftOuter",
                styles: "section left"
            });
            this.createSubview(i, {
                name: "bottombarLeft",
                styles: "inner left",
                category: "bottombar",
                imageArray: ["Settings", "Logout", "Help"]
            }, Q.Element);
            var s = this.createSubview(this.container, {
                name: "bottombarCenterOuter",
                styles: "centerWrapper"
            });
            var e = {
                name: "bottombarCenter",
                styles: "controls",
                category: "bottombar",
                mainButton: true,
                imageArray: ["Messages", "Reports", "Alliance"]
            };
            if (t.hasAlliance()) {
                e.imageArray.push("Forum")
            }
            e.imageArray.push("Player");
            this.createSubview(s, e, Q.Element);
            var n = this.createSubview(this.container, {
                name: "bottombarRightOuter",
                styles: "section right"
            });
            this.createSubview(n, {
                name: "bottombarRight",
                styles: "inner right",
                category: "resources",
                imageArray: [a.SILVER, a.GOLD]
            }, Q.Element)
        };
        e.prototype.dataUpdate = function () {
            e.__super__.dataUpdate.apply(this, arguments);
            this.draw()
        };
        e.prototype.draw = function () {
            e.__super__.draw.apply(this, arguments);
            var t = $("#" + this.id);
            t.css("left", 0);
            t.css("right", 0);
            t.css("bottom", 0);
            t.css("top", "auto")
        };
        return e
    }(Be);
    Q.HelpButton = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.draw = function () {
            t.__super__.draw.apply(this, arguments);
            $("#" + this.id).attr("src", translate("Help Link"));
            $("#" + this.id).attr("target", "_blank")
        };
        return t
    }(e);
    Q.Hover = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("text");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var t = this.createSubview(this, {});
            this.createSubview(t, {
                content: translate(this.text),
                styles: "nameHover clean"
            });
            t.clearfix()
        };
        return t
    }(R);
    Q.Element = function (e) {
        utils.__extends(t, e);

        function t(c, h) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("category", this.category);
            this.addOption("imageArray", this.imageArray);
            this.addOption("mainButton", false);
            this.addOption("data", null);
            this.setOptions(h);
            for (var n = 0; n < this.imageArray.length; n++) {
                var e = this.imageArray[n],
                    l = this.category,
                    o = e;
                if (e === "7") {
                    e = "gold";
                    l = "bottombar";
                    o = "gold"
                }
                var a = this.createSubview(this, {
                    name: e,
                    styles: "bottombarImageContainer " + o,
                    clickMessage: "6DouVOie"
                });
                var i = a.createSubview(a, {
                    styles: "imageElement"
                });
                var u = this.notify("rvHW39mY", this, {
                    imageName: e,
                    imageCategory: l
                });
                a.data = {
                    pressed: this.controller.state[e]
                };
                if (a.data.pressed) {
                    a.styleArray.push("pressed")
                }
                if (this.category === "bottombar") {
                    var r = this.notify(")h)eC72j", this, {
                        name: e
                    });
                    var s = e;
                    if (s === "Settings") {
                        s = "Preferences"
                    }
                    i.createSubview(i, {
                        content: u,
                        lazyHoverClass: Q.Hover,
                        lazyHoverOptions: {
                            text: s
                        }
                    }, N);
                    if (r) {
                        i.createSubview(i, {
                            content: r,
                            styles: "badgeValues"
                        })
                    }
                } else {
                    i.styles = "resImg";
                    i.createSubview(i, {
                        content: u
                    });
                    i.createSubview(i, {
                        content: this.notify("a(g0QCz&", this, {
                            resource: e
                        }),
                        styles: "resValues"
                    })
                }
            }
        }
        return t
    }(e);
    Q.Controller = function (e) {
        utils.__extends(t, ke);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.state = {
                Messages: false,
                Reports: false,
                Alliance: false,
                Forum: false,
                Player: false,
                gold: false,
                Settings: false
            }
        }
        t.prototype["6DouVOie"] = function (t, e) {
            var i;
            if (this.state[t.name]) {
                t.node().removeClass("pressed");
                t.data.pressed = false;
                this.state[t.name] = false
            } else if (typeof this.state[t.name] !== "undefined") {
                t.node().addClass("pressed");
                t.data.pressed = true;
                this.state[t.name] = true
            }
            if (t.name == "Logout") {
                this.notify("-KAOaHMF", this);
                return
            }
            this.notify("3qrKseJV", this, {
                name: t.name
            })
        };
        t.prototype.updateBottomBarButtons = function (e) {
            var s, n;
            if (this.state[e]) {
                var t = this.view.findSubviewByName(e);
                if (this.state[t.name]) {
                    t.node().removeClass("pressed");
                    t.data.pressed = false;
                    this.state[t.name] = false
                }
            }
            if (e == "close all") {
                for (var a in this.state) {
                    this.state[a] = false;
                    var i = this.view.findSubviewByName(a);
                    if (i) {
                        i.node().removeClass("pressed");
                        i.data.pressed = false
                    }
                }
            }
        };
        t.prototype["a(g0QCz&"] = function (e, t) {
            return this.datasource.getResourcesAmount(t.resource)
        };
        t.prototype[")h)eC72j"] = function (e, t) {
            switch (t.name) {
            case "castleList":
                return this.datasource.getCountOfAttackedHabitats();
            case "Reports":
                return this.datasource.getCountOfUnreadReports();
            case "Messages":
                return this.datasource.getCountOfUnreadDiscussions();
            case "Forum":
                return this.datasource.getCountOfUnreadAllianceMessages()
            }
        };
        t.prototype.dataUpdate = function (t, e) {
            this.view.dataUpdate(t, e)
        };
        return t
    }(ke);
    Q.DataSource = function (i) {
        utils.__extends(e, m);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.modelUpdate = function () {
            this.publishUpdate()
        };
        e.prototype.getResourcesAmount = function (s) {
            var i = 0;
            var e;
            if (s == a.SILVER) {
                for (var n in t.habitate) {
                    for (var r in t.habitate[n].habitatResources) {
                        if (r == parseInt(s, 10)) {
                            e = t.habitate[n].habitatResources[r];
                            if (e.amount <= e.storeAmount) {
                                i += e.amount
                            } else {
                                i += e.storeAmount
                            }
                        }
                    }
                }
            } else {
                i = t.gold
            }
            return i
        };
        e.prototype.getCountOfUnreadDiscussions = function () {
            if (t.unreadDiscussionCount > 0) {
                return t.unreadDiscussionCount
            }
        };
        e.prototype.getCountOfUnreadReports = function () {
            if (t.unreadReportCount > 0) {
                return t.unreadReportCount
            }
        };
        e.prototype.getCountOfUnreadAllianceMessages = function () {
            if (t.unreadAllianceMessages > 0) {
                return t.unreadAllianceMessages
            }
        };
        return e
    }(m);
    ne.Window = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.staticPosition = true;
            this.create()
        }
        t.prototype.dataUpdate = function (e, t) {
            this.data = t;
            this.deleteAllSubviews();
            this.create();
            this.draw()
        };
        t.prototype.create = function () {
            this.deleteAllSubviews();
            this.container = this.createSubview(this, {
                name: "topbarContainer",
                styles: "container"
            }, ne.View)
        };
        t.prototype.draw = function () {
            t.__super__.draw.apply(this, arguments);
            var e = $("#" + this.id);
            e.css("left", 0);
            e.css("right", 0);
            e.css("bottom", "auto");
            e.css("top", 0)
        };
        return t
    }(Be);
    ne.View = function (i) {
        utils.__extends(e, i);

        function e(t, i) {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.create = function () {
            var s, a;
            var e = [
                ["castleList", "Habitat list"]
            ];
            var i = utils.dict.size(t.habitate);
            if (i >= parseInt(u.massBuildingCastleCount, 10)) {
                e.push(["Buildings", "Building header"])
            }
            e.push(["TroopOverview", "Troop overview"]);
            if (i >= parseInt(u.massMarketCastleCount, 10)) {
                e.push(["globalMarket", "Market"])
            }
            if (i >= parseInt(u.massMissionCastleCount, 10)) {
                e.push(["globalMissions", "Missions"])
            }
            if (i >= parseInt(u.massRecruitmentCastleCount, 10)) {
                e.push(["Recruitment", "Recruitment list"])
            }
            a = {
                name: "topbarCenter",
                styles: "controls",
                mainButton: true,
                imageArray: e
            };
            this.createSubview(this, a, ne.Element)
        };
        return e
    }(e);
    ne.Hover = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("text");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var t = this.createSubview(this, {});
            this.createSubview(t, {
                content: translate(this.text),
                styles: "nameHover clean"
            });
            t.clearfix()
        };
        return t
    }(R);
    ne.Element = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.id = utils.uniqueID();
            this.addOption("category", this.category);
            this.addOption("imageArray", this.imageArray);
            this.addOption("mainButton", false);
            this.addOption("data", null);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            for (var t = 0; t < this.imageArray.length; t++) {
                var e = this.createSubview(this, {
                    name: this.imageArray[t][0],
                    styles: "topbarImageContainer",
                    clickMessage: "6DouVOie"
                });
                var i = e.createSubview(e, {
                    styles: "imageElement"
                });
                var s = this.notify("rvHW39mY", this, {
                    imageName: this.imageArray[t][0],
                    imageCategory: "bottombar"
                });
                e.data = {
                    pressed: this.controller.state[this.imageArray[t][0]]
                };
                if (e.data.pressed === true) {
                    e.styleArray.push("pressed")
                }
                i.createSubview(i, {
                    content: s,
                    lazyHoverClass: ne.Hover,
                    lazyHoverOptions: {
                        text: this.imageArray[t][1]
                    }
                }, N);
                if (this.imageArray[t][0] == "castleList") {
                    var a = this.notify("VSfp%xyb", this);
                    if (a > 0) {
                        i.createSubview(i, {
                            content: a,
                            styles: "badgeValues"
                        })
                    }
                }
            }
        };
        return t
    }(e);
    ne.Controller = function (i) {
        utils.__extends(e, i);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.state = {
                castleList: false,
                Recruitment: false,
                TroopOverview: false,
                Buildings: false,
                globalMarket: false,
                globalMissions: false
            }
        }
        e.prototype.dataUpdate = function (t, e) {
            this.view.dataUpdate(t, e)
        };
        e.prototype["6DouVOie"] = function (t) {
            if (t.parent.mainButton) {
                if (this.state[t.name]) {
                    t.node().removeClass("pressed");
                    t.data.pressed = false;
                    this.state[t.name] = false
                } else if (typeof this.state[t.name] !== "undefined") {
                    t.node().addClass("pressed");
                    t.data.pressed = true;
                    this.state[t.name] = true
                }
            }
            this.notify("3qrKseJV", this, {
                name: t.name
            })
        };
        e.prototype.updateTopBarButtons = function (e) {
            if (utils.dict.size(t.habitate) === 1) {
                var s = 0;
                for (var r in t.habitate) {
                    s = r;
                    break
                }
                if (s === e) {
                    e = "castleList"
                }
            }
            if (this.state[e]) {
                var i = this.view.findSubviewByName(e);
                if (i && this.state[i.name]) {
                    i.node().removeClass("pressed");
                    i.data.pressed = false;
                    this.state[i.name] = false
                }
            }
            if (e === "close all") {
                for (var n in this.state) {
                    this.state[n] = false;
                    var a = this.view.findSubviewByName(n);
                    if (!a) {
                        continue
                    }
                    a.node().removeClass("pressed");
                    a.data.pressed = false
                }
            }
        };
        e.prototype["VSfp%xyb"] = function () {
            var e = 0;
            for (var i in t.habitate) {
                if (t.habitate[i].isHabitatAttacked()) {
                    e++
                }
            }
            if (e > 0) {
                return e
            }
        };
        return e
    }(ke);
    di = function (h) {
        utils.__extends(e, Qe);
        utils.mixin(e, U.gameController.lastRaid);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.hoverHabitatID = 0;
            this.hoverTimeout = 500;
            this.sessionTimeout = 6e3;
            this.sessionAlive = true;
            this.clippy = "";
            this.timerCheckInterval = 3;
            this.timerCheckCounter = this.timerCheckInterval;
            this.soundController = null;
            this.openHabWindows = [];
            this.lastNotifiedUnreadDiscussions = 0;
            this.windowFactory = null;
            this.name = "GameController";
            this.nrOfPlayerHabitats = 0;
            this.habitatAnimationsCounter = 0;
            this.maxAnimations = 3;
            this.shopbaseurlid = 1;
            this.hoverCircleController = null;
            this.mapLoadedInitial = null;
            this.initTutorial()
        }
        var a = 0;
        S = false;
        e.prototype.notifyProxy = function (e, i, a, s) {
            var t = this.checkTutorialMessages(e);
            if (t !== true && this[e]) {
                var n = this[e](i, a, s);
                if (typeof t === "object" && t.callback) {
                    t.callback.apply(this.tutorialController, t.args)
                }
                return n
            } else {
                return false
            }
        };
        e.prototype.checkTutorialMessages = function (e) {
            if (!this.tutorialController || !this.tutorialController.isActive()) {
                return false
            }
            var t = this.tutorialController;
            if (t.lockedMessages && t.lockedMessages.length) {
                if (t.lockedMessages.indexOf(e) !== -1) {
                    t.actionBlocked(e);
                    return true
                }
            }
            return false
        };
        e.prototype["MHhl2JCz"] = function () {
            this.openFirstHabitat()
        };
        e.prototype["IHes%CqQ"] = function () {
            this.openFirstHabitat()
        };
        e.prototype.initTutorial = function () {
            if (typeof t === "undefined" && a < 6) {
                a++;
                setTimeout(this.initTutorial.bind(this), 500);
                return
            }
            if (!t || t.points > u.tutorialPointOffset) {
                return
            }
            var e = new T.Controller(this, {
                name: "Tutorial"
            });
            var s = new T.DataSource(this);
            var n = s.getCurrentStatus();
            var i;
            e.configure(n);
            e.linkDataSource(s);
            T.Steps.attach(e);
            i = new T.Window(e, {
                headlineContent: translate("Tutorial"),
                staticPosition: true,
                resizeable: false,
                hidden: true
            });
            i.fixZIndex(1020);
            e.add(i);
            e.start();
            if (e.isActive()) {
                e.draw()
            }
            this.tutorialController = e;
            this.addSubController(e);
            if (e.isActive() && this.soundController) {
                this.soundController.setVolume({
                    bgMusic: 0
                });
                this.soundController.setVolume({
                    sfx: 0
                })
            }
        };
        e.prototype["cAIus3w2"] = function (e) {
            if (!this.tutorialController || !this.tutorialController.isActive()) {
                return
            }
            var t = this.tutorialController.getStepByName(e),
                i = this.tutorialController.getCurrentStep();
            if (!t || i && t.triggerWhenCurrent === true && i.id !== t.id) {
                return
            }
            this.tutorialController.completeStep(e)
        };
        e.prototype["aBdTswLK"] = function (e, i, a) {
            if (t.habitate && e.name !== "" && t.habitate[e.name] && !! ~this.openHabWindows.indexOf(e.name)) {
                this.openHabWindows.splice(this.openHabWindows.indexOf(e.name), 1);
                this.checkAtmoSound()
            }
            i["aBdTswLK"].apply(e, a)
        };
        e.prototype["0scd3paU"] = function (e, t) {
            var i = t && t.force ? t.force : false;
            if (!e) {
                return
            }
            e.slideOut({
                forceToolbar: i
            })
        };
        e.prototype["qsh7)BXL"] = function (t, e) {
            if (t.view.type === "overview") {
                return
            }
            this.createHabitatWindow(e)
        };
        e.prototype.openFirstHabitat = function () {
            var i = typeof S !== "undefined" && S === true;
            if (i) {
                return
            }
            var e = this["nKpUrnTn"](null, t.getSortedHabitate()[0].id);
            e.updatePosition({
                x: 20,
                y: $(window).height() / 2 - $("#" + e.view.id).height() / 2
            });
            e.view.liveUpdate()
        };
        e.prototype["nKpUrnTn"] = function (a, i) {
            var e = t.habitate[i];
            e.player = t;
            return this.createHabitatWindow(e)
        };
        e.prototype.handleHabitatAction = function (t, e) {
            var i = this["I0Yl10Wi"](null, t);
            var a = S && typeof mTutorialFreeCastle !== "undefined" && mTutorialFreeCastle === true;
            if (a) {
                return
            }
            if (e === "copyCastleLink") {
                var s = this["eYyq%qI6"](null, {
                    coordinates: {
                        x: t.mapX,
                        y: t.mapY
                    }
                });
                this["J0N%It)p"](null, s);
                return true
            }
            if (e === "markCastle") {
                this["Dkc&P0h)"](null, {
                    habitat: t
                });
                return true
            }
            if (e === "showPlayer") {
                if (i === "own") {
                    this.windowFactory.createProfileWindow()
                } else if (i === "player") {
                    this["CcFE9soE"](null, t.player)
                }
                return true
            }
            if (e === "showAlliance") {
                if (i === "own") {
                    this.windowFactory.createAllianceWindow()
                } else if (i === "player" && t.player.alliance) {
                    this.createForeignAllianceWindow(t.player.alliance)
                }
                return true
            }
            if (e === "centerCastle") {
                this["1mA0BwR5"](null, {
                    x: +t.mapX,
                    y: +t.mapY
                });
                return true
            }
            if (e === "lastRaid") {
                this["xg1xV7cY"]({
                    foreignHabitat: t
                });
                return true
            }
            return false
        };
        e.prototype["AAeX&RO7"] = function (n, e) {
            var i = t.habitate[e.habitatID];
            var a = e.action;
            var s = e.source || null;
            if (this.handleHabitatAction(i, a)) {
                return
            }
            i.player = t;
            this.createOwnHabitatWindow(i, a, s)
        };
        e.prototype["Yoqka19h"] = function (a, t) {
            var e = t.habitat;
            var i = t.action;
            if (this.handleHabitatAction(e, i)) {
                return
            }
            this.createForeignHabitatWindow(e, i)
        };
        e.prototype["3qrKseJV"] = function (l, r, o) {
            var e = r.name;
            this.removeAllHoverElements();
            var s = {
                Reports: this.createReportsWindow,
                Help: this.showHelp
            };
            var n = {
                Buildings: this.windowFactory.createBuildingsWindow,
                Recruitment: this.windowFactory.createRecruitmentWindow,
                TroopOverview: this.windowFactory.createGlobalTroopMovements,
                globalMarket: this.windowFactory.createGlobalMarketWindow,
                globalMissions: this.windowFactory.createGlobalMissionsWindow,
                Player: this.windowFactory.createProfileWindow,
                Forum: this.windowFactory.createForumWindow,
                Alliance: this.windowFactory.createAllianceWindow,
                gold: this.windowFactory.createShopWindow,
                Messages: this.windowFactory.createMessagesWindow,
                castleList: this.windowFactory.createCastleListWindow,
                Settings: this.windowFactory.createSettingsWindow
            };
            if (e === "castleList" && utils.dict.size(t.habitate) === 1) {
                this.createHabitatWindow(t.getSortedHabitate()[0]);
                return
            }
            if (typeof s[e] !== "undefined" || typeof n[e] !== "undefined") {
                var a = this.findControllerByName(e);
                var i = null;
                if (a) {
                    if (a.view.hidden === true) {
                        a.view.show(false)
                    } else {
                        a["aBdTswLK"](a.view)
                    }
                } else {
                    if (s[e]) {
                        i = s[e].call(this)
                    } else {
                        i = n[e].call(this.windowFactory)
                    } if (i && !o) {
                        this.addWindowToSession(i)
                    }
                } if (i) {
                    i["PjmTAnYn"](this)
                }
                return a || i
            }
            return false
        };
        e.prototype["CU)Puzfu"] = function (e) {
            if (e.view.findSubviewByField("tag", "currentView").group !== "ForumThread") {
                return
            }
            var i = $("#" + e.view.findSubviewByField("tag", "currentView").id);
            var a = i.contents();
            var s = 0;
            for (var t = 0; t < a.length; t++) {
                s += $(a[t]).height()
            }
            i.scrollTop(s)
        };
        e.prototype["Jka00I6m"] = function (i) {
            t.alliance = null;
            this["jGXs4sPJ"]();
            var e = this.findControllerByName("Forum");
            if (e) {
                this["IvTCew1X"](e)
            }
        };
        e.prototype["CU)Puzfu"] = function (t) {
            this["jGXs4sPJ"]()
        };
        e.prototype["Tf6iX-sR"] = function (e, t) {
            if (typeof t === "undefined") {
                return
            }
            var i = {
                receiver: t,
                clickMessage: "6ofnhGey",
                name: "newMessage",
                viewName: "newMessage",
                styles: "newMessageView"
            };
            e.showNextViewOfClass(_e.NewView, i, true)
        };
        e.prototype["6ofnhGey"] = function (t) {
            var e = t.view.findSubviewByField("viewName", "newMessage");
            var a = e.getSubject();
            var s = e.getMessage();
            if (e.validate()) {
                t.datasource.sendMessageToPlayer(e.receiver.id, a, s);
                t["0scd3paU"].call(t);
                var i = this.findControllerByName("Messages");
                if (i) {
                    i.datasource.refresh()
                }
            }
        };
        e.prototype["bOsn(oQ9"] = function () {
            i.request("SessionAction/update", {}, function (t) {
                this["1Vzu&V(d"](null, t)
            }, this, 5e3, function () {
                if (this.timer) {
                    this.timer.stop()
                }
                this.sessionTimeout = 9999999999;
                if (this.sessionAlive) {
                    this.sessionAlive = false;
                    utils.dialog.alert(this, translate("No session."), translate("Error"), function () {
                        window.onbeforeunload = undefined;
                        window.logout()
                    })
                }
            })
        };
        e.prototype["RtV09EsC"] = function () {
            this.sessionEnded = true
        };
        e.prototype.checkTransitTimers = function (e) {
            var i = new Date;
            for (var t = 0; t < e.habitatTransits.length; t++) {
                if (i - W > e.habitatTransits[t].destinationETA) {
                    return true
                }
            }
            return false
        };
        e.prototype.checkResearchTimers = function (e) {
            var i = new Date;
            for (var t = 0; t < e.habitatKnowledgeOrders.length; t++) {
                if (i - W > e.habitatKnowledgeOrders[t].complete) {
                    return true
                }
            }
            return false
        };
        e.prototype.checkMissionTimers = function (e) {
            var i = new Date;
            for (var t = 0; t < e.habitatMissions.length; t++) {
                if (i - W > e.habitatMissions[t].complete) {
                    return true
                }
            }
            return false
        };
        e.prototype.checkRecruitingTimers = function (e) {
            var i = new Date;
            for (var t = 0; t < e.habitatUnitOrders.length; t++) {
                if (i - W > e.habitatUnitOrders[t].complete) {
                    return true
                }
            }
            return false
        };
        e.prototype.checkBuildingTimers = function (e) {
            var i = new Date;
            for (var t = 0; t < e.habitatBuildingUpgrades.length; t++) {
                if (i - W > e.habitatBuildingUpgrades[t].complete) {
                    return true
                }
            }
            return false
        };
        e.prototype.checkBattleTimers = function (e) {
            var a = new Date;
            var t;
            if (e.nextBattleDate) {
                t = e.nextBattleDate;
                if (t && a - W > t) {
                    return true
                }
            }
            for (var i = 0; i < e.externalHabitatUnits.length; i++) {
                t = e.externalHabitatUnits[i].habitat.nextBattleDate;
                t = typeof t === "string" ? new Date(t) : null;
                if (t && a - W > t) {
                    return true
                }
            }
            return false
        };
        if (Date && Date.now) {
            var r = Date.now()
        }
        e.prototype.timeEvent = function (f) {
            var p = this;
            var a, e, n = false;
            this.sessionTimeout -= this.globalTimerInterval / 1e3;
            if (!this.sessionEnded && this.sessionTimeout < this.halfSessionTimeout) {
                this["bOsn(oQ9"]();
                return
            }
            if (typeof t === "undefined") {
                return
            }
            this.timerCheckCounter -= 1;
            if (this.timerCheckCounter <= 0) {
                this.timerCheckCounter = this.timerCheckInterval;
                var o = t.habitate;
                for (a in o) {
                    if (!o.hasOwnProperty(a)) {
                        continue
                    }
                    e = t.habitate[a];
                    if (this.checkTransitTimers(e) || this.checkMissionTimers(e) || this.checkResearchTimers(e) || this.checkRecruitingTimers(e) || this.checkBuildingTimers(e) || this.checkBattleTimers(e)) {
                        n = true
                    }
                }
                if (n) {
                    this["bOsn(oQ9"]();
                    return
                }
            }
            var s = Date.now();
            var c = (s - r) / 1e3;
            r = s;
            for (a in t.habitate) {
                e = t.habitate[a];
                var h = e.habitatResources;
                for (var u in h) {
                    if (!h.hasOwnProperty(u)) {
                        continue
                    }
                    var i = e.habitatResources[u];
                    var d = i.generateAmount;
                    var l = d / 3600 * c;
                    if (i.amount + l < i.storeAmount) {
                        i.amount += l
                    } else {
                        i.amount = i.storeAmount
                    }
                    i.amount = Math.round(i.amount)
                }
                t.updateStatistics()
            }
        };
        e.prototype["Dkc&P0h)"] = function (n, a) {
            var s = a.habitat,
                e = +s.id,
                i = _.storeLocal.createKey("mar"),
                t = _.storeLocal.getJSON(i);
            if (t === null || t.length === 0) {
                _.storeLocal.setJSON(i, [e])
            } else {
                if ( !! ~t.indexOf(e)) {
                    t.splice(t.indexOf(e), 1)
                } else {
                    t.push(e)
                }
                _.storeLocal.setJSON(i, t)
            }
            this["NrEJ%XPX"](this, _.storeLocal.getJSON(i))
        };
        e.prototype["NrEJ%XPX"] = function (a, t) {
            var e = this.findControllerByName("map");
            if (e) {
                e.view.setOptions({
                    markedCastles: t
                })
            }
            var i = this.findControllerByName("overview");
            if (i) {
                i.setMarkedCastles(t)
            }
            this["RSc(i0yD"]()
        };
        e.prototype["RSc(i0yD"] = function () {
            var t = this.findControllerByName("map"),
                e = this.findControllerByName("overview");
            if (t) {
                t.view.preRender();
                t.view.draw()
            }
            if (e) {
                e.view.draw()
            }
        };
        e.prototype.hoverAction = function (t) {
            var e = t.habitat;
            if (this.castleHoverExtension.castleHoverShown === false) {
                this.castleHoverExtension.createHoverWindow(t)
            }
        };
        e.prototype["2P%KzlEn"] = function (e, i) {
            var t = i.habitat;
            var a = i.mouse;
            if (typeof t === "undefined" || t === null) {
                this.hoverHabitatID = 0;
                return
            }
            if (this.hoverHabitatID !== t.id) {
                this.hoverHabitatID = t.id;
                if (typeof this.timeout !== "undefined") {
                    window.clearTimeout(this.timeout)
                }
                var s = function () {
                    if (this.hoverHabitatID === t.id) {
                        var i = e.getLastMouseEvent();
                        if (typeof i.which !== "undefined" && i.which === 0 || typeof i.buttons !== "undefined" && i.buttons === 0) {
                            if (e._checkGlobalEventsTarget(null, i) === true) {
                                this.hoverAction.call(this, {
                                    habitat: t,
                                    mouse: a
                                })
                            }
                        }
                        this.hoverHabitatID = null
                    }
                };
                this.timeout = window.setTimeout(s.bind(this), this.hoverTimeout)
            }
        };
        e.prototype.globalMouseMoveEvent = function (o) {
            e.__super__.globalMouseMoveEvent.apply(this, arguments);
            if (this.castleHoverExtension && this.castleHoverExtension.castleHoverShown === false) {
                return
            }
            var n = this.findControllerByName("map");
            if (!n) {
                return
            }
            var r = {
                x: n.lastMouseEvent.clientX,
                y: n.lastMouseEvent.clientY
            };
            var t = this.findControllerByName("castleHover");
            var i = t.view.getDistance(r);
            var a = this.castleHoverExtension.castleHoverOffset;
            if (i.x < -a || i.x > a || i.y < -a || i.y > a) {
                var s = t.view;
                if (s) {
                    s.cleanUp();
                    s.removeFromDOM()
                }
                this.removeSubController(t);
                s = undefined;
                t = undefined;
                this.castleHoverExtension.castleHoverShown = false
            }
        };
        e.prototype["I0Yl10Wi"] = function (s, i) {
            var e = "free";
            if (typeof i.player !== "undefined") {
                e = "player"
            }
            for (var a in t.habitate) {
                if (+a === +i.id) {
                    e = "own"
                }
            }
            return e
        };
        e.prototype["I-269DWF"] = function () {
            var t = this.findControllerByName("castleHover"),
                i = this.findControllerByName("map"),
                e, a;
            if (!i || !t || !t.view) {
                return
            }
            e = t.view.data.habitat;
            a = i.view.getTileCenterCoords(e.mapX, e.mapY);
            t.view.setPosition(a)
        };
        e.prototype["w9Uztjx2"] = function (i, t) {
            var s = this.findControllerByName("dialog_" + t.uniqueKey);
            if (s) {
                s.view.show(true);
                return
            }
            var a = new We.Controller(this, {
                success: t.success,
                failure: t.failure,
                name: "dialog_" + t.uniqueKey
            });
            var e = new We.Window(a, {
                styles: "win dialog",
                data: t,
                confirmButton: t.confirmButton,
                modal: t.modal,
                resizeable: false
            });
            a.add(e);
            this.addSubController(a);
            e.create();
            e.draw();
            if (i && i.view) {
                this._positionDialogOverWindow(i, e)
            }
            return e
        };
        e.prototype._positionDialogOverWindow = function (e, t) {
            if (!t || !e || !e.view) {
                return
            }
            var u = e.view,
                i = u.node(),
                n = t.node(),
                r = i.offset(),
                a, s, o, l;
            a = {
                height: i.outerHeight(),
                width: i.outerWidth()
            };
            s = {
                height: n.outerHeight(),
                width: n.outerWidth()
            };
            o = r.left + (a.width / 2 - s.width / 2);
            l = r.top + (a.height / 2 - s.height / 2);
            t.updatePosition({
                x: o,
                y: l
            });
            t.liveUpdate()
        };
        e.prototype["IvTCew1X"] = function (e) {
            var t = e.view;
            var i = e.datasource;
            this.removeSubController(e);
            if (i) {
                this.removeDatasource(i)
            }
            if (t && t.closable) {
                if (t.unblockTimer && t.hideBlockOverlay) {
                    window.clearInterval(t.unblockTimer)
                }
                t.cleanUp();
                $("#" + t.id).empty();
                t.removeFromDOM()
            }
            t = undefined;
            i = undefined;
            e = undefined
        };
        e.prototype.createHabitatWindow = function (i, a) {
            var e;
            if (typeof t.habitate[i.id] !== "undefined") {
                e = this.createOwnHabitatWindow(t.habitate[i.id], "visitCastle");
                this["cAIus3w2"]("welcome");
                this.checkAtmoSound()
            } else {
                e = this.createForeignHabitatWindow(i)
            } if (!a) {
                this.addWindowToSession(e)
            }
            return e
        };
        e.prototype["BRH1gaaU"] = function (t) {
            var i = "ForeignHabitat_" + t.action + "_" + t.foreignHabitat.id;
            var e = this.findControllerByName(i);
            if (e) {
                e.view.show(!e.view.hidden);
                return e
            }
            t.exclusionIDs = t.exclusionIDs || [];
            t.controllerName = i;
            this.windowFactory.createForeignActionWindow(t)
        };
        e.prototype.createForeignHabitatWindow = function (t, e) {
            var a = function (a) {
                if (i) {
                    i.view.show(!i.view.hidden);
                    return i
                }
                var t = this.windowFactory.createForeignHabitatWindow(a);
                if (S && typeof mTutorialFreeCastle !== "undefined" && this.tutorialController) {
                    var e = this.tutorialController.getCurrentStep();
                    e.setTargetController(t);
                    this["cAIus3w2"](e.name)
                }
                this.addWindowToSession(t);
                return t
            }.bind(this);
            if (!t) {
                return
            }
            if (t.id && !t.mapX && !t.mapY) {
                D.DataSource.prototype.habitatInfo(t.id, function (t) {
                    this.createForeignHabitatWindow(t.Habitat, e)
                }.bind(this));
                return
            }
            var i = this.findControllerByName(t.id);
            if (S && typeof mTutorialFreeCastle !== "undefined" && mTutorialFreeCastle && t.player) {
                return null
            }
            if (!e) {
                a(t);
                return
            }
            if (D.Controller.prototype.useMiniWindowForAction(e)) {
                var s = a(t);
                s.performAction(e);
                return
            }
            this["BRH1gaaU"]({
                action: e,
                foreignHabitat: t
            })
        };
        e.prototype.createOwnHabitatWindow = function (n, r, o) {
            var l = S && typeof mTutorialFreeCastle !== "undefined" && mTutorialFreeCastle === true;
            var a;
            if (r === "" || l) {
                return null
            }
            var i = this.findControllerByName(n.id);
            if (i !== null) {
                a = true;
                if (i.showSubviewFromAction) {
                    a = i.showSubviewFromAction(r, o)
                }
                if (a) {
                    i.view.show(false);
                    if (this.openHabWindows.indexOf(i.name) === -1) {
                        this.openHabWindows.push(i.name)
                    }
                }
                return i
            }
            var s = new d.DataSource(this);
            this.addDatasource(s);
            s.setData(t.habitate);
            var u = {}, e = null;
            e = new d.ViewController(this, {
                name: n.id,
                group: "ownHabitatController"
            });
            e.add(new d.Window(e, {
                styles: "win habitat",
                hidden: true,
                habitat: n,
                minimumWindowHeight: 168
            }));
            this.addSubController(e);
            e.linkDataSource(s);
            s.addSubscriber(e);
            s.publishUpdate();
            a = e.showSubviewFromAction(r, o);
            if (a) {
                e.view.show(false)
            }
            if (this.openHabWindows.indexOf(e.name) === -1) {
                this.openHabWindows.push(e.name)
            }
            return e
        };
        e.prototype["43M&Wxm4"] = function (i, e) {
            if (t && t.alliance && t.alliance.id === e.id) {
                this.windowFactory.createAllianceWindow()
            } else {
                this.createForeignAllianceWindow(e)
            }
        };
        e.prototype.createForeignAllianceWindow = function (i) {
            var t = this.findControllerByName("ForeignAlliance_" + i.id);
            if (t !== null) {
                if (t.view.hidden) {
                    t.view.show(false)
                } else {
                    t.view.show(true)
                } if (t.showSubviewFromAction) {
                    t.showSubviewFromAction(action)
                }
                return t
            }
            var n, a, s, e = new X.Controller(this, {
                    name: "ForeignAlliance_" + i.id,
                    group: "foreignAlliance"
                }),
                r = i.name ? i.name : translate("Alliance");
            n = {
                styles: "win foreign alliance",
                headlineContent: "<span>" + r + "</span>"
            };
            s = new X.Window(e, n);
            e.add(s);
            a = new X.DataSource(this);
            this.addDatasource(a);
            a.addSubscriber(e);
            a.setData(i);
            e.linkDataSource(a);
            s.init();
            this.addSubController(e);
            e.draw();
            return e
        };
        e.prototype.createReportsWindow = function () {
            var e = new p.Controller(this, {
                name: "Reports",
                group: "ReportsController"
            });
            this.addSubController(e);
            var a = new p.Window(e, {
                styles: "win reports",
                headlineContent: "<span>" + o.getValueOf("Reports") + "</span>",
                reportSetupValue: t.reportSetup,
                minimumWindowHeight: 118
            });
            e.add(a);
            var i = new p.DataSource(this);
            this.addDatasource(i);
            e.linkDataSource(i);
            i.addSubscriber(e);
            e.draw();
            i.refreshReportsFromServer();
            this["%H(aWJB5"]();
            return e
        };
        e.prototype["Vjkw%oMN"] = function (s, i) {
            var a = $.sprintf(o.getValueOf("You need %d but have only %d.\nDo you want to buy more %@?"), i.costs, t.gold, "Gold");
            var e = this;
            utils.dialog.confirm(this, a, "Gold", function () {
                e["kZbiWxRm"](e)
            })
        };
        e.prototype["kZbiWxRm"] = function (e) {
            var t = this.findControllerByName("gold");
            if (t !== null) {
                if (t.view.hidden) {
                    t.view.show(false)
                } else {
                    t.view.show(true)
                }
                return
            }
            this.windowFactory.createShopWindow()
        };
        e.prototype["h4MWA4%j"] = function (e) {
            var t = this.findControllerByName("Player");
            if (t !== null) {
                if (t.view.hidden) {
                    t.view.show(false)
                } else {
                    t.view.show(true)
                }
                return
            }
            this.windowFactory.createProfileWindow()
        };
        e.prototype["CcFE9soE"] = function (e, t) {
            if (typeof t === "string" || typeof t === "number") {
                this.createForeignPlayerWindow(t)
            } else {
                this.createForeignPlayerWindow(t.id)
            }
        };
        e.prototype.createForeignPlayerWindow = function (a) {
            if (+a === +t.id) {
                var e = this.findControllerByName("Player");
                if (e !== null) {
                    if (e.view.hidden) {
                        e.view.show(false)
                    } else {
                        e.view.show(true)
                    }
                    return e
                }
                this.windowFactory.createProfileWindow();
                return
            }
            var e = this.findControllerByName("foreignPlayer_" + a);
            if (e !== null) {
                if (e.view.hidden) {
                    e.view.show(false)
                } else {
                    e.view.show(true)
                }
                return e
            }
            var n;
            var i = new se.Controller(this, {
                name: "foreignPlayer_" + a,
                group: "ForeignPlayerController"
            });
            n = {
                styles: "win foreignPlayer",
                headlineContent: translate("Player Profile")
            };
            var r = new se.Window(i, n);
            i.add(r);
            var s = new se.DataSource(this);
            this.addDatasource(s);
            s.addSubscriber(i);
            i.linkDataSource(s);
            this.addSubController(i);
            i.draw();
            s.loadPlayerInfo(a, r);
            return i
        };
        e.prototype["KYJAFRx0"] = function (e, t) {
            if (typeof t == "string") {
                this.createForeignPlayerWindow(t)
            } else {
                this.createForeignPlayerWindow(t.id)
            }
        };
        e.prototype.createForeignReportWindow = function (a, s) {
            var t = this.findControllerByName("foreignReport_" + a + "_" + s);
            if (t !== null) {
                if (t.view.hidden) {
                    t.view.show(false)
                } else {
                    t.view.show(true)
                } if (t.showSubviewFromAction) {
                    t.showSubviewFromAction(action)
                }
                return t
            }
            var n;
            var e = new ge.Controller(this, {
                name: "foreignReport_" + a + "_" + s,
                group: "foreignReportController"
            });
            n = {
                styles: "win foreignReport reports",
                headlineContent: translate("Reports")
            };
            var r = new ge.Window(e, n);
            e.add(r);
            var i = new ge.DataSource(this);
            this.addDatasource(i);
            i.addSubscriber(e);
            e.linkDataSource(i);
            this.addSubController(e);
            e.draw();
            i.loadReport(a, s);
            return e
        };
        e.prototype["083g1id-"] = function (r, t) {
            var a = typeof t.showConfirm !== "undefined" ? t.showConfirm : true;
            var s = typeof t.resizeable !== "undefined" ? t.resizeable : false;
            var e = new g.FullscreenFrameController(this, {
                name: t.headline,
                group: "ShopFrame",
                showConfirm: a
            });
            var i = new n.Window(e, {
                styles: "win shopFrame " + (t.provider || ""),
                headlineContent: t.headline,
                resizeable: s,
                pos: {
                    x: 20,
                    y: 20
                }
            });
            e.add(i);
            this.addSubController(e);
            i.content.setOptions({
                content: $("<iframe class='paymentFrame' src='" + t.url + "'></iframe>"),
                handleLinks: false
            });
            e.draw()
        };
        e.prototype["tE-AKC74"] = function (e, t) {
            this.windowFactory.createTransactionWindow(t)
        };
        e.prototype["4&1DVE-y"] = function (e, t) {
            this.windowFactory.createSuccessWindow(t)
        };
        e.prototype.showHelp = function () {
            this["083g1id-"](this, {
                headline: "Help",
                url: "http://ios-hh.lordsandknights.com/XYRALITY/WebObjects/LKFAQ.woa",
                showConfirm: false,
                resizeable: true
            })
        };
        e.prototype.removeAllHoverElements = function () {
            utils.removeOrphanHovers()
        };
        e.prototype["UUa3Q4Qw"] = function (a, s) {
            if (!this.subcontroller) {
                return false
            }
            var i = this.subcontroller.slice(0);
            for (var e = 0; e < i.length; e++) {
                var t = i[e];
                if (t && t.view && t.view.closable) {
                    t.view.notify("aBdTswLK", a)
                }
            }
            this["5jJ7SKaM"](this, {
                name: "bottombar",
                controller: null,
                closeall: true
            });
            this["5jJ7SKaM"](this, {
                name: "topbar",
                controller: null,
                closeall: true
            });
            return true
        };
        e.prototype["-kHC%4lV"] = function (t, e) {
            if (t.group == "ForeignPlayerController" || t.group == "foreignReportController" || t.group == "foreignHabitat" || t.group == "ForeignHabitatController" || t.group == "ForeignHabitatActionController" || t.group == "ShopFrame" || t.group == "foreignAlliance" || t.group == "globalActionList" || t.group == "alliance" || t.group == "ownHabitatController" || t.group == "ReportsController" || t.group == "lastRaidController") {
                this["IvTCew1X"](t)
            }
            if (this.soundController) {
                this.soundController.linkPauseSFX(t.id)
            }
            this.removeWindowFromSession(e)
        };
        e.prototype["yuPMSBc_"] = function (t) {
            this.addWindowToSession(t)
        };
        e.prototype["Uq1)fBaP"] = function (t, e) {
            this.updateWindowInSession(t)
        };
        e.prototype["8ACWF((t"] = function (t, e) {
            this.updateWindowInSession(t)
        };
        e.prototype.updateModel = function (e, m) {
            this.removeAllHoverElements();
            if (typeof e.touchDate !== "undefined") {
                ze = e.touchDate
            }
            if (typeof e.defaultValues !== "undefined") {
                u.update(e.defaultValues);
                var r = "res/data/lang/" + oe + ".json";
                var f = "res/data/lang/manifest.json";
                if (this.gameVersion === "local") {
                    r = "res/lordsandknights/data/lang/" + oe + ".json"
                }
                o = new s.Stringtable({
                    lang: oe,
                    manifestUrl: f,
                    urlLang: r
                });
                o.setUpTable()
            }
            if (typeof e.time !== "undefined") {
                W = Math.ceil(new Date - _.conv.toDate(e.time))
            }
            this.sessionTimeout = e.sessionTimeout;
            this.halfSessionTimeout = this.sessionTimeout / 2;
            if (typeof e.Resource !== "undefined") {
                ee = {};
                $.each(e.Resource, function (e, t) {
                    ee[t.primaryKey] = new s.Resource({
                        identifier: t.identifier,
                        primaryKey: t.primaryKey,
                        order: t.order
                    })
                })
            }
            if (typeof e.Mission !== "undefined") {
                E = {};
                $.each(e.Mission, function (e, t) {
                    E[t.primaryKey] = new s.Mission(t)
                })
            }
            if (typeof e.Modifier !== "undefined") {
                be = {};
                $.each(e.Modifier, function (e, t) {
                    be[t.primaryKey] = new s.Modifier(t)
                })
            }
            if (typeof e.Knowledge !== "undefined") {
                A = {};
                $.each(e.Knowledge, function (e, t) {
                    A[t.primaryKey] = new s.Knowledge(t)
                })
            }
            if (typeof e.Unit !== "undefined") {
                y = {};
                $.each(e.Unit, function (e, t) {
                    y[t.primaryKey] = new s.Unit(t)
                })
            }
            if (typeof e.Building !== "undefined") {
                c = {};
                $.each(e.Building, function (e, t) {
                    c[t.primaryKey] = new s.Building(t)
                })
            }
            if (typeof e.player !== "undefined") {
                if (typeof t !== "undefined") {
                    t.update(e.player)
                } else {
                    t = new s.Player(e.player)
                }
            }
            if (typeof e.Player !== "undefined") {
                t.nick = e.Player.nick
            }
            if (typeof e.discussion !== "undefined" && t.discussions) {
                var l = false;
                for (var a = 0, v = t.discussions.length; a < v; a++) {
                    var d = t.discussions[a];
                    if (+d.id === +e.discussion.id) {
                        t.discussions[a] = this.createDiscussion(e.discussion);
                        l = true;
                        m.updateDiscussion(t.discussions[a]);
                        break
                    }
                }
                if (!l) {
                    t.discussions.push(this.createDiscussion(e.discussion))
                }
                t.sortDiscussions()
            }
            if (e.worldDusk) {
                u.worldDusk = _.conv.toDate(e.worldDusk)
            }
            if (e.worldDawn) {
                u.worldDawn = _.conv.toDate(e.worldDawn)
            }
            if (e.time) {
                u.serverTime = _.conv.toDate(e.time)
            }
            var n = $("#map"),
                h = $("#miniMapNavi #dayMode");
            if (u.serverTime < u.worldDawn && u.worldDawn < u.worldDusk) {
                u.update({
                    nightModusActive: true
                });
                n.removeClass("dayMode");
                n.addClass("nightMode");
                h.attr("src", "../res/NightIcon@0.5x.png")
            } else {
                u.update({
                    nightModusActive: false
                });
                n.removeClass("nightMode");
                n.addClass("dayMode");
                h.attr("src", "../res/DayIcon@0.5x.png")
            }
            this.checkOpenControllers();
            this.refreshMaps();
            this.checkGameOver();
            if (utils.dict.size(t.habitate) === this.nrOfPlayerHabitats - 1) {
                var i = this.findControllerByName("overview"),
                    g = i.view.canvasWidth,
                    p = i.view.canvasHeight;
                if (i) {
                    i.datasource.__data = null;
                    i.view.mapData = null;
                    i.view.center(i.view.getTileForCoords(g / 2, p / 2))
                }
            }
            this.nrOfPlayerHabitats = utils.dict.size(t.habitate)
        };
        e.prototype.checkOpenControllers = function () {
            for (var i = 0, a = this.subcontroller.length; i < a; i++) {
                var e = this.subcontroller[i];
                if (!e || e.group !== "ownHabitatController") {
                    continue
                }
                if (!t.habitate[e.name]) {
                    this["IvTCew1X"](e)
                }
            }
        };
        e.prototype.checkGameOver = function () {
            if (utils.dict.size(t.habitate) > 0) {
                return
            }
            var a = function (i) {
                this.updateModel(i);
                var e = this.findControllerByName("map");
                var a = this.findControllerByName("overview");
                if (!e) {
                    return
                }
                e.view.center({
                    x: t.getSortedHabitate()[0].mapX,
                    y: t.getSortedHabitate()[0].mapY
                });
                a.view.center({
                    x: t.getSortedHabitate()[0].mapX,
                    y: t.getSortedHabitate()[0].mapY
                });
                this["5jJ7SKaM"](this, {
                    name: "topbar",
                    controller: null,
                    closeall: true
                })
            };
            var e = this.connect;
            if (this.subcontroller.length > 0) e = a;
            utils.dialog.confirm(this, translate("You have no castle left. Do you want to start anew?"), translate("No habitats"), function () {
                i.request("HabitatAction/createNewHabitat", {
                    id: t.id
                }, e, this)
            }.bind(this), function () {
                window.onbeforeunload = undefined;
                window.logout()
            })
        };
        e.prototype["T_kKC8gM"] = function (r, e) {
            var a = [];
            var s = [];
            var i;
            var n = 0;
            if (typeof e.discussionTitleArray != "undefined") {
                if (e.discussionTitleArray) {
                    for (i in e.discussionTitleArray) {
                        a.push(this.createDiscussion(e.discussionTitleArray[i]));
                        if (!e.discussionTitleArray[i].lastReadDate) {
                            n += 1
                        }
                    }
                    if (e.systemMessageTitleArray) {
                        for (i in e.systemMessageTitleArray) {
                            e.systemMessageTitleArray[i].id = "-" + e.systemMessageTitleArray[i].id;
                            s.push(this.createDiscussion(e.systemMessageTitleArray[i]));
                            if (!e.systemMessageTitleArray[i].lastReadDate) {
                                n += 1
                            }
                        }
                    }
                }
                t.setDiscussions(a.concat(s))
            }
            return {
                discussions: a,
                systemMessages: s,
                unread: n
            }
        };
        e.prototype.createDiscussion = function (t) {
            var e = {};
            var i = {};
            if (t.discussionMemberArray) {
                $.each(t.discussionMemberArray, function (i, t) {
                    e[t.id] = new s.Player(t)
                })
            }
            if (t.discussionListenerArray) {
                $.each(t.discussionListenerArray, function (t, a) {
                    i[t] = e[t]
                })
            }
            var a = new s.DiscussionEntry({
                player: e[t.lastEntryDate.playerId]
            });
            return new s.Discussion({
                id: t.id,
                title: t.title,
                lastEntry: a,
                lastReadDate: t.lastReadDate,
                lastEntryDate: t.lastEntryDate,
                discussionMember: e,
                discussionListener: i
            })
        };
        e.prototype["V)_)fU0F"] = function (t) {
            return qe
        };
        e.prototype.refreshMaps = function () {
            var e = this.findControllerByName("map");
            var i = this.findControllerByName("overview");
            if (typeof e != "undefined" && e !== null) {
                for (var a in t.habitate) {
                    e.datasource.updateHabitatInfo(t.habitate[a], t)
                }
                e.draw()
            }
            if (typeof i != "undefined" && i !== null) {
                i.draw()
            }
        };
        e.prototype.checkValidWorld = function (t) {
            if (!t || t == te) {
                return true
            }
            alert("Change of worlds currently not supported!");
            return false
        };
        e.prototype.centerMapLink = function (t) {
            var i = t.slice(t.indexOf("?") + 1, t.length).split("&"),
                a = i[0].split(","),
                o = i[1],
                s = parseInt(a[0], 10),
                n = parseInt(a[1], 10),
                e = this.findControllerByName("map"),
                r = this.findControllerByName("overview");
            if (this.checkValidWorld(o) === true) {
                e.view.center({
                    x: s,
                    y: n
                });
                r.view.center({
                    x: s,
                    y: n
                });
                e.view.preRender();
                e.draw();
                r.draw()
            }
        };
        e.prototype.openForeignAllianceLink = function (t) {
            var e = t.slice(t.indexOf("?") + 1, t.length).split("&"),
                i = e[0],
                a = e[1],
                s = {
                    name: translate("Alliance"),
                    id: i
                };
            if (this.checkValidWorld(a) === true) {
                this.createForeignAllianceWindow(s)
            }
        };
        e.prototype.openForeignPlayerLink = function (t) {
            var e = t.slice(t.indexOf("?") + 1, t.length).split("&"),
                i = e[0],
                a = e[1];
            if (this.checkValidWorld(a) === true) {
                this.createForeignPlayerWindow(i)
            }
        };
        e.prototype.openForeignReportLink = function (t) {
            var e = t.slice(t.indexOf("?") + 1, t.length).split("&"),
                i = e[0],
                a = e[1],
                s = e[2];
            if (this.checkValidWorld(s) === true) {
                this.createForeignReportWindow(i, a)
            }
        };
        e.prototype.linkHandler = function (t) {
            var e = /player/i,
                i = /coordinates/i,
                a = /report/i,
                s = /alliance/i,
                n = /shop/i;
            if (e.test(t) === true) {
                this.openForeignPlayerLink(t)
            }
            if (i.test(t) === true) {
                this.centerMapLink(t)
            }
            if (s.test(t) === true) {
                this.openForeignAllianceLink(t)
            }
            if (a.test(t) === true) {
                this.openForeignReportLink(t)
            }
            if (n.test(t) === true) {
                this["kZbiWxRm"]()
            }
        };
        e.prototype["eYyq%qI6"] = function (a, t) {
            var e = t.coordinates.x,
                i = t.coordinates.y;
            return "l+k://coordinates?" + e + "," + i + "&" + te
        };
        e.prototype["Vr(P2Uey"] = function (i, t) {
            var e = t.alliance;
            return "l+k://alliance?" + e + "&" + te
        };
        e.prototype["TYxiXgsZ"] = function (e, t) {
            var i = t.report,
                a = t.habitat;
            return "l+k://report?" + t.report + "&" + t.habitat + "&" + te
        };
        e.prototype["s&hAI%la"] = function (e, t) {
            var i = t.player;
            return "l+k://player?" + t.player + "&" + te
        };
        e.prototype["J0N%It)p"] = function (e, t) {
            this.clippy = t
        };
        e.prototype["xhjW7E37"] = function (t) {
            return this.clippy
        };
        e.prototype.setGameVersion = function (t) {
            this.gameVersion = t;
            var e = $("<div class='version'>" + t + "</div>");
            $("body").append(e)
        };
        e.prototype.setLoginGlobals = function (t) {
            te = t.worldID;
            we = t.worldUrl;
            oe = t.languageID;
            Fe = t.logoutUrl;
            qe = t.mapUrl;
            Ci = t.fb_host
        };
        e.prototype.login = function (t) {
            this.credentials = t;
            if (typeof t.oneTimeLoginHash !== "undefined" && typeof t.oneTimeAction !== "undefined") {
                we = t.worldUrl;
                var a = _storeLocal.getJSON(we);
                if (a) {
                    this.setLoginGlobals(a)
                }
                this.credentials = a;
                window.cred = this.credentials;
                this.credentials.oneTimeAction = t.oneTimeAction;
                var r = "res/data/lang/manifest.json";
                var n = "res/data/lang/" + oe + ".json";
                if (this.gameVersion === "local") {
                    n = "res/shop/data/lang/" + oe + ".json"
                }
                o = new s.Stringtable({
                    lang: oe,
                    manifestUrl: r,
                    urlLang: n
                });
                o.setUpTable();
                i.request("LoginAction/connectBrowserOneTime", {
                    hash: t.oneTimeLoginHash,
                    PropertyListVersion: "3"
                }, this.connect, this);
                return
            }
            if (typeof t.languageID !== "undefined" && t.languageID !== "") {
                _.storeLocal.setJSON(t.worldUrl, {
                    worldID: t.worldID,
                    worldUrl: t.worldUrl,
                    languageID: t.languageID,
                    logoutUrl: t.logoutUrl,
                    mapUrl: t.mapUrl,
                    fb_host: t.fb_host
                })
            }
            this.setLoginGlobals(t);
            var e = {
                worldId: te,
                logoutUrl: Fe,
                PropertyListVersion: "3"
            };
            if (t.email && t.password) {
                e.login = t.email;
                e.password = t.password
            } else {
                e.facebookAccessToken = t.facebookAccessToken
            }
            i.request("LoginAction/connectBrowser", e, this.connect, this)
        };
        e.prototype.createMaps = function (e) {
            var i = t.getSortedHabitate(),
                a;
            a = this.createNormalMap(e, i);
            this.createOverviewMap(e, i);
            this.createArrowMap(a)
        };
        e.prototype.createNormalMap = function (n, e, r) {
            var t = new ii(this, {
                name: "map"
            }),
                i, a, s;
            this.addSubController(t);
            if (r) {
                i = {
                    canvas: $("canvas#map")[0],
                    type: "normal",
                    eventTarget: "arrow",
                    labelCanvas: $("canvas#label")[0],
                    mapOrigin: {
                        x: e[0].mapX,
                        y: e[0].mapY
                    },
                    reloadBorderDist: {
                        x: 16,
                        y: 16
                    },
                    mapSize: {
                        width: 32,
                        height: 32
                    },
                    renderingFont: "12px " + gameFont,
                    zoom: .55,
                    markedCastles: n
                };
                s = Re;
                a = ri
            } else {
                i = {
                    canvas: new CanvasTile($("canvas#map")[0]),
                    eventTarget: "arrow",
                    tileInfo: {
                        w: 128,
                        h: 48,
                        off_x: 64
                    },
                    markedCastles: n
                };
                s = ai;
                a = Ze
            }
            t.add(new s(t, i));
            mapDS = new a(this);
            mapDS.addSubscriber(t);
            t.linkDataSource(mapDS);
            if (r) {
                mapDS.requestSector({
                    x: e[0].mapX - 32,
                    y: e[0].mapY - 32,
                    width: 64,
                    height: 64
                })
            }
            t.view.resize($("#arrow").width(), $("#arrow").height());
            t.view.center({
                x: e[0].mapX,
                y: e[0].mapY
            });
            return t
        };
        e.prototype.createOverviewMap = function (i, e) {
            var t = new ei(this, {
                name: "overview",
                zoomMax: 1,
                zoomMin: 1
            });
            this.addSubController(t);
            t.add(new Re(t, {
                canvas: $("#miniMap")[0],
                type: "overview",
                eventTarget: "miniMap",
                mapOrigin: {
                    x: e[0].mapX,
                    y: e[0].mapY
                },
                reloadBorderDist: {
                    x: 10,
                    y: 10
                },
                flexibleBorderDistFactor: 0,
                mapSize: {
                    width: 32,
                    height: 32
                },
                clearCanvasOnRedraw: true,
                zoom: .33,
                mapContainerSelector: ".miniMapContainer"
            }));
            t.setMarkedCastles(i);
            miniDS = new si(this);
            miniDS.addSubscriber(t);
            t.linkDataSource(miniDS)
        };
        e.prototype.createArrowMap = function (t) {
            var e = new ArrowMap(t, {});
            t.setOptions({
                arrowMap: e
            })
        };

        function l(i) {
            var e = _.storeLocal.createKey("mar"),
                t = _.storeLocal.getJSON(e);
            if (t) {
                return t
            }
            return []
        }
        e.prototype.connect = function (a) {
            var r = new He,
                s = r.detect(),
                u = "",
                d, c;
            _.storeSession.clear();
            _convertLocalStorageKeys(a, te);
            this.windowFactory = new ti(this, {});
            this.castleHoverExtension = new CastleHoverExtension(this, {
                themeController: this.themeController
            });

            function h() {
                var e = 'Georgia, Helvetica, sans-serif, "Android Emoji"',
                    t = e;
                if (s.appleEmoji) {
                    t = e.replace(/Android/, "Apple Color")
                }
                $("body").css("font-family", t);
                return t
            }
            this.credentials.password = undefined;
            if (typeof this.credentials.oneTimeAction != "undefined") {
                if (this.credentials.oneTimeAction == "paymentAborted") {
                    utils.dialog.alert(this, translate("payment aborted"), translate("Error"), function () {})
                } else if (this.credentials.oneTimeAction == "paymentSuccessful") {
                    var n = this.credentials["paymentSession.identifier"];
                    if (typeof n != "undefined") {
                        var o = {
                            "paymentSession.identifier": n,
                            PropertyListVersion: "3"
                        };
                        $.getJSON(we + "PaymentAction/processPayment?callback=?", o, function (t) {
                            if (typeof t.error != "undefined" && t.error !== null) {
                                utils.dialog.alert(this, t.error, translate("Error"), function () {})
                            } else if (typeof t.info != "undefined" && t.info !== null) {
                                utils.dialog.alert(this, t.error, translate("Error"), function () {})
                            }
                        })
                    } else {
                        utils.dialog.alert(this, translate("payment successful"), translate("Error"), function () {
                            this["bOsn(oQ9"]()
                        }.bind(this))
                    }
                }
            }
            this.updateModel(a);
            if (utils.dict.size(a.player.habitatDictionary) === 0) {
                return
            }
            u = h();
            this.createMaps(l(a.player.id));
            var t = new Q.DataSource;
            this.addDatasource(t);
            var i = new Q.Controller(this, {
                name: "bottombar"
            });
            i.linkDataSource(t);
            options = {
                styles: "bottombar",
                zIndex: 1,
                staticPosition: true,
                closable: false,
                hidden: false
            };
            t.addSubscriber(i);
            i.add(new Q.Window(i, options));
            this.addSubController(i);
            options = {
                styles: "topbar",
                zIndex: 2,
                staticPosition: true,
                closable: false,
                hidden: false
            };
            var e = new ne.Controller(this, {
                name: "topbar"
            });
            t = new m;
            t.addSubscriber(e);
            this.addDatasource(t);
            e.linkDataSource(t);
            e.add(new ne.Window(e, options));
            this.addSubController(e);
            if (s.audioformat && s.audioformat !== "none") {
                this.themeController.setOptions({
                    audioformat: s.audioformat
                });
                this.soundController = new Ee.Controller(this, {
                    backgroundTracks: utils.array.shuffle(this.themeController.getSoundForKey("background")),
                    castleAtmo: this.themeController.getSoundForKey("castlescene"),
                    mapAtmo: this.themeController.getSoundForKey("map"),
                    name: "Sound"
                });
                t = new Ee.Datasource(this.soundController);
                t.addSubscriber(this.soundController);
                this.soundController.linkDataSource(t);
                t.loadSettings()
            }
            this.draw()
        };
        e.prototype["K&%t8_6-"] = function () {
            $("div#loader").remove()
        };
        e.prototype["jGXs4sPJ"] = function (e) {
            var t = this.findControllerByName("bottombar");
            t.dataUpdate(null, {});
            t.draw()
        };
        e.prototype["5jJ7SKaM"] = function (r, t) {
            var o = t.name,
                s = t.controller,
                a = s ? t.controller.name : "",
                n = t.closeall,
                e = this.findControllerByName("bottombar"),
                i = this.findControllerByName("topbar");
            if (n) {
                if (e) e.updateBottomBarButtons("close all");
                if (i) i.updateTopBarButtons("close all")
            } else {
                if (e) e.updateBottomBarButtons(a);
                if (i) i.updateTopBarButtons(a)
            }
        };
        e.prototype["q1C7PTZC"] = function () {
            var e = t.discussions.filter(function (t) {
                return !t.previouslyRead
            }).length;
            t.unreadDiscussionCount = e;
            this.lastNotifiedUnreadDiscussions = e;
            this["jGXs4sPJ"]()
        };
        e.prototype["%H(aWJB5"] = function (e) {
            t.unreadReportCount = 0;
            this["jGXs4sPJ"]()
        };
        e.prototype["-KAOaHMF"] = function () {
            utils.dialog.confirm(this, translate("Logout.message"), translate("Logout"), function () {
                var t = i.manager;
                t.showNoSessionDialog = false;
                t.callbackOnSoftError = true;
                var e = function () {
                    window.onbeforeunload = undefined;
                    window.logout()
                };
                i.request("SessionAction/disconnect", {}, e, this, 100, e)
            }.bind(this), function () {
                var t = this.findControllerByName("bottombar");
                t.updateBottomBarButtons("Logout");
                return
            }.bind(this))
        };
        e.prototype.toggleMiniMapZoom = function (n) {
            var r = n.data;
            var a = r.findControllerByName("overview");
            var t = $(".miniMapContainer, #miniMap");
            var s = t.find("#miniMapNavi");
            var e = 256;
            var i = 256;
            if (t.width() == 256) {
                e = 512;
                i = 512;
                s.addClass("large")
            } else {
                s.removeClass("large")
            }
            t[0].width = e;
            t[0].height = i;
            t.width(e);
            t.height(i);
            a.view.updateCanvasSizeFromElement();
            a.draw()
        };
        e.prototype.miniMapShowTime = function (a) {
            var t = a.data;
            ci = function (e) {
                utils.__extends(t, e);

                function t(e, i) {
                    t.__super__.constructor.apply(this, arguments)
                }
                t.prototype.create = function () {
                    this.createSubview(this, {
                        content: this.notify("rvHW39mY", this, {
                            imageName: "dayIcon",
                            imageCategory: "icons"
                        }),
                        styles: "icon"
                    });
                    this.createSubview(this, {
                        content: utils.date.formatDateTime(u.worldDawn),
                        styles: "time"
                    });
                    this.clearfix();
                    this.createSubview(this, {
                        content: this.notify("rvHW39mY", this, {
                            imageName: "nightIcon",
                            imageCategory: "icons"
                        }),
                        styles: "icon"
                    });
                    this.createSubview(this, {
                        content: utils.date.formatDateTime(u.worldDusk),
                        styles: "time"
                    });
                    this.clearfix()
                };
                return t
            }(R);
            Ye = function (e) {
                utils.__extends(t, e);

                function t(e, i) {
                    t.__super__.constructor.apply(this, arguments)
                }
                t.prototype.create = function () {
                    this.createSubview(this, {
                        content: translate("Zoom map"),
                        styles: "nameHover clean"
                    });
                    this.clearfix()
                };
                return t
            }(R);
            t.miniMapTimeHover = new ci(t, {
                styles: "miniHover"
            });
            t.miniMapTimeHover.create();
            t.miniMapTimeHover.draw();
            var e = $("#" + t.miniMapTimeHover.id);
            var i = $("#miniMapNavi").offset();
            var s = i.left - 75;
            var n = i.top + 40;
            e.css("left", s);
            e.css("top", n)
        };
        e.prototype.miniMapHideTime = function (e) {
            var t = e.data;
            t.miniMapTimeHover.removeFromDOM();
            t.miniMapTimeHover = undefined
        };
        e.prototype.miniMapShowZoomDescr = function (a) {
            var t = a.data;
            Ye = function (e) {
                utils.__extends(t, e);

                function t(e, i) {
                    t.__super__.constructor.apply(this, arguments)
                }
                t.prototype.create = function () {
                    this.createSubview(this, {
                        content: translate("Map"),
                        styles: "nameHover clean unpadded"
                    });
                    this.clearfix()
                };
                return t
            }(R);
            t.miniMapZoomHover = new Ye(t, {
                styles: "miniHover"
            });
            t.miniMapZoomHover.create();
            t.miniMapZoomHover.draw();
            var e = $("#" + t.miniMapZoomHover.id);
            var i = $("#miniMapNavi").offset();
            var s = i.left - 75;
            var n = i.top + 40;
            e.css("left", s);
            e.css("top", n)
        };
        e.prototype.miniMapHideZoomDescr = function (e) {
            var t = e.data;
            t.miniMapZoomHover.removeFromDOM();
            t.miniMapZoomHover = undefined
        };
        e.prototype["vkycgQL)"] = function (s, t) {
            if (typeof t != "undefined") {
                var a = new Date;
                var e = _.conv.toDate(t);
                var i = parseInt(u.newbieProtectionDays, 10) * 864e5;
                if (e.getTime() + i > a - W) {
                    return utils.date.formatDateTime(new Date(e.getTime() + i))
                }
            }
            return ""
        };
        e.prototype["GRRiDN-v"] = function (r, e) {
            var t = this.findControllerByName("map"),
                i = +e.start.mapX,
                a = +e.start.mapY,
                s = +e.end.mapX,
                n = +e.end.mapY;
            if (!t || !t.arrowMap) {
                return
            }
            t.arrowMap.setOptions({
                distanceIndicatorPair: {
                    start: t.view.getTileCenterCoords(i, a),
                    end: t.view.getTileCenterCoords(s, n),
                    distance: utils.Map.distanceToHabitat(i, a, s, n)
                }
            });
            t.arrowMap.draw()
        };
        e.prototype["sMs0EI2k"] = function (e) {
            var t = this.findControllerByName("map");
            if (!t || !t.arrowMap) {
                return
            }
            t.arrowMap.setOptions({
                distanceIndicatorPair: null
            });
            t.arrowMap.draw()
        };
        e.prototype.cleanupModel = function () {
            window.cred = undefined;
            c = undefined;
            A = undefined;
            oe = undefined;
            Fe = undefined;
            qe = undefined;
            E = undefined;
            be = undefined;
            t = undefined;
            ee = undefined;
            we = undefined;
            u = undefined;
            o = undefined;
            W = undefined;
            ze = undefined;
            y = undefined;
            te = undefined
        };
        e.prototype["ha_wIcAy"] = function (i, t) {
            if (!this.soundController || !this.themeController) {
                return
            }
            var e = this.themeController.getSoundForKey(t.msg, t.data);
            if (t.link) {
                this.soundController.linkPlaySFX(t.link, e, t.category)
            } else {
                this.soundController.playSFX(e)
            }
        };
        e.prototype["Z8kGMFyM"] = function () {
            if (this.soundController) {
                this.soundController.linkPauseCategorySFX("building")
            }
        };
        e.prototype.checkAtmoSound = function () {
            if (!this.soundController) {
                return
            }
            if (this.openHabWindows.length === 0) {
                this.soundController.pauseAtmo()
            } else {
                this.soundController.playAtmo()
            }
        };
        e.prototype["Hj0tSQ-A"] = function () {
            if (this.soundController) {
                return this.soundController
            }
            return null
        };
        e.prototype["Mbh%Rxg6"] = function (e, t) {
            if (!this.soundController) {
                return
            }
            this.soundController.setVolume(t)
        };
        e.prototype["X%i7Q_c)"] = function (t) {
            if (!this.soundController) {
                return
            }
            return this.soundController.getVolume()
        };
        e.prototype.addWindowToSession = function (e) {
            var a = typeof S !== "undefined" && S === true;
            var s = typeof t !== "undefined" && t.points < u.tutorialPointOffset;
            if (a || s || !e || !e.view) {
                return
            }
            var n = e.name,
                r = e.view.pos,
                o = e.view.height,
                i = e.name.toString().split("_").slice(1);
            if (!i) {
                i = []
            }
            if (!this.session) {
                this.session = {}
            }
            this.session[n] = {
                pos: r,
                height: o,
                parameters: i
            };
            this.writeSession()
        };
        e.prototype.removeWindowFromSession = function (t) {
            if (this.session && this.session[t]) {
                delete this.session[t]
            }
            this.writeSession()
        };
        e.prototype.updateWindowInSession = function (t) {
            this.addWindowToSession(t)
        };
        e.prototype["WpnuBBWG"] = function () {
            if (!this.mapLoadedInitial) {
                this.openFirstHabitat();
                this.showStaticUI();
                this.mapLoadedInitial = true
            }
        };
        e.prototype.showStaticUI = function () {
            $(".miniMapContainer").show()
        };
        e.prototype.restoreSession = function () {
            var l = typeof S !== "undefined" && S === true;
            var h = typeof t !== "undefined" && t.points < u.tutorialPointOffset;
            if (l || h) {
                return
            }
            if (typeof this.windowsRestored !== "undefined" && this.windowsRestored === true) {
                return
            }
            var i;
            var o = this.readSession();
            var s = this.findControllerByName("bottombar");
            var n = this.findControllerByName("topbar");
            this.session = {};
            for (var e in o) {
                var a = o[e];
                if (!a) {
                    continue
                }
                var r = e.split("_").slice(1);
                i = null;
                if (parseInt(e, 10)) {
                    i = this.createHabitatWindow({
                        id: e
                    }, true)
                } else if (r.length > 0) {
                    if (e.indexOf("foreignPlayer") != -1) i = this.createForeignPlayerWindow.apply(this, r);
                    if (e.indexOf("foreignAlliance") != -1) i = this.createForeignAllianceWindow.apply(this, r);
                    if (e.indexOf("foreignReport") != -1) i = this.createForeignReportWindow.apply(this, r)
                } else if (r.length === 0 && isNaN(parseInt(e, 10)) || e.indexOf("gold") != -1) {
                    i = this["3qrKseJV"](null, {
                        name: e
                    }, true);
                    if (s && typeof s.state[e] !== "undefined") s.state[e] = true;
                    if (n && typeof n.state[e] !== "undefined") n.state[e] = true
                }
                if (!i) {
                    continue
                }
                this.session[e] = a;
                if (a.height && a.height > $(window).height()) {
                    a.height = $(window).height() - 50
                }
                i.view.height = a.height;
                i.updatePosition(a.pos);
                i.view.liveUpdate();
                this.addWindowToSession(i)
            }
            if (s) {
                s.dataUpdate()
            }
            if (n) {
                n.dataUpdate()
            }
            this.windowsRestored = true
        };
        e.prototype.readSession = function () {
            var e = _.storeLocal.createKey("session"),
                t = _.storeLocal.getJSON(e);
            if (!t) {
                t = {}
            }
            return t
        };
        e.prototype.writeSession = function () {
            if (!this.session || !t) {
                return
            }
            _.storeLocal.setJSON(_.storeLocal.createKey("session"), this.session)
        };
        e.prototype.resetSession = function () {
            this.session = {};
            this.writeSession()
        };
        e.prototype["dTqORssj"] = function (t) {
            if (this.habitatAnimationsCounter >= this.maxAnimations) return false;
            this.habitatAnimationsCounter += 1;
            return true
        };
        e.prototype["-Ra(cF3D"] = function (t) {
            this.habitatAnimationsCounter -= 1;
            if (this.habitatAnimationsCounter < 0) this.habitatAnimationsCounter = 0
        };
        e.prototype["5rqSDESh"] = function (a, s) {
            var t = s.habitatId;
            var e = this.findControllerByName("globalMissions");
            if (e && e.id !== a.id) {
                e.refreshMissionsForHabitat(t)
            }
            var i = this.findControllerByName(t);
            if (i && i.id !== a.id) {
                i.refreshMissionsForHabitat(t)
            }
        };
        e.prototype[")NO1)LJ&"] = function () {
            return this.shopbaseurlid
        };
        return e
    }(Qe);
    $(document).ready(function () {
        var s = {
            en: "https://support.xyrality.com/index.php?/Knowledgebase/Article/View/187/0/browser-version-requirements",
            de: "https://support.xyrality.com/index.php?/Knowledgebase/Article/View/184/0/untersttzte-browser-fr-lords--knights--updateempfehlungen"
        };
        var o = new He,
            r = o.detect(),
            e;
        if (!r.localStorage || !r.canvas) {
            var n = [];
            var h = s[window.cred.languageID] || s["en"];
            $.ajax({
                type: "GET",
                url: "res/lordsandknights/data/lang/" + window.cred.languageID + ".json",
                dataType: "json",
                async: false,
                success: function (t) {
                    $.each(t, function (t, e) {
                        n[t] = e
                    });
                    if (confirm(n["Lords & Knights is not optimised for this browser. Select 'OK' to open our help page."])) {
                        e = h
                    } else {
                        e = window.cred.logoutUrl
                    }
                    window.onbeforeunload = null;
                    window.location = e
                }
            });
            return
        }
        var m, t = new di;
        var l = u.CDNUrl;
        var a = parseInt("1", 10);
        if (typeof a !== "undefined" && !isNaN(a)) t.shopbaseurlid = a;
        i.registerManager(new NetworkController(t, {
            name: "networkController",
            callbackOnSoftError: true
        }));
        window.linkHandler = function (e) {
            t.linkHandler.call(t, e)
        };
        window.externalLinkHandler = function (t) {
            window.open(t)
        };
        window.cleanUp = function () {
            if (t) {
                return t.cleanupModel()
            }
        };
        window.logout = function () {
            var t = Fe;
            window.cleanUp();
            window.location = t
        };
        $.ajax({
            url: "buildtime.txt",
            success: function (e) {
                t.setGameVersion(e);
                p()
            },
            error: function (e) {
                t.setGameVersion("local");
                f()
            }
        });

        function c() {
            $("#map")[0].getContext("2d").canvas.width = $("#map").width();
            $("#map")[0].getContext("2d").canvas.height = $("#map").height();
            $("#label")[0].getContext("2d").canvas.width = $("#label").width();
            $("#label")[0].getContext("2d").canvas.height = $("#label").height();
            $("#arrow")[0].getContext("2d").canvas.width = $("#arrow").width();
            $("#arrow")[0].getContext("2d").canvas.height = $("#arrow").height();
            $("#miniMap")[0].getContext("2d").canvas.width = $("#miniMap").width();
            $("#miniMap")[0].getContext("2d").canvas.height = $("#miniMap").height()
        }

        function d(e) {
            var i = {}, a = 0,
                n = utils.dict.size(e),
                r = function () {
                    var e = window.parseTheme;
                    i = $.extend(true, {}, i, e);
                    a++;
                    if (a === n) {
                        t.setTheme(i);
                        t.login(window.cred);
                        window.parseTheme = undefined
                    }
                };
            for (var s in e) {
                var o = e[s];
                $.ajax({
                    url: l + "game/res/theme/" + s + "?hash=" + o,
                    type: "GET",
                    contentType: "application/x-json",
                    jsonpCallback: "na",
                    cache: true,
                    dataType: "jsonp",
                    complete: r
                })
            }
        }

        function p() {
            $.ajax({
                url: "res/theme/manifest.json",
                dataType: "jsonp",
                complete: function (t) {
                    d(JSON.parse(t.responseText))
                }
            })
        }

        function f() {
            $.ajax({
                url: "res/lordsandknights.json",
                dataType: "json",
                success: function (e) {
                    t.setTheme(e);
                    t.login(window.cred)
                }
            });
            var e = function (t) {
                var e;
                var s = function (t, e) {
                    $.get("src/" + e, function (e) {
                        utils.Template.addPartial(t, e)
                    })
                };
                var n = function (t, e) {
                    $.get("src/" + e, function (e) {
                        utils.Template.add(t, e)
                    })
                };
                for (var i in t.partials) {
                    e = t.partials[i];
                    s(i, e)
                }
                for (var a in t.templates) {
                    e = t.templates[a];
                    n(a, e)
                }
            };
            if (t.gameVersion === "local") {
                $.getJSON("res/lordsandknights/templateManifest.json", function (t) {
                    e(t)
                })
            }
        }
        var y = function () {
            var e = $("body"),
                t = $('<div class="scrollbar-measure">'),
                i;
            t.appendTo(e);
            i = t[0].offsetWidth - t[0].clientWidth;
            t.remove();
            e.addClass(i > 0 ? "has-scrollbar" : "no-scrollbar")
        };
        c();
        y();
        t.enableMouseEvents();
        $("#miniMapNavi #dayMode").on("mouseenter", null, t, t.miniMapShowTime);
        $("#miniMapNavi #dayMode").on("mouseleave", null, t, t.miniMapHideTime);
        $("#miniMapNavi #zoom").on("mouseenter", null, t, t.miniMapShowZoomDescr);
        $("#miniMapNavi #zoom").on("mouseleave", null, t, t.miniMapHideZoomDescr);
        $("#miniMapNavi #zoom").on("click", null, t, t.toggleMiniMapZoom);
        $("#mapContainer, .miniMapContainer").on("contextmenu", function () {
            return false
        });
        $(".close-all").on("click", t["UUa3Q4Qw"].bind(t));
        if (navigator.userAgent.indexOf("Opera") === 0) {
            t["K&%t8_6-"]()
        }(function (t) {
            t.event.special.destroyed = {
                remove: function (t) {
                    if (t.handler) {
                        t.handler()
                    }
                }
            }
        })(jQuery);
        Handlebars.registerHelper("getImageSrc", function (i, e) {
            if (typeof e !== "string") {
                e = "icons"
            }
            return t["7v%5T22p"]().getImageSrc(i, e)
        })
    });
    window._convertLocalStorageKeys = function (n, s) {
        var e = n.player.id,
            o = n.player.habitatDictionary;

        function i(t, i) {
            var e = _.storeLocal.getItem(t);
            if (!e) {
                return
            }
            _.storeLocal.setItem(i, e);
            _.storeLocal.removeItem(t)
        }

        function t(t) {
            var i = Array.prototype.slice.call(arguments, 1, arguments.length);
            return [t, e, s].concat(i).join("_")
        }

        function l() {
            var e = _.storeLocal.getJSON(t("mar"));
            if (!e || !e.length) {
                return
            }
            for (var i = 0, a = e.length; i < a; i++) {
                e[i] = +e[i]
            }
            _.storeLocal.setJSON(t("mar"), e)
        }
        i("mar_" + e, t("mar"));
        l();
        var a = s + "_" + e + "_session";
        if (_.storeLocal.getJSON(a) && _.storeLocal.getJSON(a).length) {
            _.storeLocal.removeItem(a)
        } else {
            i(a, t("session"))
        }
        for (var r in o) {
            i("m_" + r, t("m", r))
        }
        i(e + s + "_report_lastRead", t("rlr"));
        i("sound_settings", "sound_" + e)
    };
    n.Controller = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments);
            this.viewStack = [];
            this.sort = {
                type: "special",
                value: "alpha",
                direction: "asc"
            }
        }
        t.prototype.showBackButton = function (t) {
            if (typeof t === "undefined" || t === null) {
                t = true
            }
            var e = this.view.headline.buttons;
            if (e && t) {
                e.hideAllButtons();
                var a = e.subviews;
                e.findSubviewByName("back").show();
                for (var i = 0, s = a.length; i < s; i++) {
                    if (a[i].showOnBackButton) {
                        a[i].show()
                    }
                }
            }
        };
        t.prototype.hideBackButton = function (e) {
            if (this.viewStack.length === 0 || e) {
                var t = this.view.headline.buttons;
                if (t) {
                    t.showAllButtons();
                    t.findSubviewByName("back").hide()
                }
            }
        };
        t.prototype.slideIn = function () {
            return this.popIn(false, true)
        };
        t.prototype.slideOut = function (t) {
            return this.popOut(t)
        };
        t.prototype.popIn = function (r, o, i) {
            var e = this.view.findSubviewByField("tag", "nextView");
            if (e === null) {
                return
            }
            var a = $("#" + e.id);
            var t = this.view.findSubviewByField("tag", "currentView");
            i = typeof i === "undefined" ? true : false;
            if (t) {
                var s = $("#" + t.id);
                s.removeClass("contentCurrentView");
                s.addClass("contentLastView");
                t.styles = s.attr("class");
                if (o) {
                    t.hide()
                }
                this.viewStack.push(t);
                t.tag = "stackedView_" + t.id
            } else {
                this.viewStack = []
            }
            this.notify("5pS0oJ9y", this);
            a.removeClass("contentNextView");
            a.addClass("contentCurrentView");
            e.styles = a.attr("class");
            this.notify("CU)Puzfu", this);
            if (this.view && this.view.headline && this.view.headline.buttons) {
                this.view.headline.buttons.show()
            }
            e.tag = "currentView";
            var n = this.view.headline.buttons;
            if (n && r !== "simple") {
                n.hideAllButtons()
            }
            if (i) {
                this.showBackButton(true)
            }
            var l = typeof options.showBack !== "undefined" ? options.showBack : true;
            this.showBackButton(l)
        };
        t.prototype.popOut = function (a) {
            a = a || {};
            var t = this.viewStack.pop(),
                i = t ? this.view.findSubviewByField("tag", "currentView") : null,
                s = t ? $("#" + i.id) : null,
                e = t ? $("#" + t.id) : null;
            var n = typeof a.forceToolbar !== "undefined" ? a.forceToolbar : false;
            if (!t) {
                return
            }
            if (this.view && this.view.headline && this.view.headline.buttons) {
                this.view.headline.buttons.hide()
            }

            function r() {
                s.removeClass("contentCurrentView");
                s.addClass("contentNextView");
                i.styles = s.attr("class");
                i.tag = "deletedView_" + i.id;
                this.view.content.deleteSubviewByField("tag", i.tag);
                t.tag = "currentView"
            }

            function o() {
                if (e.length === 0) {
                    return
                }
                e.removeClass("contentLastView");
                e.addClass("contentCurrentView");
                t.styles = e.attr("class");
                if (this.view && this.view.headline && this.view.headline.buttons) {
                    this.view.headline.buttons.show()
                }
                $(".window-content").trigger("scroll");
                this.view.node().find(".main-content").scrollTop(0)
            }
            if (this["8kvrAa%)"]) {
                this["8kvrAa%)"](this)
            } else {
                this.notify("8kvrAa%)", this)
            }
            r.bind(this)();
            o.bind(this)();
            if (e.length === 0) {
                if (!t.styles) {
                    t.styles = "contentCurrentView"
                }
                t.draw()
            } else {
                e.css("display", "initial");
                e.parent().parent().scrollTop(this.oldScrollTop);
                e.removeClass("hidden");
                if (t.styles && t.styles.indexOf("hidden") !== -1) {
                    t.styles = t.styles.slice(0, t.styles.indexOf("hidden") - 1)
                }
                if (t.styles && t.styles.indexOf("contentLastView") !== -1) {
                    t.styles = t.styles.slice(0, t.styles.indexOf("contentLastView") - 1)
                }
                if (t.styles && t.styles.indexOf("contentCurrentView") === -1) {
                    t.styles += " contentCurrentView"
                }
            }
            this.hideBackButton(n);
            if (typeof this["SZNDbKyD"] === "undefined") {
                this.notify("SZNDbKyD", this)
            } else {
                this["SZNDbKyD"](this)
            }
        };
        t.prototype["0scd3paU"] = function () {
            if (this.view) {
                this.slideOut()
            }
        };
        t.prototype["aBdTswLK"] = function (t, e) {
            if (!this.view || this.view.closable === false) {
                return
            }
            if (this.view.cleanFragments) {
                this.view.cleanFragments()
            }
            var i;
            if (e && e.shiftKey) {
                i = this.notify("UUa3Q4Qw", t, e);
                return
            }
            this.notify("5jJ7SKaM", this, {
                name: "bottombar",
                controller: t.controller,
                closeall: false
            });
            this.notify("5jJ7SKaM", this, {
                name: "topbar",
                controller: t.controller,
                closeall: false
            });
            this.view.hide();
            this._manageCloseButton();
            this.notify("-kHC%4lV", this, this.name)
        };
        t.prototype["yuPMSBc_"] = function () {
            t.__super__["yuPMSBc_"].apply(this, arguments);
            this._manageCloseButton();
            if (this.view && this.view.height > $(window).height()) {
                this.view.resizeWindow($(window).height())
            }
        };
        t.prototype["HTnWZGse"] = function () {
            t.__super__["HTnWZGse"].apply(this, arguments);
            this._manageCloseButton()
        };
        t.prototype["-kHC%4lV"] = function () {
            this._manageCloseButton()
        };
        t.prototype._manageCloseButton = function () {
            var t = $(".win:visible").length,
                e = $(".close-all");
            if (typeof S !== "undefined" && S) {
                t = 0
            }
            if (t > 0) {
                e.show()
            } else {
                e.hide()
            }
        };
        t.prototype.showNextViewOfClass = function (i, t, a) {
            var s, e;
            t.showBack = typeof t.showBack !== "undefined" ? t.showBack : true;
            t.create = typeof t.create !== "undefined" ? t.create : true;
            t.tag = "nextView";
            if (typeof t.parent === "undefined") {
                t.parent = this.view.content
            }
            if (typeof t.styles !== "undefined") {
                t.styles += " contentNextView"
            } else {
                t.styles = "contentNextView"
            }
            e = new i(this, t);
            if (t.create) {
                e.create()
            }
            this.view.content.addSubview(e);
            e.draw();
            this.popIn(false, a, t.showBack);
            return e
        };
        t.prototype.reset = function () {
            this.viewStack = [];
            this.view.reset()
        };
        t.prototype["iHzklt)N"] = function (t) {
            if (this.view) {
                this.view.scrollList = t
            }
        };
        t.prototype["4A-lsFPn"] = function (e, t) {
            if (this.view) {
                this.view.setScrollIndicator(t)
            }
        };
        t.prototype["mm-DpP)j"] = function (e, i) {
            t.__super__["mm-DpP)j"].apply(this, arguments);
            if (!this.view) {
                return
            }
            if (this.view.resizeable) {
                this.view.handlebarClicked = false;
                this.view.handlebarDragging = false
            }
        };
        t.prototype["_0r2tiwg"] = function (i, e) {
            t.__super__["_0r2tiwg"].apply(this, arguments);
            if (this.view && this.view.resizeable) {
                this.view.moveEvent(e)
            }
        };
        t.prototype["PjmTAnYn"] = function (e, i) {
            t.__super__["PjmTAnYn"].apply(this, arguments);
            if (!this.view) {
                return
            }
            if (this.view.resizeable && this.view.height > $(window).height()) {
                this.view.resizeWindow($(window).height())
            }
        };
        t.prototype["8ACWF((t"] = function (e, t) {
            return this.notify("8ACWF((t", this, t)
        };
        t.prototype["%OT5IQRM"] = function (t) {
            if (!this.view.sortMenu) {
                this.view.createSortMenu()
            }
            this.view.sortMenu.toggle()
        };
        t.prototype._callSortMessage = function () {
            if (typeof this["&-QE2RMM"] === "undefined") {} else {
                return this["&-QE2RMM"](this.sort.type, this.sort.value, this.sort.direction)
            }
        };
        t.prototype["nsK5jgWj"] = function (t, n) {
            var e = "special";
            var i = t.data;
            var a = "sortElement";
            var s = this.sortDirection || "asc";
            if (t.unitID) {
                e = "unit";
                i = t.unitID;
                a = "unitElement"
            }
            if (t.resourceID) {
                e = "resource";
                i = t.resourceID;
                a = "resourceElement"
            }
            this.sort = {
                type: e,
                value: i,
                direction: s
            };
            this._callSortMessage();
            this.view.sortMenu.toggleOnce();
            this.view.updateSortBar(e, i, s, a)
        };
        t.prototype["9WeTWPlw"] = function (t) {
            this.sort.direction = "asc";
            this._callSortMessage()
        };
        t.prototype["zjKi-r8D"] = function (t) {
            this.sort.direction = "dsc";
            this._callSortMessage()
        };
        return t
    }(ke);
    n.Window = function (i) {
        utils.__extends(t, i);

        function t(r, n) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("headlineContent", "");
            this.addOption("resizeable", true);
            this.addOption("minimumWindowHeight", 63);
            this.addOption("hasSortBar", false);
            this.addOption("foreignHabitat", null);
            this.setOptions(n);
            this.contentContainer = this.createSubview(this, {
                styles: "content-container"
            });
            this.headline = this.createSubview(this.contentContainer, {
                styles: "headline",
                name: "headline"
            }, yi);
            this.headline.buttons = this.createHeadlineButtons(this.headline);
            this.headline.title = this.createSubview(this.headline, {
                content: this.headlineContent,
                styles: "title"
            });
            if (this.closable) {
                this.createSubview(this.headline, {
                    styles: "close",
                    name: "closeButton",
                    clickMessage: "aBdTswLK"
                }, e)
            }
            this.headline.clearfix();
            var a = ["l", "r", "t", "b"];
            var s = ["tl", "tr", "bl", "br"];
            this.innerFrame = this.createSubview(this.contentContainer, {
                styles: "inner-frame"
            });
            var i;
            for (i = 0; i < a.length; i++) {
                this.createSubview(this.innerFrame, {
                    styles: "inner-side " + a[i]
                })
            }
            for (i = 0; i < s.length; i++) {
                this.createSubview(this.innerFrame, {
                    styles: "inner-corner " + s[i]
                })
            }
            this.mainContentContainer = this.createSubview(this.innerFrame, {
                styles: "main-content"
            });
            this.content = this.createSubview(this.mainContentContainer, {
                name: "content",
                styles: "window-content"
            });
            if (this.resizeable) {
                this.createHandlebar()
            }
            this.sortBarContainer = null;
            this.sortMenuStyles = ""
        }
        t.prototype.createHandlebar = function () {
            this.handlebar = this.createSubview(this, {
                styles: "handlebar"
            })
        };
        t.prototype.updateSortBar = function (i, t, a, s) {
            var e = this.sortBar.getButtonLabelForSortCriteria(i, t);
            $("#" + this.sortBarContainer.id).remove();
            this.deleteSubviewChain(this.sortBarContainer);
            this.deleteSubviewChain(this.sortMenu);
            this.sortMenu = null;
            this.createSortBar(e.icon, e.text, a, s, t);
            this.sortBarContainer.draw()
        };
        t.prototype.createSortBar = function (e, i, t, a, s) {
            t = t || "asc";
            this.itemSelector = a || "sortElement";
            this.selectedItemID = s || "alpha";
            this.sortBarContainer = this.createSubview(this.innerFrame, {
                styles: "sortbar topButtons"
            });
            var r = "id" + utils.uniqueID();
            this.sortBar = this.createSubview(this.sortBarContainer, {
                template: "sortBar",
                templateData: {
                    htmlID: r,
                    button: {
                        icon: e,
                        text: i
                    },
                    sortAscending: t === "asc" ? true : false,
                    sortDescending: t === "dsc" ? true : false,
                    resourceSelector: {
                        styles: "clickable listButton resourceSelector"
                    },
                    arrowUpIcon: this.getImageSrc("filter_arrow_asc", "icons"),
                    arrowDownIcon: this.getImageSrc("filter_arrow_desc", "icons")
                }
            }, n.SortBar);
            this.sortBarContainer.clearfix();
            this.sortBarContainer.createSubview(this.sortBarContainer, {
                styles: "divider"
            });
            $("#" + this.id + " .main-content").addClass("with-sortbar")
        };
        t.prototype.createSortMenu = function () {
            this.sortMenu = this.createSubview(this, {
                styles: "dropdown sortDropdown " + this.sortMenuStyles,
                hidden: true,
                dropdownSelector: "#" + this.id + " .dropdown.sortDropdown",
                chooserButtonSelector: "#" + this.sortBar.templateData.htmlID + " .listButton:first-child",
                itemSelector: this.itemSelector,
                selectedItemID: this.selectedItemID,
                foreignHabitat: this.foreignHabitat,
                resourceFilter: this.sortMenuResourceFilter,
                unitFilter: this.sortMenuUnitFilter
            }, n.SortMenu)
        };
        t.prototype.adjustHandlebar = function () {
            var t = $("#" + this.id).width();
            var e = $("#" + this.handlebar.id).width();
            var i = Math.round(t / 2 - e / 2);
            $("#" + this.handlebar.id).css({
                left: i
            })
        };
        t.prototype.dataUpdate = function (e, i) {
            if (typeof this.content.subviews === "undefined") {
                return
            }
            for (var t = 0; t < this.content.subviews.length; t++) {
                if (typeof this.content.subviews[t].dataUpdate !== "undefined") {
                    this.content.subviews[t].dataUpdate(e, i)
                }
            }
        };
        t.prototype.jQueryEvents = function () {
            t.__super__.jQueryEvents.apply(this, arguments);
            if (this.resizeable) {
                this.handlebar.node().on("mousedown", function () {
                    this.handlebarClicked = true;
                    return false
                }.bind(this))
            }
        };
        t.prototype.reset = function () {
            var t = this.content.node();
            if (t) {
                t.remove()
            }
            this.content.deleteAllSubviews()
        };
        t.prototype.draw = function () {
            t.__super__.draw.apply(this, arguments);
            var e;
            if (this.hasSortBar) {
                if (!this.sortBarContainer) {
                    if (this.foreignHabitat) {
                        e = n.SortBar.prototype.getButtonLabelForSortCriteria.call(this, "special", "dist");
                        this.createSortBar(e.icon, e.text, "asc", undefined, "dist");
                        this.controller.sort.value = "dist"
                    } else {
                        e = n.SortBar.prototype.getButtonLabelForSortCriteria.call(this, "special", "alpha");
                        this.createSortBar(e.icon, e.text, "asc")
                    }
                }
                this.sortBarContainer.draw()
            }
            if (this.resizeable) {
                this.adjustHandlebar()
            }
        };
        t.prototype.moveEvent = function (t) {
            if (this.resizeable && this.handlebarClicked) {
                this.handlebarDragging = true;
                this.resizeWindow(t.pageY);
                this.notify("8ACWF((t", this, this.height)
            }
        };
        t.prototype.resizeWindow = function (t) {
            if (typeof S !== "undefined" && S) {
                return
            }
            var e = parseInt($("#" + this.id).css("top"), 10);
            var i = $("#" + this.handlebar.id).height();
            if (t - this.minimumWindowHeight < e) {
                return
            }
            this.height = t - e - i / 2;
            this.liveUpdate()
        };
        t.prototype.getContainerHeight = function () {
            return $("#" + this.id + " .main-content").height()
        };
        return t
    }(Be);
    n.PopUp = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("dropdownSelector");
            this.addRequired("chooserButtonSelector");
            this.addRequired("itemSelector");
            this.addOption("selectedItemID", null);
            this.addOption("doOffsetting", true);
            this.addOption("paddingOffset", 56);
            this.setOptions(e)
        }
        t.prototype.draw = function () {
            t.__super__.draw.apply(this, arguments);
            if (this.hidden) return;
            if (!this.selectedItemID) return;
            var o = this.dropdownSelector + " ." + this.itemSelector + "[data-primary-key=" + this.selectedItemID + "]";
            var i = $(o).addClass("selected");
            if (i.length === 0) {
                return
            }
            var n = $(this.chooserButtonSelector).offset().top;
            var l = i.last().offset().top;
            var u = i.last().position().top;
            var e = -(l - n - this.paddingOffset);
            var a = $(this.dropdownSelector + " .dropDownContainer");
            if (a.length > 0) {
                var h = a.height();
                var s = u - h / 2;
                a.scrollTop(s);
                if (s > 0) e += s
            }
            var r = n + e - this.paddingOffset;
            if (r < 0) {
                e = e - r
            }
            if (this.doOffsetting) {
                $(this.dropdownSelector).css("top", e)
            }
        };
        t.prototype.toggleOnce = function () {
            return this.hidden ? this.show() : this.removeFromDOM()
        };
        t.prototype.toggle = function () {
            return this.hidden ? this.show() : this.hide()
        };
        t.prototype.selectItem = function (e, t) {
            t = t || this.itemSelector;
            this.itemSelector = t;
            this.selectedItemID = e
        };
        return t
    }(w);
    n.SortBar = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e)
        }
        t.prototype.getImageSrc = function (t, e) {
            return this.notify("1edS3jXy", this, {
                imageName: t,
                imageCategory: e
            })
        };
        t.prototype.getButtonLabelForSortCriteria = function (a, t) {
            var e = this.getImageSrc("buttonCastle", "icons");
            var i = translate("alphabetical");
            if (a === "resource") {
                e = this.getImageSrc(t, "resources");
                i = translate(he[t])
            }
            if (a === "unit") {
                e = this.getImageSrc(t, "units");
                i = translate(y[t].identifier)
            }
            if (a === "special" && t === "dist") {
                e = this.getImageSrc("filter_dist", "icons");
                i = translate("distance")
            }
            if (a === "special" && t === "mainResources") {
                e = this.getImageSrc("buttonCastle", "icons");
                i = translate("all_resources")
            }
            if (a === "special" && t === "allUnits") {
                e = this.getImageSrc("buttonCastle", "icons");
                i = translate("all_units")
            }
            return {
                icon: e,
                text: i
            }
        };
        t.prototype.sortButtonClickHandler = function () {
            this.notify("%OT5IQRM", this)
        };
        t.prototype.ascClickHandler = function () {
            $("#" + this.templateData.htmlID + " .control.asc").addClass("active");
            $("#" + this.templateData.htmlID + " .control.desc").removeClass("active");
            this.notify("9WeTWPlw", this)
        };
        t.prototype.dscClickHandler = function () {
            $("#" + this.templateData.htmlID + " .control.asc").removeClass("active");
            $("#" + this.templateData.htmlID + " .control.desc").addClass("active");
            this.notify("zjKi-r8D", this)
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                selector: "#" + this.templateData.htmlID + " .listButton.resourceSelector",
                event: "click",
                callback: this.sortButtonClickHandler,
                target: this
            });
            e.push({
                selector: "#" + this.templateData.htmlID + " .control.asc",
                event: "click",
                callback: this.ascClickHandler,
                target: this
            });
            e.push({
                selector: "#" + this.templateData.htmlID + " .control.desc",
                event: "click",
                callback: this.dscClickHandler,
                target: this
            });
            return e
        };
        return t
    }(TemplateView);
    n.SortMenu = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.styleArray.push("dropdown");
            this.addOption("selectMessage", "nsK5jgWj");
            this.addOption("foreignHabitat", null);
            this.addOption("resourceFilter", [a.WOOD, a.STONE, a.ORE, a.COPPER, a.SILVER]);
            this.addOption("unitFilter", null);
            this.setOptions(e);
            this.paddingOffset = 48
        }
        t.prototype.createEntry = function (i, a, s, e) {
            var t = this.createSubview(i, {
                styles: this.itemSelector,
                data: e,
                attributes: {
                    "data-primary-key": e
                },
                clickMessage: this.selectMessage
            });
            this.createSubview(t, {
                content: this.getIcon(a),
                styles: "resourceIcon"
            });
            this.createSubview(t, {
                content: s,
                styles: "resourceName"
            });
            t.clearfix()
        };
        t.prototype.create = function () {
            var t = this.createSubview(this, {
                styles: "dropDownContainer"
            });
            this.createEntry(t, "buttonCastle", translate("alphabetical"), "alpha");
            if (this.foreignHabitat) {
                this.createEntry(t, "filter_dist", translate("distance"), "dist")
            }
            this.createSubview(t, {
                resources: ee,
                filterArray: this.resourceFilter,
                showNames: true,
                reverseOrder: true,
                rowClickMessage: this.selectMessage
            }, P.Table);
            this.createEntry(t, "buttonCastle", translate("all_resources"), "mainResources");
            this.createSubview(t, {
                units: y,
                showNames: true,
                reverseOrder: false,
                clickMessage: this.selectMessage,
                filterArray: this.unitFilter
            }, b.Table);
            this.createEntry(t, "buttonCastle", translate("all_units"), "allUnits")
        };
        return t
    }(n.PopUp);
    ue = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("inputFields", false);
            this.setOptions(e)
        }
        t.prototype.getInputValues = function () {
            var e = {};
            this._inputValues = {};
            for (var t = 0; t < this.subviews.length; t++) {
                if (typeof this.subviews[t].getInputInfo != "undefined") {
                    e = this.subviews[t].getInputInfo();
                    this._inputValues[e.id] = e.value
                }
            }
            return this._inputValues
        };
        return t
    }(e);
    L.Table = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.drawStartMessage = "y4B3BDRc";
            this.drawEndMessage = "ysyBprsX";
            this.addRequired("buildings");
            this.addRequired("habitat");
            this.addOption("levelString", true);
            this.addOption("nextLevel", false);
            this.addOption("showNames", false);
            this.addOption("build", false);
            this.addOption("showImage", true);
            this.addOption("useElementContainer", true);
            this.addOption("showUpgrades", false);
            this.addOption("showInfoHover", false);
            this.addOption("requiredResearchDone", true);
            this.setOptions(e);
            this.create()
        }
        t.prototype.sort = function () {
            this.buildingsArray = [];
            for (var t in this.buildings) {
                this.buildingsArray.push([t, this.buildings[t]])
            }
            this.buildingsArray.sort(function (t, e) {
                if (c[t[0]].order < c[e[0]].order) {
                    return -1
                }
                if (c[t[0]].order > c[e[0]].order) {
                    return 1
                }
                return 0
            })
        };
        t.prototype.create = function () {
            var l = {}, i = false,
                e, s, t, a, d, r, h;
            this.sort();
            for (var o = 0; o < this.buildingsArray.length; o++) {
                t = this.buildingsArray[o][0];
                s = e = c[t].primaryKey;
                a = this.habitat.habitatBuildingUpgrades;
                i = false;
                if (this.build === true && c[t].isUpgradeable(this.habitat)) {
                    i = true
                }
                if (a !== null) {
                    r = s;
                    for (var n = 0; n < a.length; n++) {
                        if (r === a[n].buildingTarget.upgradeOf) {
                            e = a[n].buildingTarget.primaryKey;
                            r = e;
                            t = s.toString()
                        }
                    }
                }
                if (!c[e].upgradeTo) {
                    i = false
                }
                if (c[e].isUpgradeable(this.habitat) === false) {
                    i = false
                }
                var u = c[t].identifier.split("/")[0];
                if (!this.requiredResearchDone) {
                    i = false
                }
                if (this.showHabitatName === true) {
                    habitatName = this.habitat.name
                }
                l = {
                    buildingID: t,
                    build: this.build,
                    buildingName: u,
                    buildingPrimaryKey: s,
                    levelString: this.levelString,
                    nextLevel: this.nextLevel,
                    showName: this.showNames,
                    showImage: this.showImage,
                    showUpgrades: this.showUpgrades,
                    upgradeInfo: this.habitat.habitatBuildingUpgrades,
                    buildingLevel: parseInt(c[t].identifier.split("/")[1], 10),
                    buttonEnabled: i,
                    clickMessage: this.clickMessage,
                    buttonClickMessage: "VpY2KZTw",
                    buttonPrimaryKey: e,
                    styles: "building",
                    useContainer: this.useElementContainer,
                    showInfoHover: this.showInfoHover
                };
                this.createSubview(this, l, L.Element)
            }
        };
        t.prototype.dataUpdate = function (e, i) {
            this.setOptions(i);
            for (var t = 0; t < this.subviews.length; t++) {
                if (typeof this.buildings[this.subviews[t].buildingID] != "undefined") {
                    this.subviews[t].dataUpdate(e, {
                        name: translate(c[building].identifier)
                    })
                }
            }
        };
        return t
    }(e);
    L.HoverElement = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("buildingID");
            this.addRequired("level");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var t = c[this.buildingID];
            var e = t.buildResources;
            this.createSubview(this, {
                content: translate("Level") + " " + this.level,
                styles: "title"
            });
            this.createSubview(this, {
                resources: e,
                styles: "resources"
            }, P.Table);
            this.clearfix()
        };
        return t
    }(R);
    L.BuildHoverElement = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("buildingID");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var r = c[this.buildingID];
            if (!r.upgradeTo) {
                this.createSubview(this, {
                    content: translate("Building completed"),
                    styles: "title"
                });
                this.clearfix();
                return
            }
            var t = c[r.upgradeTo[0]];
            var y = parseInt(t.identifier.split("/")[1], 10);
            var h = t.buildResources;
            var T = t.buildDuration;
            var e, i, n, a;
            if (t.volumeResource !== null) {
                h[t.volumeResource] = t.volumeAmount - c[this.buildingID].volumeAmount
            }
            this.createSubview(this, {
                content: translate("Level") + " " + y,
                styles: "title"
            });
            this.createSubview(this, {
                resources: h,
                styles: "resources",
                negativePeople: false,
                time: T
            }, P.Table);
            this.clearfix();
            if (t.storeAmount || utils.dict.size(t.modifier) > 0) {
                this.createSubview(this, {
                    content: translate("Enables"),
                    styles: "title"
                });
                if (t.storeAmount) {
                    for (e = 0, i = t.storeResources.length; e < i; e++) {
                        var v = t.storeResources[e];
                        this.createSubview(this, {
                            content: t.storeAmount + " " + translate(he[v])
                        })
                    }
                }
                if (utils.dict.size(t.modifier) > 0) {
                    for (var w in t.modifier) {
                        var S = t.modifier[w];
                        this.createSubview(this, {
                            content: translate(S.identifier)
                        })
                    }
                }
            }
            if (t.battleValues) {
                for (var u in t.battleValues) {
                    var x = t.battleValues[u],
                        d = translate(u),
                        m = this.getIcon(d),
                        g = x.defense,
                        o = "";
                    o = "<span class='name'>" + m + d + "</span>";
                    o += "<span class='val'>" + g + "</span><div class='clearfix'></div>";
                    this.createSubview(this, {
                        styles: "battleValueRow",
                        content: o
                    })
                }
            }
            if (t.missions && t.missions.length) {
                this.createSubview(this, {
                    content: translate("Available missions"),
                    styles: "title"
                });
                var b = function (t) {
                    return t.primaryKey === p.primaryKey
                };
                for (e = 0, i = t.missions.length; e < i; e++) {
                    var p = t.missions[e];
                    if (r.missions.filter(b).length) {
                        continue
                    }
                    this.createSubview(this, {
                        content: translate(p.identifier)
                    })
                }
            }
            if (t.knowledges && t.knowledges.length) {
                this.createSubview(this, {
                    content: translate("Available research"),
                    styles: "title"
                });
                var _ = function (t) {
                    return t.primaryKey === f.primaryKey
                };
                for (e = 0, i = t.knowledges.length; e < i; e++) {
                    var f = t.knowledges[e];
                    if (r.knowledges.filter(_).length) {
                        continue
                    }
                    this.createSubview(this, {
                        content: translate(f.identifier)
                    })
                }
            }
            if (t.generateResources) {
                this.createSubview(this, {
                    content: translate("Available Resources"),
                    styles: "title"
                });
                for (a in t.generateResources) {
                    var C = t.generateResources[a];
                    n = this.getImage(a, "resources");
                    this.createSubview(this, {
                        content: n + translate(he[a]) + " " + C + " / h",
                        styles: "upgradeResourceAmount"
                    })
                }
            }
            if (t.marketRates && t.marketRates.length) {
                this.createSubview(this, {
                    content: translate("Available market resources"),
                    styles: "title"
                });
                for (e = 0, i = t.marketRates.length; e < i; e++) {
                    var l = t.marketRates[e];
                    n = this.getImage(l.resourceID, "resources");
                    var s = this.createSubview(this, {
                        styles: "wrapper tradeUpgradeAmount"
                    });
                    s.createSubview(s, {
                        content: n,
                        styles: "tradeFor"
                    });
                    for (a in l.rates) {
                        var k = l.rates[a],
                            D = this.getImage(a, "resources");
                        s.createSubview(s, {
                            content: D + " 1:" + k,
                            styles: "tradeWith"
                        })
                    }
                    s.clearfix()
                }
            }
            if (t.marketDistance) {
                this.createSubview(this, {
                    content: translate("Distance to market"),
                    styles: "title"
                });
                this.createSubview(this, {
                    content: translate("%d fields", t.marketDistance)
                })
            }
        };
        return t
    }(R);
    L.InfoHoverView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("buildingID");
            this.setOptions(e);
            this.styleArray.push("buildingHover infoView")
        }
        t.prototype.create = function () {
            var t = c[this.buildingID];
            this.createSubview(this, {
                content: translate(t.identifier.split("/")[0]),
                styles: "title"
            });
            this.createSubview(this, {
                content: t.getDescription(),
                styles: "description"
            })
        };
        return t
    }(R);
    L.Element = function (i) {
        utils.__extends(t, i);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.drawStartMessage = "w_8)iaAh";
            this.drawEndMessage = "8gqyx1pL";
            this.addRequired("buildingID");
            this.addOption("group", "BuildingElement");
            this.addOption("buildingName", "");
            this.addOption("buildingPrimaryKey", -1);
            this.addOption("upgrade", null);
            this.addOption("showLevel", true);
            this.addOption("showUpgrades", false);
            this.addOption("upgradeInfo", null);
            this.addOption("upgradeTimeToComplete", 0);
            this.addOption("buildingLevel", 1);
            this.addOption("build", false);
            this.addOption("showName", false);
            this.addOption("showImage", true);
            this.addOption("levelString", true);
            this.addOption("nextLevel", false);
            this.addOption("buttonClickMessage", null);
            this.addOption("buttonImage", null);
            this.addOption("buttonEnabled", true);
            this.addOption("buttonPrimaryKey", -1);
            this.addOption("useHover", true);
            this.addOption("showInfoHover", false);
            this.addOption("useContainer", true);
            this.addOption("building", {});
            this.addOption("habitat", null);
            this.setOptions(e)
        }
        t.prototype.createHoverElement = function () {
            var t = new R(this.controller, {
                styles: "buildingHover"
            });
            return t
        };
        t.prototype.create = function () {
            var a = "",
                h, T, u = null,
                l, s, m, r, t, o, w = true,
                D = this.clickMessage ? "clickable" : "";
            t = this.useContainer ? this.createContainer({
                styles: D
            }) : this;
            this.container = t;
            if (this.showName === true) {
                a = translate(this.buildingName);
                this.createSubview(t, {
                    styles: "title buildingName",
                    content: a
                })
            }
            if (this.showImage) {
                var n = {
                    styles: "buildingimage",
                    content: this.getImage(this.buildingName, "buildings")
                }, y = e;
                if (this.showInfoHover) {
                    y = N;
                    n.lazyHoverClass = L.InfoHoverView;
                    n.lazyHoverOptions = {
                        buildingID: this.buildingID
                    };
                    n.hoverDelay = 500;
                    n.expiryInterval = 15e3
                }
                u = this.createSubview(t, n, y)
            }
            if (this.levelString === true) {
                h = "levelInfo1";
                a = this.buildingLevel;
                var S = false;
                if (this.nextLevel) {
                    a = +a + 1;
                    h = "levelInfo2";
                    S = true
                }
                if (u !== null) {
                    l = u;
                    s = "levelInfoOnImage"
                } else {
                    l = t;
                    s = "levelInfoSolo"
                }
                r = this.createSubview(l, {
                    content: this.getIcon(h),
                    styles: s,
                    lazyHoverClass: S ? L.BuildHoverElement : null,
                    lazyHoverOptions: {
                        styles: "buildingHover",
                        buildingID: this.buildingPrimaryKey
                    }
                }, N);
                this.createSubview(r, {
                    content: a,
                    styles: "level"
                })
            }
            var g = this.buttonClickMessage;
            m = this.buttonImage || this.getIcon("build");
            s = "button buildbutton";
            if (this.buttonEnabled === false) {
                s = "button buildbuttondisabled disabled buildbutton";
                g = null
            }
            if (this.build === true) {
                var v = e;
                if (this.useHover) {
                    v = N
                } else {
                    w = false
                } if (c[this.buildingPrimaryKey].upgradeTo && c[this.buildingPrimaryKey].upgradeTo.length > 0) {
                    o = this.createSubview(t, {
                        styles: s,
                        content: m,
                        clickMessage: g,
                        data: {
                            primaryKey: this.buildingPrimaryKey,
                            upgradeTo: this.buttonPrimaryKey,
                            upgrade: this.upgrade
                        },
                        propagateClicks: false,
                        lazyHoverClass: w ? L.BuildHoverElement : null,
                        lazyHoverOptions: {
                            styles: "buildingHover",
                            buildingID: this.buttonPrimaryKey
                        }
                    }, v);
                    if (!o.clickMessage) {
                        o.clickCallback = function () {
                            return false
                        }
                    }
                }
            }
            t.extraContentWrapper = t.createSubview(t, {
                styles: "extraContentWrapper"
            });
            t.clearfix();
            if (this.upgradeInfo && this.showUpgrades) {
                var b = this.buildingPrimaryKey;
                for (var d = 0, C = this.upgradeInfo.length; d < C; d++) {
                    var i = this.upgradeInfo[d],
                        _ = this.getIcon("doubleArrow");
                    var p = "button speedup";
                    var f = "SVNznI8l";
                    if (i.buildingTarget.upgradeOf == b) {
                        if (i.isSpeededup() || i.isHalfDurationReached()) {
                            _ = this.getIcon("finishTick");
                            if (this.buildingPrimaryKey != i.buildingTarget.upgradeOf) {
                                p += " disabled";
                                f = null
                            }
                        }
                        this.createSubview(t, {
                            time: utils.date.setCountDownTime(i.complete),
                            runningTimer: true,
                            styles: "readyTime"
                        }, K);
                        r = this.createSubview(this, {
                            content: this.getIcon("levelInfo1"),
                            styles: "nextlevelInfo"
                        });
                        this.createSubview(r, {
                            content: i.buildingTarget.level,
                            styles: "level"
                        });
                        o = this.createSubview(t, {
                            styles: p,
                            content: _,
                            clickMessage: f,
                            data: {
                                primaryKey: this.buildingPrimaryKey,
                                upgrade: i
                            },
                            propagateClicks: false
                        });
                        b = i.buildingTarget.primaryKey
                    }
                }
            }
        };
        t.prototype.dataUpdate = function (e, t) {
            this.setOptions(t)
        };
        return t
    }(e);
    L.UpgradeTable = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("upgrades");
            this.addRequired("buildings");
            this.addOption("showImage", true);
            this.addOption("noClickMessage", false);
            this.addOption("useElementContainer", true);
            this.addOption("requiredResearchDone", true);
            this.setOptions(e);
            this.create()
        }
        t.prototype.create = function () {
            var n = {}, u = 0,
                r;
            for (var e = 0; e < this.upgrades.length; e++) {
                var t = this.upgrades[e];
                var i = t.buildingTarget;
                var o = this.getIcon("buildSpeedup");
                var a = true;
                if (t.isSpeededup() || t.isHalfDurationReached()) {
                    o = this.getIcon("buildFinish");
                    if (!this.buildings[t.buildingTarget.upgradeOf]) {
                        a = false
                    }
                }
                var s = -1;
                for (var l in this.buildings) {
                    if (this.buildings[l].building.buildingType === t.buildingTarget.buildingType) {
                        s = l;
                        break
                    }
                }
                if (!this.requiredResearchDone) {
                    a = false
                }
                if (this.noClickMessage) {
                    this.clickMessage = ""
                }
                n = {
                    buildingID: i.identifier,
                    buildingPrimaryKey: s,
                    build: true,
                    upgrade: t,
                    showName: true,
                    showImage: this.showImage,
                    showLevel: false,
                    buildingName: i.identifier.split("/")[0],
                    buildingLevel: parseInt(i.identifier.split("/")[1], 10),
                    clickMessage: this.clickMessage,
                    buttonClickMessage: "SVNznI8l",
                    buttonImage: o,
                    buttonEnabled: a,
                    useHover: false,
                    buttonPrimaryKey: s,
                    styles: "building",
                    useContainer: this.useElementContainer
                };
                r = this.createSubview(this, n, L.Element);
                this.createSubview(r.container.extraContentWrapper, {
                    time: utils.date.setCountDownTime(t.complete),
                    showText: true,
                    runningTimer: true,
                    caption: t.getCompletionString(),
                    styles: "countdown"
                }, K)
            }
        };
        return t
    }(e);
    L.SpeedBuidlingTable = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.drawStartMessage = "y4B3BDRc";
            this.drawEndMessage = "ysyBprsX";
            this.addRequired("buildings");
            this.addRequired("habitat");
            this.addOption("levelString", true);
            this.addOption("nextLevel", false);
            this.addOption("showNames", false);
            this.addOption("build", false);
            this.addOption("showImage", true);
            this.addOption("showUpgrades", false);
            this.setOptions(e);
            this.create()
        }
        t.prototype.gatherBuildingInfos = function (i) {
            var a = c[i].primaryKey;
            var t = a;
            var e = this.habitat.habitatBuildingUpgrades;
            var s = false;
            var o = c[i].identifier.split("/")[0];
            if (this.build === true && c[i].isUpgradeable(this.habitat)) {
                s = true
            }
            if (e !== null) {
                var r = a;
                for (var n = 0; n < e.length; n++) {
                    if (r == e[n].buildingTarget.upgradeOf) {
                        t = e[n].buildingTarget.primaryKey;
                        r = t;
                        i = a.toString()
                    }
                }
            }
            if (c[t].upgradeTo === null) {
                s = false
            }
            if (c[t].isUpgradeable(this.habitat) === false) {
                s = false
            }
            return {
                name: o,
                primaryKey: a,
                buttonEnabled: s,
                buttonPrimaryKey: t,
                upgrades: e
            }
        };
        t.prototype.compileStringOpen = function () {
            var e;
            var t = this.openHtml(this.element, {
                id: this.id,
                styles: this.styles,
                hidden: this.hidden
            });
            this.buildingsArray = this.habitat.getSortedBuildings();
            for (var a = 0, s = this.buildingsArray.length; a < s; a++) {
                building = this.buildingsArray[a][0];
                var i = this.gatherBuildingInfos(building);
                e = {
                    buildingID: building,
                    build: this.build,
                    buildingName: i.name,
                    buildingPrimaryKey: i.primaryKey,
                    levelString: this.levelString,
                    nextLevel: this.nextLevel,
                    showName: this.showNames,
                    showImage: this.showImage,
                    showUpgrades: this.showUpgrades,
                    upgradeInfo: this.habitat.habitatBuildingUpgrades,
                    buildingLevel: parseInt(c[building].identifier.split("/")[1], 10),
                    buttonEnabled: i.buttonEnabled,
                    clickMessage: this.clickMessage,
                    buttonClickMessage: "VpY2KZTw",
                    buttonPrimaryKey: i.buttonPrimaryKey,
                    styles: "building",
                    useHover: true
                };
                t += this.openHtml("div", {
                    styles: "building"
                });
                t += this.levelInfo(e);
                t += this.buildButton(e);
                t += this.clearfix();
                t += this.timeElement(e);
                t += this.closeHtml("div")
            }
            return t
        };
        t.prototype.levelInfo = function (t) {
            "use strict";
            var i = "";
            var o = null;
            if (t.levelString === false) return "";
            var a = "levelInfo1";
            var e = t.buildingLevel;
            var s = false;
            if (t.nextLevel) {
                e = +e + 1;
                a = "levelInfo2";
                s = true
            }
            var n = "levelInfoSolo";
            var r = this.addElement({
                styles: "level",
                content: e
            });
            i = this.addElement({
                styles: n,
                content: this.getIcon(a) + r,
                lazyHoverClass: s ? L.BuildHoverElement : null,
                lazyHoverOptions: {
                    styles: "buildingHover",
                    buildingID: t.buttonPrimaryKey
                }
            });
            return i
        };
        t.prototype.buildButton = function (t) {
            "use strict";
            var i = "",
                e;
            var n, r;
            if (t.build === false) return "";
            if (!c[t.buildingPrimaryKey].upgradeTo || c[t.buildingPrimaryKey].upgradeTo.length === 0) return "";
            var a = t.buttonClickMessage;
            var s = t.buttonImage || this.getIcon("build");
            e = "button buildbutton";
            if (t.buttonEnabled === false) {
                e = "button buildbutton disabled ";
                a = null
            }
            i = this.addElement({
                styles: e,
                content: s,
                clickMessage: a,
                data: {
                    primaryKey: t.buildingPrimaryKey,
                    upgradeTo: t.buttonPrimaryKey,
                    upgrade: t.upgrade,
                    habitat: this.habitat,
                    buttonPrimaryKey: t.buttonPrimaryKey
                },
                lazyHoverClass: t.useHover ? L.BuildHoverElement : null,
                lazyHoverOptions: {
                    styles: "buildingHover",
                    buildingID: t.buttonPrimaryKey
                }
            }, true);
            return i
        };
        t.prototype.timeElement = function (e) {
            "use strict";
            var i = "",
                d;
            if (!e.upgradeInfo || !e.showUpgrades) return "";
            var n = e.buildingPrimaryKey;
            for (var a = 0, u = e.upgradeInfo.length; a < u; a++) {
                var t = e.upgradeInfo[a];
                var s = this.getIcon("doubleArrow");
                var r = "button speedup";
                var o = "SVNznI8l";
                if (t.buildingTarget.upgradeOf == n) {
                    if (t.isSpeededup() || t.isHalfDurationReached()) {
                        s = this.getIcon("finishTick");
                        if (e.buildingPrimaryKey != t.buildingTarget.upgradeOf) {
                            r += " disabled";
                            o = null
                        }
                    }
                    i += this.addTimer({
                        time: t.complete,
                        timeFunction: utils.date.setCountDownTime,
                        styles: "readyTime"
                    });
                    var h = this.addElement({
                        styles: "level",
                        content: t.buildingTarget.level
                    });
                    var c = this.addElement({
                        styles: r,
                        content: s,
                        clickMessage: o,
                        data: {
                            primaryKey: e.buildingPrimaryKey,
                            upgrade: t
                        }
                    }, true);
                    var l = this.getIcon("levelInfo1") + h + c;
                    i += this.addElement({
                        styles: "nextlevelInfo",
                        content: l
                    });
                    i += this.clearfix();
                    n = t.buildingTarget.primaryKey
                }
            }
            return i
        };
        t.prototype.clickHandler = function (e) {
            var t = this.searchElement(e.currentTarget.id);
            if (!t) return;
            this.data = t.data;
            this.notify(t.clickMessage, this, t.data)
        };
        t.prototype.dataUpdate = function (e, i) {
            this.setOptions(i);
            for (var t = 0; t < this.subviews.length; t++) {
                if (typeof this.buildings[this.subviews[t].buildingID] != "undefined") {
                    this.subviews[t].dataUpdate(e, {
                        name: translate(c[building].identifier)
                    })
                }
            }
        };
        return t
    }(FastView);
    b.RecruitTable = function (e) {
        utils.__extends(t, ue);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("amountOnly", false);
            this.addRequired("units");
            this.addRequired("habitat");
            this.addOption("showUpgrades", false);
            this.addOption("showNames", true);
            this.addOption("showImage", true);
            this.addOption("imageClickMessage", null);
            this.addOption("inputFields", true);
            this.addOption("maxButtonClickMessage", null);
            this.addOption("inputChangeMessage", null);
            this.addOption("recruitButtonClickMessage", null);
            this.addOption("useContainers", false);
            this.addOption("sessionPrefix", null);
            this.setOptions(e);
            this.createTable()
        }
        t.prototype.createTable = function () {
            var e = {}, i, n, r, a;
            var o = utils.dict.toSortedArray(this.units, "order");
            for (var s = 0; s < o.length; s++) {
                var t = o[s].primaryKey;
                if (this.showNames === true) {
                    r = translate(y[t].identifier)
                }
                i = this.units[t].getMaxRecruiting(this.habitat);
                n = Boolean(this.units[t].isRecruitable(this.habitat) && i);
                a = this.useContainers ? this.createContainer() : this;
                e = {
                    amountOnly: this.amountOnly,
                    unitID: this.units[t].primaryKey.toString(),
                    recruit: true,
                    unitName: r,
                    amount: i,
                    recruitCount: this.habitat.getHabitatUnitAmount(this.units[t].primaryKey),
                    inputFields: this.inputFields,
                    recruitButtonEnabled: n,
                    recruitButtonClickMessage: this.recruitButtonClickMessage,
                    showImage: this.showImage,
                    imageClickMessage: this.imageClickMessage,
                    habitat: this.habitat,
                    showUpgrades: this.showUpgrades,
                    sessionPrefix: this.sessionPrefix
                };
                if (this.inputFields === true) {
                    e.maxButtonClickMessage = this.maxButtonClickMessage;
                    e.inputChangeMessage = this.inputChangeMessage
                }
                a.createSubview(a, e, b.Element)
            }
        };
        return t
    }(ue);
    b.RecruitOrderTable = function (e) {
        utils.__extends(t, ue);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("unitOrders");
            this.addRequired("habitat");
            this.addOption("showNames", true);
            this.addOption("showShortTimer", false);
            this.addOption("showImage", true);
            this.addOption("buttonClickMessage", null);
            this.addOption("useContainers", false);
            this.addOption("showTimers", true);
            this.addOption("allowSpeedUp", true);
            this.addOption("sessionPrefix", null);
            this.setOptions(e);
            this.createTable()
        }
        t.prototype.createTable = function () {
            var i = {};
            var a = "";
            for (var e = 0; e < this.unitOrders.length; e++) {
                var t = this.unitOrders[e];
                var s = t.unit;
                var n = this.notify("rvHW39mY", this, {
                    imageCategory: "icons",
                    imageName: "recruitSpeedup"
                });
                var l = this.buttonClickMessage;
                if (t.isSpeededup() || t.isHalfDurationReached()) {
                    n = this.notify("rvHW39mY", this, {
                        imageCategory: "icons",
                        imageName: "recruitFinish"
                    })
                }
                if (this.showNames === true) {
                    a = translate(s.identifier)
                }
                var r = this.useContainers ? this.createContainer() : this;
                if (e === 0) {
                    this.showShortTimer = false
                } else {
                    this.showShortTimer = true
                }
                var o = Math.floor((t.complete - (new Date - W)) / 1e3);
                var u = o / t.orderAmount;
                i = {
                    unitID: "" + s.primaryKey,
                    recruit: false,
                    unitName: a,
                    amount: t.orderAmount,
                    amountDone: t.amountDone,
                    showTimer: this.showTimers,
                    showShortTimer: this.showShortTimer,
                    showImage: this.showImage,
                    speedUp: this.allowSpeedUp,
                    buttonImage: n,
                    timerTotal: o,
                    timerSingle: u,
                    clickMessage: l,
                    data: this.unitOrders[e],
                    habitat: this.habitat,
                    timerDivider: "/",
                    sessionPrefix: this.sessionPrefix
                };
                r.createSubview(r, i, b.Element)
            }
        };
        t.prototype.dataUpdate = function (t, e) {};
        return t
    }(ue);
    b.SpeedRecruitTable = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("amountOnly", false);
            this.addRequired("units");
            this.addRequired("habitat");
            this.addOption("showUpgrades", false);
            this.addOption("showNames", true);
            this.addOption("showImage", true);
            this.addOption("imageClickMessage", null);
            this.addOption("inputFields", true);
            this.addOption("maxButtonClickMessage", null);
            this.addOption("inputChangeMessage", null);
            this.addOption("recruitButtonClickMessage", null);
            this.addOption("useContainers", false);
            this.addOption("sessionPrefix", null);
            this.setOptions(e)
        }
        t.prototype.compileStringOpen = function () {
            var t = this.openHtml(this.element, {
                id: this.id,
                styles: this.styles,
                hidden: this.hidden
            });
            var s = {}, i, n, r, l;
            var o = utils.dict.toSortedArray(this.units, "order");
            for (var a = 0; a < o.length; a++) {
                var e = o[a].primaryKey;
                if (this.showNames === true) {
                    r = translate(y[e].identifier)
                }
                i = this.units[e].getMaxRecruiting(this.habitat);
                n = Boolean(this.units[e].isRecruitable(this.habitat) && i);
                l = this.useContainers ? this.createContainer() : this;
                s = {
                    amountOnly: this.amountOnly,
                    unitID: this.units[e].primaryKey.toString(),
                    recruit: true,
                    unitName: r,
                    amount: i,
                    recruitCount: this.habitat.getHabitatUnitAmount(this.units[e].primaryKey),
                    inputFields: this.inputFields,
                    recruitButtonEnabled: n,
                    recruitButtonClickMessage: this.recruitButtonClickMessage,
                    imageClickMessage: this.imageClickMessage,
                    habitat: this.habitat,
                    showUpgrades: this.showUpgrades,
                    sessionPrefix: this.sessionPrefix,
                    amountDone: 0,
                    amountStyle: "",
                    buttonImage: null,
                    speedUpButtonClickMessage: null,
                    showTimer: false,
                    showShortTimer: false,
                    timerTotal: null,
                    timerSingle: null,
                    maxButtonClickMessage: "AvuoH6W9",
                    inputChangeMessage: null,
                    timerDivider: null,
                    showZeroUnits: true
                };
                t += this.openHtml("div", {
                    styles: "unitElement"
                });
                t += this.createUnitElement(s);
                t += this.closeHtml("div")
            }
            t += this.clearfix();
            return t
        };
        t.prototype.createUnitElement = function (t) {
            var i, n;
            var m;
            var e = "";
            var l;
            var s;
            e += this.openHtml("div", {
                styles: "details"
            });
            if (t.amountOnly) {
                i = t.recruitCount
            } else {
                if (t.recruit === true) {
                    i = t.recruitCount + " x " + t.unitName
                } else {
                    i = t.unitName
                }
            } if (i === "") {
                i = "0"
            }
            e += this.addElement({
                content: i,
                styles: "unitAmount"
            });
            if (t.recruit === true) {
                var f = t.recruitButtonEnabled ? t.amount.toString() : "0";
                i = translate("%d affordable", f)
            } else {
                i = t.amount
            } if (!t.amountOnly) {
                e += this.addElement({
                    content: i,
                    styles: "affordable"
                })
            }
            if (t.showTimer === true) {
                e += this.openHtml("div", {
                    styles: "timers"
                });
                if (!t.showShortTimer) {
                    e += this.addTimer({
                        time: t.timerSingle,
                        styles: "shortTimer"
                    });
                    if (t.timerDivider) {
                        e += this.addElement({
                            styles: "timerDivider",
                            content: t.timerDivider
                        })
                    }
                }
                e += this.addTimer({
                    time: t.timerTotal,
                    showText: true,
                    caption: t.amount - t.amountDone + " in ",
                    styles: "totalTimer"
                });
                e += this.clearfix();
                e += this.closeHtml("div")
            }
            e += this.closeHtml("div");
            s = null;
            if (t.inputFields) {
                var y = t.sessionPrefix && t.habitat ? t.sessionPrefix + "_" + te + "_" + t.habitat.id + "_" + t.unitID : "";
                l = {
                    max: t.amount,
                    maxButtonClickMessage: t.maxButtonClickMessage,
                    inputChangeMessage: t.inputChangeMessage,
                    styles: "maxInput",
                    storageId: y,
                    registerChangeHandler: true,
                    lazyHoverClass: R,
                    lazyHoverOptions: {
                        content: translate("%d affordable", t.amount),
                        styles: "buildingHover"
                    }
                };
                var u = this.addInputWithMax(l);
                e += u.html;
                s = u.inputFieldId
            }
            if (t.recruit === true) {
                var r = null;
                if (t.recruitButtonEnabled === true) {
                    n = "button";
                    r = t.recruitButtonClickMessage
                } else {
                    n = "button disabled buildbuttondisabled"
                }
                e += this.addElement({
                    clickMessage: r,
                    styles: n,
                    content: this.notify("rvHW39mY", this, {
                        imageName: "recruit",
                        imageCategory: "icons"
                    }),
                    data: {
                        inputFieldId: s,
                        habitat: t.habitat,
                        unitID: t.unitID
                    }
                }, r ? true : false)
            }
            if (t.speedUp === true) {
                e += this.addElement({
                    styles: "button",
                    content: t.buttonImage || this.notify("rvHW39mY", this, {
                        imageName: "recruitSpeedup",
                        imageCategory: "icons"
                    }),
                    clickMessage: t.speedUpButtonClickMessage
                }, true)
            }
            if (t.showUpgrades) {
                var h = t.habitat.habitatUnitOrders;
                for (var o = 0, p = h.length; o < p; o++) {
                    var a = h[o];
                    if (a.unit.primaryKey !== +t.unitID) continue;
                    var c = a.isSpeededup() || a.isHalfDurationReached(),
                        d = c ? "finishTick" : "doubleArrow";
                    e += this.addTimer({
                        time: a.complete,
                        timeFunction: utils.date.setCountDownTime,
                        styles: "readyTime"
                    });
                    e += this.addElement({
                        content: a.orderAmount,
                        styles: "orderAmount"
                    });
                    e += this.addElement({
                        styles: "button speedup",
                        content: this.notify("rvHW39mY", this, {
                            imageName: d,
                            imageCategory: "icons"
                        }),
                        data: {
                            unitOrder: a
                        },
                        clickMessage: "X1GRXWT5"
                    }, true)
                }
            }
            return e
        };
        t.prototype.clickHandler = function (n) {
            var i;
            t.__super__.clickHandler.apply(this, arguments);
            var a = this.searchElement(n.currentTarget.id);
            if (!a) return;
            var e = a.data;
            if (!e) return;
            if (e.inputFieldId) {
                var s = document.getElementById(e.inputFieldId);
                if (s) {
                    i = parseInt(s.value, 10);
                    if (isNaN(i)) i = 0
                }
                this.notify(a.clickMessage, this, {
                    habitat: e.habitat,
                    unitID: e.unitID,
                    amount: i
                })
            }
            if (e.unitOrder) {
                this.notify(a.clickMessage, this, e)
            }
        };
        return t
    }(FastView);
    P.Table = function (e) {
        utils.__extends(t, ue);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.drawStartMessage = "v1bo5uGy";
            this.drawEndMessage = "(7p%UnUi";
            this.addOption("rowID", -1);
            this.addOption("resources", null);
            this.addOption("habitat", null);
            this.addOption("time", null);
            this.addOption("showNames", false);
            this.addOption("resourceColors", null);
            this.addOption("filterArray", null);
            this.addOption("inputFields", false);
            this.addOption("maxButtonClickMessage", null);
            this.addOption("inputChangeMessage", null);
            this.addOption("generate", false);
            this.addOption("maxPeople", 0);
            this.addOption("negativePeople", true);
            this.addOption("rates", null);
            this.addOption("imageClickMessage", null);
            this.addOption("rowClickMessage", null);
            this.addOption("reverseOrder", false);
            this.addOption("sessionPrefix", null);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var e = {}, s = "",
                u, i;
            if (this.habitat !== null) {
                this.resources = this.habitat.habitatResources
            }
            var n = [];
            for (var o in this.resources) {
                if (this.reverseOrder) {
                    n.unshift(o)
                } else {
                    n.push(o)
                }
            }
            if (this.resources !== null) {
                for (var l = n.length, r = 0; r < l; r++) {
                    var t = n[r];
                    if (this.filterArray !== null) {
                        if (this.filterArray.indexOf(t) == -1) {
                            continue
                        }
                    }
                    if (this.showNames === true) {
                        s = translate(ee[t].identifier)
                    }
                    if (this.habitat !== null && this.generate === true) {
                        this.notify("_V6%tK-F", this)
                    }
                    i = "";
                    if (typeof this.resources[t] == "string") {
                        i = this.resources[t]
                    } else if (typeof this.resources[t].amount != "undefined") {
                        i = Math.floor(this.resources[t].amount);
                        if (this.resources[t].storeAmount && this.resources[t].amount > this.resources[t].storeAmount) {
                            i = Math.floor(this.resources[t].storeAmount)
                        }
                        if (t == a.PEOPLE && this.negativePeople === true) {
                            i = Math.floor(this.resources[t].storeAmount - this.resources[t].amount)
                        }
                    } else {
                        i = Math.floor(this.resources[t]);
                        if (this.maxPeople !== 0) {
                            i = Math.floor(this.maxPeople - this.resources[t])
                        }
                    } if (typeof i != "string" && isNaN(i)) {
                        i = ""
                    }
                    e = {
                        parent: this,
                        habitat: this.habitat,
                        resourceID: t,
                        amount: i,
                        resourceName: s,
                        inputFields: this.inputFields,
                        imageClickMessage: this.imageClickMessage,
                        attributes: {
                            "data-primary-key": t
                        },
                        sessionPrefix: this.sessionPrefix
                    };
                    if (this.resourceColors !== null) {
                        e.colorClass = this.resourceColors[t]
                    }
                    if (this.inputFields === true) {
                        e.maxButtonClickMessage = this.maxButtonClickMessage;
                        e.inputChangeMessage = this.inputChangeMessage
                    }
                    if (this.rates && this.rates.rates[t]) {
                        e.rate = this.rates.rates[t]
                    }
                    if (this.rowClickMessage) {
                        e.clickMessage = this.rowClickMessage
                    }
                    e.styles = e.styles || "";
                    e.styles += " " + s + " resourceElement";
                    this.addSubview(new P.Element(this.controller, e))
                }
            }
            if (this.time !== null) {
                if (this.showNames === true) {
                    s = translate(ee[a.PEOPLE].identifier)
                }
                e = {
                    parent: this,
                    resourceID: a.TIME,
                    amount: utils.date.secToTimeStr(this.time),
                    resourceName: s,
                    inputFields: this.inputFields
                };
                this.addSubview(new P.Element(this.controller, e))
            }
        };
        t.prototype.destroy = function () {
            this.notify("BRfyQ)_c", this)
        };
        t.prototype.timeEvent = function (r) {
            var t;
            if (this.habitat !== null) {
                for (var s in this.habitat.habitatResources) {
                    if (this.filterArray !== null && this.filterArray.indexOf(s) === -1) {
                        continue
                    }
                    t = this.habitat.habitatResources[s];
                    this.resources[s] = t
                }
            }
            for (var i = 0; i < this.subviews.length; i++) {
                if (this.subviews[i].group !== "Resource") {
                    continue
                }
                var n = this.subviews[i];
                var e = 0;
                t = n.resourceID;
                if (typeof this.resources[t].amount !== "undefined") {
                    e = Math.floor(this.resources[t].amount)
                } else {
                    e = Math.floor(this.resources[t])
                } if (t == a.PEOPLE) {
                    if (typeof this.resources[t].amount != "undefined" && this.negativePeople === true) {
                        e = Math.floor(this.resources[t].storeAmount - this.resources[t].amount)
                    } else if (typeof this.resources[t].amount == "undefined" && this.maxPeople !== 0) {
                        e = Math.floor(this.maxPeople - this.resources[t])
                    }
                }
                n.dataUpdate(null, {
                    amount: e
                })
            }
        };
        t.prototype.getAllFieldValues = function () {
            var e = [];
            if (this.inputFields === false) {
                return this.resources
            }
            for (var t = 0, i = this.subviews.length; t < i; t++) {
                if (this.subviews[t].group !== "Resource") continue;
                e.push(this.subviews[t].getInputInfo())
            }
            return e
        };
        t.prototype._getSubviewsByResourceID = function (t) {
            t = t || this.filterArray || ["1", "2", "3"];
            var e = [];
            e = t.map(function (t, e) {
                return this.subviews.filter(function (e, i) {
                    return e.resourceID === t
                })[0]
            }, this);
            return e
        };
        t.prototype.respectMaxTransportCapacity = function (t, n) {
            if (!this.inputFields) return;
            var a = t;
            var s = this._getSubviewsByResourceID(n);
            for (var e = 0, r = s.length; e < r; e++) {
                var i = s[e].inputField;
                if (t < i.data) {
                    i.overrideInputValue(t);
                    a = t
                }
                t -= i.data;
                if (t < 0) t = 0
            }
            return a
        };
        return t
    }(ue);
    P.Element = function (i) {
        utils.__extends(t, e);

        function t(o, n) {
            t.__super__.constructor.apply(this, arguments);
            this.drawStartMessage = "1-MUaFYm";
            this.drawEndMessage = "RE3tqyLp";
            this.addRequired("resourceID");
            this.addOption("habitat", null);
            this.addOption("group", "Resource");
            this.addOption("resourceName", "");
            this.addOption("amount", "");
            this.addOption("inputFields", false);
            this.addOption("colorClass", null);
            this.addOption("maxButtonClickMessage", "AvuoH6W9");
            this.addOption("inputChangeMessage", null);
            this.addOption("rate", null);
            this.addOption("imageClickMessage", null);
            this.addOption("sessionPrefix", null);
            this.setOptions(n);
            var i = {
                parent: this,
                content: this.notify("rvHW39mY", this, {
                    imageName: this.resourceID,
                    imageCategory: "resources"
                }),
                styles: "resourceIcon",
                clickMessage: this.imageClickMessage,
                data: this.resourceID
            };
            this.addSubview(new e(this.controller, i));
            var a = new e(this.controller, {
                parent: this,
                styles: "details"
            });
            var s = "resourceAmount";
            if (this.colorClass) {
                s += " " + this.colorClass
            }
            i = {
                parent: a,
                content: this.amount,
                styles: s
            };
            this.amountLabel = new e(this.controller, i);
            a.addSubview(this.amountLabel);
            if (this.rate) {
                i = {
                    parent: a,
                    content: "1:" + this.rate,
                    styles: "rate"
                };
                a.addSubview(new e(this.controller, i))
            }
            this.addSubview(a);
            if (this.resourceName !== "") {
                i = {
                    parent: this,
                    content: this.resourceName,
                    styles: "resourceName"
                };
                this.addSubview(new e(this.controller, i))
            }
            if (this.inputFields === true) {
                var r = this.sessionPrefix && this.habitat ? this.sessionPrefix + "_" + te + "_" + this.habitat.id + "_" + this.resourceID : "";
                i = {
                    parent: this,
                    max: this.amount,
                    maxButtonClickMessage: this.maxButtonClickMessage,
                    inputChangeMessage: this.inputChangeMessage,
                    styles: "maxInput",
                    storageId: r
                };
                this.inputField = new O.InputFieldWithMax(this.controller, i);
                this.addSubview(this.inputField)
            }
        }
        t.prototype.getInputInfo = function () {
            if (typeof this.inputField == "undefined") {
                return null
            }
            return {
                id: this.resourceID,
                value: this.inputField.data
            }
        };
        t.prototype.dataUpdate = function (t, e) {
            this.setOptions(e);
            if (typeof this.inputField != "undefined") {
                this.inputField.dataUpdate(t, this.amount)
            }
            if (typeof this.amountLabel != "undefined") {
                this.amountLabel.dataUpdate(t, {
                    content: this.amount
                });
                this.amountLabel.draw()
            }
        };
        return t
    }(e);
    ue = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("inputFields", false);
            this.setOptions(e)
        }
        t.prototype.getInputValues = function () {
            var e = {};
            this._inputValues = {};
            for (var t = 0; t < this.subviews.length; t++) {
                if (typeof this.subviews[t].getInputInfo != "undefined") {
                    e = this.subviews[t].getInputInfo();
                    this._inputValues[e.id] = e.value
                }
            }
            return this._inputValues
        };
        return t
    }(e);
    b.Table = function (e) {
        utils.__extends(t, ue);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.drawStartMessage = "j5rAMQSb";
            this.drawEndMessage = "uFb%Aa0p";
            this.addOption("units", null);
            this.addOption("habitat", null);
            this.addOption("showNames", false);
            this.addOption("recruit", false);
            this.addOption("inputFields", false);
            this.addOption("maxButtonClickMessage", null);
            this.addOption("inputChangeMessage", null);
            this.addOption("filterArray", null);
            this.addOption("imageClickMessage", null);
            this.addOption("reverseOrder", false);
            this.addOption("finalClearfix", true);
            this.addOption("showZeroUnits", true);
            this.addOption("sessionPrefix", null);
            this.addOption("hoverOnClick", false);
            this.addOption("habitat", null);
            this.setOptions(e);
            this.createTable()
        }
        t.prototype.createTable = function () {
            var e = {}, s = "";
            if (this.units === null) {
                return
            }
            var i = [];
            for (var n in this.units) {
                var r = this.units.length ? this.units[n].primaryKey : n;
                if (this.reverseOrder) {
                    i.unshift(r)
                } else {
                    i.push(r)
                }
            }
            for (var o = i.length, a = 0; a < o; a++) {
                var t = i[a];
                if (this.filterArray !== null) {
                    if (this.filterArray.indexOf(t) == -1 && this.filterArray.indexOf(parseInt(t, 10)) == -1) {
                        continue
                    }
                }
                if (this.showNames === true) {
                    s = translate(y[t].identifier)
                }
                e = {
                    parent: this,
                    unitID: t,
                    recruit: this.recruit,
                    unitName: s,
                    amount: this.units[t],
                    inputFields: this.inputFields,
                    imageClickMessage: this.imageClickMessage,
                    habitat: this.habitat,
                    attributes: {
                        "data-primary-key": t
                    },
                    showZeroUnits: this.showZeroUnits,
                    sessionPrefix: this.sessionPrefix,
                    hoverOnClick: this.hoverOnClick
                };
                if (this.inputFields === true) {
                    e.maxButtonClickMessage = this.maxButtonClickMessage;
                    e.inputChangeMessage = this.inputChangeMessage
                }
                if (this.clickMessage !== null) {
                    e.clickMessage = this.clickMessage;
                    e.data = this.units[t]
                }
                this.addSubview(new b.Element(this.controller, e))
            }
            this.clickMessage = null;
            if (this.finalClearfix) {
                this.clearfix()
            }
        };
        t.prototype.dataUpdate = function (e, i) {
            this.setOptions(i);
            for (var t = 0; t < this.subviews.length; t++) {
                if (typeof this.units[this.subviews[t].unitID] != "undefined") {
                    this.subviews[t].dataUpdate(e, {
                        name: translate(y[this.subviews[t].unitID].identifier),
                        amount: this.units[this.subviews[t].unitID]
                    })
                }
            }
        };
        t.prototype.getSelectedUnits = function () {
            var i = [],
                e = null;
            if (this.inputFields === false) {
                return this.units
            }
            for (var t = 0; t < this.subviews.length; t++) {
                if (this.subviews[t].group != "UnitElement") {
                    continue
                }
                e = this.subviews[t].getInputInfo();
                if (e === null || e.value === 0) {
                    continue
                }
                i.push(y[this.subviews[t].unitID])
            }
            return i
        };
        t.prototype.getAllFieldValues = function () {
            var e = [];
            if (this.inputFields === false) {
                return this.units
            }
            for (var t = 0; t < this.subviews.length; t++) {
                if (this.subviews[t].group != "UnitElement") {
                    continue
                }
                e.push(this.subviews[t].getInputInfo())
            }
            return e
        };
        return t
    }(ue);
    b.HoverView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("unit");
            this.addOption("habitat", null);
            this.setOptions(e);
            this.styleArray.push("unitHover")
        }
        t.prototype.create = function () {
            var t = [];
            if (this.habitat !== null) {
                this.unitMod = this.unit.applyAllModifiers(this.habitat);
                if (this.habitat.habitatKnowledges) {
                    for (var i in this.unit.requiredKnowledges) {
                        if (!this.habitat.habitatKnowledges[i]) {
                            t.push(this.unit.requiredKnowledges[i])
                        }
                    }
                }
            } else {
                this.unitMod = this.unit
            }
            var s = this.unitMod.buildResources;
            var n = this.unitMod.buildDuration;
            if (this.unit.volumeAmount !== null && this.unit.volumeAmount !== 0) {
                s[a.PEOPLE] = this.unit.volumeAmount
            }
            this.createSubview(this, {
                styles: "title",
                content: translate(this.unit.identifier)
            });
            this.createSubview(this, {
                styles: "resources",
                resources: s,
                time: n
            }, P.Table);
            this.clearfix();
            if (t.length > 0) {
                this.createSubview(this, {
                    styles: "title sub",
                    content: translate("Researches")
                });
                for (var e = 0; e < t.length; e++) {
                    this.createSubview(this, {
                        styles: "icon",
                        content: this.notify("rvHW39mY", this, {
                            imageName: t[e].identifier,
                            imageCategory: "knowledges"
                        })
                    });
                    this.createSubview(this, {
                        styles: "description nextToIcon",
                        content: translate(t[e].identifier)
                    });
                    this.clearfix()
                }
            }
        };
        return t
    }(R);
    b.InfoHoverView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("unit");
            this.addOption("habitat", null);
            this.addOption("showUnitInfo", false);
            this.setOptions(e);
            this.styleArray.push("unitHover infoView")
        }
        t.prototype.create = function () {
            if (!this.unit) {
                return
            }
            var e = [];
            if (this.habitat !== null) {
                this.unitMod = this.unit.applyAllModifiers(this.habitat);
                if (this.habitat.habitatKnowledges) {
                    for (var t in this.unit.requiredKnowledges) {
                        if (!this.habitat.habitatKnowledges[t]) {
                            e.push(this.unit.requiredKnowledges[t])
                        }
                    }
                }
            } else {
                this.unitMod = this.unit
            }
            var i = this.unitMod.buildResources;
            if (this.unit.volumeAmount !== null && this.unit.volumeAmount !== 0) {
                i[a.PEOPLE] = this.unit.volumeAmount
            }
            this.createSubview(this, {
                styles: "title",
                content: translate(this.unit.identifier)
            });
            if (this.showUnitInfo) {
                this.createSubview(this, {
                    styles: "icon",
                    content: this.notify("rvHW39mY", this, {
                        imageName: this.unit.primaryKey.toString(),
                        imageCategory: "units"
                    })
                });
                this.createSubview(this, {
                    styles: "description",
                    content: this.unit.getDescription()
                });
                this.clearfix();
                this.createSubview(this, {
                    styles: "title sub",
                    content: translate("Values")
                })
            }
            this.createSubview(this, {
                styles: "grid name",
                content: translate("Speed")
            });
            this.createSubview(this, {
                styles: "grid detail",
                content: $.sprintf(o.getValueOf("%0.1f minutes per field"), this.unitMod.secondsPerField / 60)
            });
            this.clearfix();
            this.createSubview(this, {
                styles: "grid name",
                content: translate("Transport capacity")
            });
            this.createSubview(this, {
                styles: "grid detail",
                content: this.unit.storeAmount
            });
            this.clearfix();
            this.createSubview(this, {
                styles: "grid name",
                content: translate("Corps")
            });
            var s = this.createSubview(this, {
                styles: "grid detail img"
            });
            this._createImageWithValue(s, this.unit.corps, this.unit.corps);
            this.clearfix();
            if (this.unit.battleValues) {
                this.createSubview(this, {
                    styles: "divider"
                });
                this.createBattleValues()
            }
        };
        t.prototype.createBattleValues = function () {
            var r, e;
            var n = this.createSubview(this, {
                styles: "battleValueList"
            }),
                t, a, s;
            for (var i in this.unitMod.battleValues) {
                e = this.unitMod.battleValues[i];
                t = this.createSubview(n, {});
                t.createSubview(t, {
                    styles: "categoryIcon",
                    content: this.notify("rvHW39mY", this, {
                        imageCategory: "icons",
                        imageName: i
                    })
                });
                t.createSubview(t, {
                    styles: "name",
                    content: translate(i)
                });
                a = t.createSubview(t, {
                    styles: "attackRow"
                });
                this._createImageWithValue(a, "attack", e.offense);
                s = t.createSubview(t, {
                    styles: "defenceRow"
                });
                this._createImageWithValue(s, "defense", e.defense);
                this.clearfix()
            }
            this.clearfix()
        };
        t.prototype._createImageWithValue = function (t, e, i) {
            t.createSubview(t, {
                content: this.notify("rvHW39mY", this, {
                    imageCategory: "icons",
                    imageName: e
                })
            });
            t.createSubview(t, {
                content: i
            })
        };
        return t
    }(R);
    b.Element = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.drawStartMessage = "qyLnvkSe";
            this.drawEndMessage = "ZURJosro";
            this.addRequired("unitID");
            this.addRequired("habitat");
            this.addOption("showUpgrades", false);
            this.addOption("amountOnly", false);
            this.addOption("group", "UnitElement");
            this.addOption("unitName", "");
            this.addOption("amount", 0);
            this.addOption("amountDone", 0);
            this.addOption("amountStyle", "");
            this.addOption("buttonImage", null);
            this.addOption("recruitCount", 0);
            this.addOption("recruit", false);
            this.addOption("speedUp", false);
            this.addOption("recruitButtonEnabled", false);
            this.addOption("recruitButtonClickMessage", null);
            this.addOption("speedUpButtonClickMessage", null);
            this.addOption("showTimer", false);
            this.addOption("showShortTimer", false);
            this.addOption("showImage", true);
            this.addOption("imageClickMessage", null);
            this.addOption("timerTotal", null);
            this.addOption("timerSingle", null);
            this.addOption("inputFields", false);
            this.addOption("maxButtonClickMessage", "AvuoH6W9");
            this.addOption("inputChangeMessage", null);
            this.addOption("styles", "unitElement");
            this.addOption("timerDivider", null);
            this.addOption("showZeroUnits", true);
            this.addOption("sessionPrefix", null);
            this.addOption("hoverOnClick", false);
            this.setOptions(e);
            this.createElement()
        }
        t.prototype.createElement = function () {
            var t, n, i;
            var v;
            if (!this.showZeroUnits && this.amount === 0) return;
            if (this.showImage) {
                var h = this.notify("rvHW39mY", this, {
                    imageName: this.unitID,
                    imageCategory: "units"
                });
                var u = $(h);
                u.on("load", function () {
                    this.notify(")cpUXikD", this);
                    u.off("load")
                }.bind(this));
                this.createSubview(this, {
                    content: h,
                    clickMessage: this.imageClickMessage,
                    lazyHoverClass: b.HoverView,
                    lazyHoverOptions: {
                        unit: y[this.unitID],
                        habitat: this.habitat
                    },
                    styles: "unitIcon",
                    data: this.unitID,
                    hoverOnClick: this.hoverOnClick
                }, N)
            }
            var r = this.createSubview(this, {
                styles: "details"
            });
            if (this.amountOnly) {
                t = this.recruitCount
            } else {
                if (this.recruit === true) {
                    t = this.recruitCount + " x " + this.unitName
                } else {
                    t = this.unitName
                }
            } if (this.unitName !== "") {
                i = {
                    parent: r,
                    content: t,
                    styles: "unitAmount"
                };
                this.addSubview(new e(this.controller, i))
            }
            if (this.recruit === true) {
                var m = this.recruitButtonEnabled ? this.amount.toString() : "0";
                t = translate("%d affordable", m)
            } else {
                t = this.amount
            } if (!this.amountOnly && !this.inputFields) {
                this.amountStyle += this.amountStyle === "" ? "affordable" : " affordable";
                i = {
                    parent: r,
                    content: t,
                    styles: this.amountStyle
                };
                this.amountLabel = new e(this.controller, i);
                this.addSubview(this.amountLabel)
            }
            if (this.showTimer === true) {
                var a = r.createSubview(r, {
                    styles: "timers"
                });
                if (!this.showShortTimer) {
                    a.createSubview(a, {
                        time: this.timerSingle,
                        formatFunction: utils.date.secToTimeStr,
                        runningTimer: true,
                        styles: "shortTimer"
                    }, K);
                    if (this.timerDivider) {
                        a.createSubview(a, {
                            styles: "timerDivider",
                            content: this.timerDivider
                        })
                    }
                }
                a.createSubview(a, {
                    time: this.timerTotal,
                    showText: true,
                    caption: this.amount - this.amountDone + " in ",
                    formatFunction: utils.date.secToTimeStr,
                    runningTimer: true,
                    styles: "totalTimer"
                }, K);
                a.clearfix()
            }
            if (this.inputFields) {
                var p = this.sessionPrefix && this.habitat ? this.sessionPrefix + "_" + te + "_" + this.habitat.id + "_" + this.unitID : "";
                i = {
                    parent: this,
                    max: this.amount,
                    maxButtonClickMessage: this.maxButtonClickMessage,
                    inputChangeMessage: this.inputChangeMessage,
                    styles: "maxInput",
                    maxButtonClass: l,
                    storageId: p
                };
                if (this.recruit === true) {
                    i.textOption = "recruit"
                }
                this.inputField = new O.InputFieldWithMax(this.controller, i);
                this.addSubview(this.inputField)
            }
            if (this.recruit === true) {
                var c = null;
                t = this.notify("rvHW39mY", this, {
                    imageName: "recruit",
                    imageCategory: "icons"
                });
                if (this.recruitButtonEnabled === true) {
                    n = "button";
                    c = this.recruitButtonClickMessage
                } else {
                    n = "button disabled buildbuttondisabled"
                }
                i = {
                    parent: this,
                    styles: n,
                    content: t,
                    clickMessage: c
                };
                this.addSubview(new e(this.controller, i))
            }
            if (this.speedUp === true) {
                n = "button";
                t = this.buttonImage || this.notify("rvHW39mY", this, {
                    imageName: "recruitSpeedup",
                    imageCategory: "icons"
                });
                i = {
                    parent: this,
                    styles: n,
                    content: t,
                    clickMessage: this.speedUpButtonClickMessage
                };
                this.addSubview(new e(this.controller, i))
            }
            if (this.showUpgrades) {
                var d = this.habitat.habitatUnitOrders;
                for (var o = 0; o < d.length; o++) {
                    var s = d[o];
                    if (s.unit.primaryKey === +this.unitID) {
                        var g = s.isSpeededup() || s.isHalfDurationReached(),
                            f = g ? "finishTick" : "doubleArrow";
                        this.createSubview(this, {
                            time: utils.date.setCountDownTime(s.complete),
                            runningTimer: true,
                            styles: "readyTime"
                        }, K);
                        this.createSubview(this, {
                            content: s.orderAmount,
                            styles: "orderAmount"
                        });
                        this.createSubview(this, {
                            styles: "button speedup",
                            content: this.notify("rvHW39mY", this, {
                                imageName: f,
                                imageCategory: "icons"
                            }),
                            data: s,
                            clickMessage: "X1GRXWT5"
                        })
                    }
                }
            }
        };
        t.prototype.dataUpdate = function (t, e) {
            this.setOptions(e);
            if (typeof this.inputField != "undefined") {
                this.inputField.dataUpdate(t, this.amount)
            }
            if (typeof this.amountLabel != "undefined") {
                this.amountLabel.dataUpdate(t, {
                    content: this.amount
                })
            }
        };
        t.prototype.getInputInfo = function () {
            if (typeof this.inputField == "undefined") {
                return null
            }
            return {
                id: this.unitID,
                value: this.inputField.data
            }
        };
        return t
    }(e);
    Y.Controller = function (i) {
        "use strict";
        utils.__extends(e, n.Controller);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.rankingListShown = false;
            this.wantedNickName = ""
        }
        e.prototype.dataUpdate = function (a, e) {
            if (!e) {
                e = t
            }
            if (e.possibleNickname) {
                this.view.showPossibleNickname(e.possibleNickname);
                return
            }
            if (e.vacationModeStarted) {
                t.vacationStartDate = e.vacationStartDate
            }
            if (e.ranking) {
                this.view.showRankings()
            } else {
                this.view.showProfile()
            }
            this.view.dataUpdate(a, e);
            if (this.view.rankingListShown) {
                var i = $("#" + this.view.mainContentContainer.id),
                    s = i.find(".rankingTable .tablerow .owner");
                if (s.length > 0) {
                    var n = i.height(),
                        r = i.find(".rankingTable .tablerow .owner").position().top;
                    i.scrollTop(r - n / 2)
                }
            }
        };
        e.prototype["0scd3paU"] = function (i) {
            e.__super__["0scd3paU"].apply(this, arguments);
            $("#" + this.view.rankingList.templateData.htmlID).remove();
            this.view.hideRankings();
            var t = $("#" + this.view.id).find("#" + this.view.profileList.id);
            if (t.length === 0) {
                this.view.showProfile();
                this.view.profileList.draw()
            }
        };
        e.prototype["x(3KA2Xm"] = function (e) {
            var t = {
                parent: this.view.profileList,
                name: "playerName",
                buttonText: translate("Edit"),
                edit: false
            };
            this.playerName = new Y.ChangeName(this, t);
            this.view.profileList.findSubviewByName("changeNameSection").hide();
            this.view.profileList.replaceSubviewByName("changeNameSection", this.playerName);
            this.playerName.create();
            this.view.profileList.draw();
            this.updateBlocked = false
        };
        e.prototype["mwyyvQu6"] = function (e) {
            var t = {
                parent: this.view.profileList,
                name: "changeNameSection",
                buttonText: translate("Cancel"),
                edit: "true"
            };
            this.changeNameSection = new Y.ChangeName(this, t);
            this.view.profileList.replaceSubviewByName("playerName", this.changeNameSection);
            this.changeNameSection.create();
            this.view.profileList.draw();
            this.updateBlocked = true
        };
        e.prototype["4&WHd1CH"] = function (s) {
            var e = this.view.findSubviewByName("editableField").getValue(),
                i = u.playerNameLengthMin || u.nameMinimumLength || 3,
                a = u.playerNameLengthMax || u.nameMaximumLength || 31;
            if (e.length > a) {
                utils.dialog.alert(this, translate("The name is too long"), translate("Error"), function () {});
                this.view.findSubviewByName("editableField").setValue(t.nick);
                return
            } else if (e.length < i) {
                utils.dialog.alert(this, translate("The name is too short"), translate("Error"), function () {});
                this.view.findSubviewByName("editableField").setValue(t.nick);
                return
            } else if (e === t.nick) {
                utils.dialog.alert(this, translate("The nickname already exists."), translate("Error"), function () {});
                return
            } else {
                this.wantedNickName = e;
                this.datasource.changePlayerName(e);
                this["mwyyvQu6"]();
                this.updateBlocked = false
            }
        };
        e.prototype["Z1cwy5wq"] = function (i) {
            var e = this;
            utils.dialog.confirm(this, this.getVacationTimeString(), translate("Error"), function () {
                if (t.remainingVacationHours > 0) {
                    e.datasource.startVacationMode()
                } else {
                    utils.dialog.alert(this, translate("There are no more vacation hours remaining"), translate("Error"), function () {})
                }
            })
        };
        e.prototype.getVacationTimeString = function () {
            var e = Math.floor(t.remainingVacationHours / 24);
            var i = t.remainingVacationHours - e * 24;
            return translate("You have %1$d days and %2$d hours left for vacations. Vacation mode starts %3$d hours after you confirm. You can not log in for %4$d hours after vacation mode started.", e, i, u.vacationDelayHours, u.minimumVacationHours)
        };
        e.prototype["yEBAoLMy"] = function (t) {
            this.datasource.getRankingEntries()
        };
        e.prototype["pHawGOIe"] = function (i, t) {
            var e = t.page;
            this.datasource.getRankingEntries(e)
        };
        e.prototype["V(xgXe-G"] = function (t, e) {
            this.datasource.showCurrentPlayerRanking()
        };
        e.prototype["Ih)KLSsD"] = function (i, t) {
            var e = t.query;
            this.datasource.search(e)
        };
        e.prototype["h4MWA4%j"] = function (e, t) {
            this.notify("CcFE9soE", this.view, {
                id: t.playerID
            })
        };
        e.prototype["tsrfXGU7"] = function (t, i) {
            var e = this.notify("s&hAI%la", this, t.data);
            this.notify("J0N%It)p", this, e);
            _.blinkButton($("#" + this.view.id + " .button.copy"))
        };
        e.prototype["kZbiWxRm"] = function (t) {
            this.notify("kZbiWxRm", this)
        };
        return e
    }(n.Controller);
    Y.Page = function () {
        "use strict";

        function t(t, e) {
            this.rankingStart = t;
            this.rankingEnd = e
        }
        return t
    }();
    Y.DataSource = function (a) {
        "use strict";
        utils.__extends(e, m);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this._setRankings();
            this._currentInternalPage = 0;
            this._searchResultsActive = false
        }
        e.prototype._setRankings = function (e, i) {
            e = e || this.rankingStart || t.rank - Me;
            i = i || this.rankingEnd || t.rank + Me;
            this.rankingStart = e;
            this.rankingEnd = i;
            if (this.rankingStart < 0) {
                this.rankingStart = 1;
                this.rankingEnd = Me
            }
        };
        e.prototype.prepareRankingData = function (e) {
            var a = null;
            for (var i = 0, s = e.ranking.length; i < s; i++) {
                var n = e.ranking[i];
                if (+n.id === +t.id) {
                    n.own = true;
                    a = i
                }
            }
            if (e.ranking.length) {
                this._setRankings(e.ranking[0].rank, e.ranking[e.ranking.length - 1].rank)
            } else {
                e = {
                    ranking: this.__data.ranking
                }
            }
            var r = Math.ceil(e.ranking.length / 500);
            this.pages = [];
            for (var i = 0, s = r; i < s; i++) {
                this.pages.push(new Y.Page(i * 500, i * 500 + 499))
            }
            if (a !== null) {
                this._currentInternalPage = a / 500 | 0
            } else {
                this._currentInternalPage = 0
            }
            this.setData({
                htmlID: "id" + utils.uniqueID(),
                rankingListName: "rankingList",
                allianceRankings: false,
                controlsHtmlID: "id" + utils.uniqueID(),
                ranking: e.ranking,
                searchResults: this._searchResultsActive,
                displayedRanking: e.ranking.length ? e.ranking.slice(this.pages[this._currentInternalPage].rankingStart, this.pages[this._currentInternalPage].rankingEnd) : [],
                higherRankData: {
                    page: this._currentInternalPage - 1
                },
                lowerRankData: {
                    page: this._currentInternalPage + 1
                }
            })
        };
        e.prototype.setRankingList = function (t) {
            this._searchResultsActive = false;
            this.prepareRankingData(t)
        };
        e.prototype.setSearchResults = function (t) {
            this._searchResultsActive = true;
            this.prepareRankingData(t)
        };
        e.prototype.modelUpdate = function () {
            this.informControllerUnblock();
            this.publishUpdate()
        };
        e.prototype.loadProfile = function () {
            this.publishUpdate()
        };
        e.prototype.startVacationMode = function () {
            i.request("ProfileAction/startVacationMode", {}, this.vacationCountDown, this)
        };
        e.prototype._playerNameUpdate = function (t) {
            if (t["possibleNickname"]) {
                this.setData(t);
                return
            }
            this.__data = null;
            this.triggerModelUpdate(t)
        };
        e.prototype.changePlayerName = function (t) {
            t = i.stripHTML(t);
            i.request("ProfileAction/changeNickname", {
                nick: t
            }, this._playerNameUpdate, this)
        };
        e.prototype.displayNextCachedPage = function (t) {
            this._currentInternalPage = t;
            this.__data.displayedRanking = this.__data.ranking.slice(this.pages[this._currentInternalPage].rankingStart, this.pages[this._currentInternalPage].rankingEnd);
            this.__data.higherRankData.page = this._currentInternalPage - 1;
            this.__data.lowerRankData.page = this._currentInternalPage + 1;
            this.publishUpdate()
        };
        e.prototype.getRankingEntries = function (t) {
            if (typeof t !== "undefined" && t >= 0 && t < this.pages.length) {
                this.displayNextCachedPage(t);
                return
            }
            var e, a;
            if (t < 0) {
                e = this.rankingStart - 2 * Me;
                a = this.rankingStart - 1
            } else if (t >= 0) {
                e = this.rankingEnd + 1;
                a = this.rankingEnd + 2 * Me
            }
            this._setRankings(e, a);
            i.request("ProfileAction/showRankingV2", {
                start: this.rankingStart,
                end: this.rankingEnd
            }, this.setRankingList, this)
        };
        e.prototype.showCurrentPlayerRanking = function () {
            this.rankingStart = null;
            this.rankingEnd = null;
            this._setRankings();
            this.getRankingEntries()
        };
        e.prototype.vacationCountDown = function (t) {
            t.vacationModeStarted = true;
            this.setData(t)
        };
        e.prototype.displayError = function (t) {
            alert(translate(t.error))
        };
        e.prototype.search = function (t) {
            i.request("ProfileAction/search", {
                nick: t
            }, this.setSearchResults, this)
        };
        return e
    }(m);
    Y.ChangeName = function (s) {
        utils.__extends(i, e);

        function i(e, t) {
            i.__super__.constructor.apply(this, arguments);
            this.addOption("edit", false);
            this.addOption("buttonText", "");
            this.setOptions(t)
        }
        i.prototype.create = function () {
            this.changeNameContainer = this.createSubview(this, {
                name: "changeNameContainer",
                styles: "changeNameContainer"
            }, w);
            if (this.edit) {
                this.editableField = this.createSubview(this.changeNameContainer, {
                    name: "editableField",
                    maxLength: u.playerNameLengthMax || u.nameMaximumLength,
                    caption: "Change Name",
                    currentValue: t.nick
                }, O.Input);
                this.createSubview(this.changeNameContainer, {
                    content: translate("Save"),
                    styles: "saveButton",
                    clickMessage: "4&WHd1CH"
                }, l);
                this.createSubview(this.changeNameContainer, {
                    name: "editButton",
                    content: this.buttonText,
                    styles: "editButton",
                    clickMessage: "x(3KA2Xm"
                }, l);
                this.changeNameContainer.clearfix();
                this.createSubview(this.changeNameContainer, {
                    styles: "error"
                })
            } else {
                this.createSubview(this.changeNameContainer, {
                    name: "playerName",
                    styles: "playerName",
                    content: utils.sanitize(t.nick)
                });
                this.createSubview(this.changeNameContainer, {
                    content: this.notify("rvHW39mY", this, {
                        imageName: "pasteBoardPlayerWhite",
                        imageCategory: "icons"
                    }),
                    hover: translate("Copy player link"),
                    clickMessage: "tsrfXGU7",
                    data: {
                        player: t.id
                    },
                    styles: "copy icon editButton"
                }, l);
                this.createSubview(this.changeNameContainer, {
                    name: "editButton",
                    content: this.notify("rvHW39mY", this, {
                        imageName: "edit",
                        imageCategory: "icons"
                    }),
                    styles: "editButton icon",
                    clickMessage: "mwyyvQu6"
                }, l)
            }
            this.createSubview(this.changeNameContainer, {
                styles: "inputDivider"
            });
            this.createSubview(this.changeNameContainer, {
                styles: "leftSide",
                content: translate("Points")
            });
            this.createSubview(this.changeNameContainer, {
                styles: "rightSide",
                content: t.points
            });
            this.createSubview(this.changeNameContainer, {
                styles: "leftSide",
                content: translate("Castles")
            });
            this.createSubview(this.changeNameContainer, {
                styles: "rightSide",
                content: utils.dict.size(t.habitate)
            });
            this.createSubview(this.changeNameContainer, {
                styles: "leftSide",
                content: translate("Gold")
            });
            var e = $("<div>");
            e.append(this.notify("rvHW39mY", this, {
                imageName: a.GOLD.toString(),
                imageCategory: "resources"
            }));
            e.append(" " + t.gold);
            this.createSubview(this.changeNameContainer, {
                styles: "rightSide goldIcon clickable",
                content: e,
                clickMessage: "kZbiWxRm"
            })
        };
        return i
    }(e);
    Y.ProfileList = function (a) {
        utils.__extends(i, e);

        function i(e, t) {
            i.__super__.constructor.apply(this, arguments);
            this.setOptions(t)
        }
        i.prototype.create = function () {
            this.playerNameSection = this.createSubview(this, {
                name: "playerNameSection",
                styles: "profileListButton"
            });
            this.createSubview(this.playerNameSection, {
                name: "playerName",
                edit: false,
                buttonText: translate("Edit")
            }, Y.ChangeName);
            this.createSubview(this, {
                content: o.getValueOf("Rank"),
                detail: t.rank,
                styles: "profileListButton",
                icon: "rankList",
                iconCategory: "icons",
                clickMessage: "yEBAoLMy"
            }, k);
            if (t.hasAlliance()) {
                var i = this.createSubview(this, {
                    content: translate("Permission"),
                    icon: "rights",
                    iconCategory: "icons",
                    styles: "permissionButton"
                }, k);
                se.Player.prototype.addPermissionIcons.call(this, i, t.alliancePermission)
            }
            if (t.vacationStartDate) {
                var a = _.conv.toDate(t.vacationStartDate);
                var e = this.createSubview(this, {
                    icon: "duration",
                    iconCategory: "icons",
                    content: "",
                    styles: "profileListButtonVacationActive"
                }, k);
                e.createSubview(e, {
                    showText: true,
                    caption: translate("Vacation mode activated"),
                    time: utils.date.setCountDownTime(_.conv.toDate(t.vacationStartDate)),
                    runningTimer: true,
                    formatFunction: utils.date.secToTimeStr
                }, K)
            } else {
                this.createSubview(this, {
                    content: o.getValueOf("Start vacation"),
                    styles: "profileListButtonVacation",
                    name: "startVacation",
                    icon: "holiday",
                    iconCategory: "icons",
                    clickMessage: "Z1cwy5wq"
                }, k)
            }
        };
        return i
    }(e);
    Y.PlayerRow = function (i) {
        utils.__extends(e, i);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this._id = this.id;
            this.addOption("id", "");
            this.addOption("nick", "");
            this.addOption("points", "");
            this.addOption("rank", "");
            this.addOption("data", {}, true);
            this.setOptions(t);
            this.playerID = this.id;
            this.id = this._id;
            this.data.playerID = this.playerID;
            this.styleArray.push("tablerow")
        }
        e.prototype.create = function () {
            e.__super__.create.apply(this, arguments);
            var i, a = "h4MWA4%j",
                s = "rowInfo";
            if (t.id == this.playerID) {
                this.ownPlayer = true;
                a = null
            }
            s += this.ownPlayer ? " owner" : " clickable";
            i = this.createSubview(this, {
                name: "playerInfo",
                styles: s,
                clickMessage: a,
                data: this.playerID
            });
            this.createSubview(i, {
                content: this.rank + ".",
                styles: "col rank"
            });
            this.createSubview(i, {
                content: utils.truncate(this.nick, 26),
                styles: "col nickname"
            });
            this.createSubview(i, {
                content: this.points,
                styles: "col points"
            });
            i.clearfix()
        };
        return e
    }(w);
    Y.SearchList = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("name", "ProfileSearchList", true)
        }
        t.prototype.dataUpdate = function (t, e) {
            if (!this.table) {
                return
            }
            this.table.dataUpdate(t, e.ranking)
        };
        t.prototype.init = function () {
            return this
        };
        t.prototype.create = function () {
            this.searchForm = this.createSubview(this, {}, w);
            this.input = this.queryField = this.createSubview(this.searchForm, {
                name: "input",
                styles: "input"
            }, O.Input);
            this.input.jQueryEvents = function () {
                this.$el().on("keydown", function (t) {
                    if (t.keyCode === 13) {
                        $(this).parent().next(".control").click()
                    }
                })
            };
            this.createSubview(this.searchForm, {
                name: "control",
                styles: "control button icon",
                content: this.notify("rvHW39mY", this, {
                    imageName: "search",
                    imageCategory: "icons"
                }),
                clickMessage: "Ih)KLSsD"
            });
            this.table = this.createSubview(this, {
                name: "allianceSearchResults",
                styles: "searchTable",
                rowClass: Y.PlayerRow
            }, G)
        };
        return t
    }(e);
    Y.View = function (e) {
        "use strict";
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e);
            this.rankingListShown = false
        }
        t.prototype.showPossibleNickname = function (t) {
            var e = this.controller.wantedNickName || "",
                i = translate('The name "%@" is already taken. A possible name is "%@".', e, t);
            $("#" + this.profileList.id).find(".error").text(i)
        };
        t.prototype.showProfile = function () {
            if (this.profileList) {
                this.profileList.removeFromDOM();
                this.profileList.deleteAllSubviews()
            }
            this.profileList = this.createSubview(this.content, {
                tag: "currentView",
                styles: "contentCurrentView"
            }, Y.ProfileList);
            this.rankingListShown = false
        };
        t.prototype.showRankings = function (t) {
            if (this.rankingList) {
                this.rankingList = this.createSubview(this.content, {
                    name: "RankingListContainer",
                    template: "ranking",
                    templateData: t
                }, RankingList, null, false)
            } else {
                this.rankingList = this.controller.showNextViewOfClass(RankingList, {
                    create: false,
                    template: "ranking",
                    templateData: t
                })
            } if (!this.topButtonsContainer) {
                this.topButtonsContainer = this.createSubview(this.mainContentContainer.parent, {});
                this.topButtonsContainer.draw();
                this.topButtons = this.createSubview(this.topButtonsContainer, {
                    create: false,
                    template: "profileRankingControls",
                    templateData: t,
                    attachTo: this.topButtonsContainer
                }, RankingListControls, null, false)
            }
            this.rankingListShown = true;
            $("#" + this.id).addClass("lightBG").addClass("rankingsView")
        };
        t.prototype.dataUpdate = function (t, e) {
            if (this.rankingListShown) {
                this.rankingList.dataUpdate(t, e);
                this.topButtons.dataUpdate(t, e)
            } else {
                this.profileList.draw()
            }
        };
        t.prototype.hideRankings = function () {
            this.rankingListShown = false;
            this.rankingList = null;
            $("#" + this.id).removeClass("lightBG").removeClass("rankingsView");
            if (this.topButtonsContainer) {
                this.topButtonsContainer.removeFromDOM();
                this.deleteSubviewChain(this.topButtonsContainer);
                this.topButtonsContainer = null
            }
        };
        return t
    }(n.Window);
    fe.View = function (i) {
        utils.__extends(e, i);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            utils.linkMethod("prepareResources", F.DataSource, e)
        }
        e.prototype.create = function () {
            this.createList();
            this.createTopBar()
        };
        e.prototype.dataUpdate = function () {
            this.deleteAllSubviews();
            this.createList();
            if (this.topButtons) {
                this.topButtons.removeFromDOM()
            }
            this.createTopBar();
            this.topButtons.draw();
            this.buildingList.draw()
        };
        e.prototype.show = function () {
            e.__super__.show.apply(this, arguments);
            this.dataUpdate(null, {})
        };
        e.prototype.createList = function () {
            this.buildingList = this.createSubview(this.content, {
                attachTo: this.content,
                template: "buildingList",
                useTimer: true,
                templateData: {
                    listItems: this._habitatData()
                }
            }, fe.Table)
        };
        e.prototype.createTopBar = function () {
            this.deleteSubviewChain(this.topButtons);
            this.topButtons = this.createSubview(this.mainContentContainer.parent, {
                styles: "topButtons line"
            });
            this.createSubview(this.topButtons, {
                styles: "unit size1of4",
                content: "&nbsp;"
            });
            this.createSubview(this.topButtons, {
                buildings: t.getSortedHabitate()[0].habitatBuildings,
                upgrades: t.getSortedHabitate()[0].habitatBuildingUpgrades,
                habitat: t.getSortedHabitate()[0],
                build: false,
                levelString: false,
                showImage: true,
                useElementContainer: false,
                styles: "buildingTable lastUnit",
                showUpgrades: false,
                showInfoHover: true
            }, L.Table, null, false);
            this.topButtons.clearfix();
            this.topButtons.createSubview(this.topButtons, {
                styles: "divider"
            })
        };
        e.prototype._habitatData = function () {
            var s = t.getSortedHabitate(),
                n = [];
            for (var i = 0, l = s.length; i < l; i++) {
                var e = s[i],
                    u = [a.WOOD, a.STONE, a.ORE, a.PEOPLE],
                    r, o = {};
                o = this.prepareResources(e.stats.resources, false, u, e.id);
                r = {
                    habitatID: e.id,
                    header: {
                        title: utils.dynamicTitle(utils.sanitize(e.name)),
                        icon: this.getIconSrc("buttonCastle"),
                        clickable: true
                    },
                    habitatResources: o,
                    buildings: e.getSortedBuildings()
                };
                n.push(r)
            }
            return n
        };
        return e
    }(n.Window);
    fe.Table = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }

        function i(e) {
            var t = $(e);
            if (t.is(".buildbutton:not(.disabled)")) {
                this.buildButtonClicked(t);
                return true
            }
            if (t.is(".button.speedup")) {
                this.speedButtonClicked(t);
                return true
            }
            if (t.is(".title")) {
                this.openHabitat(t);
                return true
            }
            return false
        }

        function a(e, i) {
            var t = $(e);
            if (t.is(".buildbutton")) {
                this.showUpgradeInfo(i, t);
                return true
            }
            return false
        }
        t.prototype.buildButtonClicked = function (t) {
            this.notify("VpY2KZTw", {
                habitatID: t.parents(".building").data("habitat"),
                buildingID: t.data("building")
            })
        };
        t.prototype.speedButtonClicked = function (t) {
            this.notify("SVNznI8l", {
                upgradeID: t.data("upgrade"),
                habitatID: t.parents(".building").data("habitat")
            })
        };
        t.prototype.openHabitat = function (t) {
            this.notify("0B3)YIHM", {
                habitat: {
                    id: t.parents(".listContentRow").data("habitat")
                }
            })
        };
        t.prototype.showUpgradeInfo = function (t, e) {
            this.showHover(t, L.BuildHoverElement, {
                styles: "buildingHover",
                buildingID: e.data("building")
            })
        };
        t.prototype.clickHandler = function (t) {
            this.bubble(t, i.bind(this), "globalBuildingList")
        };
        t.prototype.hoverHandler = function (t) {
            if (t.type === "mouseover") {
                this.bubble(t, a.bind(this), "globalBuildingList")
            } else {
                this.hideHovers()
            }
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                selector: ".buildingList",
                event: "click",
                callback: this.clickHandler,
                target: this
            });
            e.push({
                selector: ".buildingList",
                event: "mouseover",
                callback: this.hoverHandler,
                target: this
            });
            e.push({
                selector: ".buildingList",
                event: "mouseout",
                callback: this.hoverHandler,
                target: this
            });
            return e
        };
        t.prototype.timeEvent = function () {
            $(".buildingList .readyTime").each(function () {
                var t = $(this),
                    e = t.data("complete"),
                    i = utils.date.setCountDownTime(new Date(e));
                t.text(utils.date.secToTimeStr(i))
            })
        };
        return t
    }(TemplateView);
    fe.Controller = function (a) {
        utils.__extends(e, a);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }

        function s(i) {
            var a = o.getValueOf("Your building upgrade queue is full. An additional slot costs %d %@\nYou have %d %@");
            var s = t.gold;
            var e = translate("Gold");
            return $.sprintf(a, i, e, s, e)
        }

        function i(i, a, s, n) {
            var r = t.gold;
            var e = translate("Gold");
            return $.sprintf(i, a, s, n, e, r, e)
        }
        e.prototype.dataUpdate = function (e, t) {
            if (t === null || this.view.hidden) {
                return
            }
            this.notify("_f3L_ht_", this.view);
            window.setTimeout(function () {
                if (this.view) {
                    this.view.dataUpdate.call(this.view, e, t);
                    this.notify("VY71NNds", this.view)
                }
            }.bind(this), 500)
        };
        e.prototype["0B3)YIHM"] = function (t) {
            this.notify("createHabitatWindow", t.habitat)
        };
        e.prototype["VpY2KZTw"] = function (a) {
            var i = t.habitate[a.habitatID];
            var n = c[a.buildingID];
            var e = c[n.upgradeTo];
            if (i.habitatBuildingUpgrades.length >= u.maxItemsInBuildingList) {
                var r = s(e.buildSpeedupCost);
                utils.dialog.confirm(this, r, translate("Additional upgrade slot"), function () {
                    if (t.gold < e.buildSpeedupCost) {
                        this.notify("Vjkw%oMN", this, {
                            costs: n.buildSpeedupCost
                        })
                    } else {
                        this.datasource.upgradeBuilding(i.id, e.primaryKey, true)
                    }
                }.bind(this))
            } else {
                this.datasource.upgradeBuilding(i.id, e.primaryKey, false)
            }
        };
        e.prototype["SVNznI8l"] = function (u) {
            var h = u.upgradeID;
            var s = t.habitate[u.habitatID].habitatBuildingUpgrades.filter(function (t) {
                return t.id === h
            })[0];
            var e = s.buildingTarget;
            var a, n, r, l;
            if (s.overHalfDuration) {
                a = o.getValueOf("Finishing building %@ level %d instantly costs %d %@. You have %d %@.");
                n = i(a, e.name, e.level, e.buildSpeedupCost);
                r = "finishBuilding";
                l = "Finish build"
            } else {
                a = o.getValueOf("Build time reduction for %@ level %d costs %d %@. You have %d %@.");
                n = i(a, e.name, e.level, e.buildSpeedupCost);
                r = "speedupBuilding";
                l = "Speedup build"
            }
            utils.dialog.confirm(this, n, translate(l), function () {
                if (t.gold < e.buildSpeedupCost) {
                    this.notify("Vjkw%oMN", this, {
                        costs: e.buildSpeedupCost
                    })
                } else {
                    this.datasource[r](s.id)
                }
            }.bind(this))
        };
        return e
    }(n.Controller);
    fe.DataSource = function (a) {
        utils.__extends(e, m);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.upgradeBuilding = function (t, e, a) {
            i.request("HabitatAction/upgradeBuilding", {
                habitatID: t,
                primaryKey: e.toString(),
                paymentGranted: a
            }, this.triggerModelUpdate, this)
        };
        e.prototype.finishBuilding = function (t) {
            i.request("HabitatAction/finishBuildingUpgrade", {
                id: t.toString()
            }, this.triggerModelUpdate, this)
        };
        e.prototype.speedupBuilding = function (t) {
            i.request("HabitatAction/speedupBuildingUpgrade", {
                id: t.toString()
            }, this.triggerModelUpdate, this)
        };
        e.prototype.modelUpdate = function () {
            this.setData(t.getSortedHabitate())
        };
        return e
    }(m);
    ae.Controller = function (i) {
        "use strict";
        utils.__extends(e, n.Controller);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.selectedTab = "normal";
            this.selectStatus = "";
            this.storageElements = []
        }
        e.prototype.dataUpdate = function (e, t) {
            if (t === null || this.view.hidden) {
                return
            }
            this.notify("_f3L_ht_", this.view);
            window.setTimeout(function () {
                if (this.view) {
                    this.view.dataUpdate(e, t, this.selectedTab);
                    if (this.selectedTab === "fast") {
                        this.view.recruitingList.select(this.datasource.getAllSelected())
                    }
                    this.updateExecuteButton();
                    this.notify("BRfyQ)_c", this.view.recruitingList);
                    this.notify("_V6%tK-F", this.view.recruitingList);
                    this.notify("VY71NNds", this.view)
                }
            }.bind(this), 500)
        };
        e.prototype.deltaUpdate = function (t, e) {
            this.view.updateButtons();
            this.view.headline.draw();
            this.view.recruitingList.deltaUpdate(t, e, this.datasource.lastActionHabitatID)
        };
        e.prototype["CncQVCpR"] = function (e, t) {
            this.notify("createHabitatWindow", t.habitat);
            this.view.cancelNextClickMessage()
        };
        e.prototype["yzTtg%w4"] = function (c, i) {
            var a = t.habitate[i.habitatID],
                s = y[i.unitID],
                e = +i.amount,
                h = +i.max,
                r = translate("Recruit");
            if (e === 0) {
                return
            }
            if (e > h) {
                n = translate("Could not recruit unit.");
                utils.dialog.alert(this, n, r, function () {});
                return
            }
            if (a.habitatUnitOrders.length >= u.maxItemsInRecruitingList) {
                var o = translate("Gold"),
                    l = s.buildSpeedupCost * e,
                    n = translate("Your unit order queue is full. An additional slot costs %d %@\nYou have %d %@", l, o, t.gold, o);
                this._goldDialog(l, n, r, function () {
                    this.datasource.recruit(a.id, s.primaryKey, e, true)
                }.bind(this))
            } else {
                this.datasource.recruit(a.id, s.primaryKey, e, false)
            }
        };
        e.prototype._goldDialog = function (e, i, a, s) {
            utils.dialog.confirm(this, i, a, function () {
                if (t.gold < e) {
                    this.notify("Vjkw%oMN", this, {
                        costs: e
                    })
                } else {
                    s()
                }
            }.bind(this))
        };
        e.prototype["X1GRXWT5"] = function (h, u) {
            var r = u.habitatID,
                o = u.unitOrderID,
                e = t.habitate[r].getHabitatUnitOrderByID(o),
                i = translate("Gold"),
                a = e.unit.buildSpeedupCost * e.orderAmount,
                s, n, l;
            if (!e) {
                return
            }
            l = translate(e.unit.identifier);
            if (e.isHalfDurationReached() === true || e.isSpeededup() === true) {
                s = translate("Finishing recruiting %d x %@ instantly costs %d %@. You have %d %@.", e.orderAmount, l, a, i, t.gold, i);
                n = translate("Finish build");
                this._goldDialog(a, s, n, function () {
                    this.datasource.finishUnit(o, r)
                }.bind(this))
            } else {
                s = translate("Reducing recruition time for %d x %@ costs %d %@. You have %d %@.", e.orderAmount, l, a, i, t.gold, i);
                n = translate("Speedup recruiting");
                this._goldDialog(a, s, n, function () {
                    this.datasource.speedUpUnit(o, r)
                }.bind(this))
            }
        };
        e.prototype._lineOperation = function (e, s) {
            var i = translate("Gold"),
                u = this.datasource.countUnitOrderCostsForHabitat(s),
                n = u[e].count,
                a = u[e].costs,
                r, o, l;
            if (n === 0 || a === 0) {
                return
            }
            l = translate("Units");
            if (e === "speedup") {
                r = translate("Reducing recruition time for %d x %@ costs %d %@. You have %d %@.", n, l, a, i, t.gold, i);
                o = translate("Speedup recruiting")
            } else {
                r = translate("Finishing recruiting %d x %@ instantly costs %d %@. You have %d %@.", n, l, a, i, t.gold, i);
                o = translate("Finish build")
            }
            this._goldDialog(a, r, o, function () {
                return e === "speedup" ? this.datasource.speedUpLine(s) : this.datasource.finishLine(s)
            }.bind(this))
        };
        e.prototype["ors5B(Yw"] = function (e, t) {
            this._lineOperation("speedup", t.habitatID)
        };
        e.prototype["I0BNxlkp"] = function (e, t) {
            this._lineOperation("finish", t.habitatID)
        };
        e.prototype._speedUpFinishDialog = function (e) {
            var s = 0,
                i = 0,
                a = o.getValueOf("Gold"),
                n, r;
            for (var u in t.habitate) {
                var h = t.habitate[u],
                    l = h.getTotalRecruitingCosts();
                s += l[e].count;
                i += l[e].costs
            }
            if (e === "speedup") {
                r = translate("Reducing recruition time for %d x %@ costs %d %@. You have %d %@.", s, translate("Units"), i, a, t.gold, a);
                n = translate("Speedup recruiting")
            } else {
                r = translate("Finishing recruiting %d x %@ instantly costs %d %@. You have %d %@.", s, translate("Units"), i, a, t.gold, a);
                n = translate("Finish build")
            }
            this._goldDialog(i, r, n, function () {
                if (e === "speedup") {
                    this.datasource.speedUpAll()
                } else {
                    this.datasource.finishAll()
                }
            }.bind(this))
        };
        e.prototype["&ut51WtI"] = function (t) {
            this._speedUpFinishDialog("speedup")
        };
        e.prototype["&n2jWQ3y"] = function (t) {
            this._speedUpFinishDialog("finish")
        };
        e.prototype["ZrqcAAn0"] = function () {
            this.selectedTab = "normal";
            this.view.removeClass("massRecruitment");
            this.view.hideUnitSelector();
            this.view.hideBottomButtons();
            this.view.showUnitHeaderTable();
            this.datasource.loadRecruitingList()
        };
        e.prototype["mUiEUWwH"] = function () {
            this.selectedTab = "fast";
            this.view.addClass("massRecruitment");
            this.view.showUnitSelector();
            this.view.showBottomButtons();
            this.view.hideUnitHeaderTable();
            this.updateExecuteButton();
            this.datasource.loadFastRecruitingList()
        };
        e.prototype["EyHNDBxo"] = function () {
            this.view.unitMenu.setOptions({
                tradeItem: this.datasource.selectedUnitID.toString()
            });
            this.view.unitMenu.toggle()
        };
        e.prototype["SoAH&3i1"] = function (e, i) {
            var t = e.data;
            this.datasource.unitSelected(t.primaryKey);
            this.view.unitMenu.hide();
            this.view.unitMenu.selectItem(t.primaryKey.toString());
            this.view.updateChooserButton(this.datasource.selectedUnitID)
        };
        e.prototype["&UqUbZ-A"] = function () {
            if (this.selectStatus === "all") {
                this.selectStatus = "none";
                this.datasource.deselectAllHabitats()
            } else {
                this.selectStatus = "all";
                this.datasource.selectAllHabitats()
            }
            this.updateExecuteButton();
            var t = this.datasource.getAllSelected();
            this.view.recruitingList.select(t)
        };
        e.prototype["UmiA)7SQ"] = function () {
            var s = this.datasource.getAllSelected(),
                e = 0,
                n = o.getValueOf("Gold"),
                r = y[this.datasource.selectedUnitID],
                l, i;
            if (this.datasource.getTotalAmount() === 0) {
                return
            }
            for (var a = 0, h = s.length; a < h; a++) {
                i = t.habitate[s[a]];
                if (i.habitatUnitOrders.length >= u.maxItemsInRecruitingList) {
                    e += r.buildSpeedupCost * r.getMaxRecruiting(i)
                }
            }
            if (e === 0) {
                this.datasource.executeMassRecruit(false);
                return
            }
            l = translate("Your unit order queue is full. An additional slot costs %d %@\nYou have %d %@", e, n, t.gold, n);
            this._goldDialog(e, l, translate("Additional order slot"), function () {
                this.datasource.executeMassRecruit(true)
            }.bind(this))
        };
        e.prototype["Ne6XMEKA"] = function (i, t) {
            var e = t.habitat.id;
            this.datasource.selectHabitat(e);
            this.updateExecuteButton()
        };
        e.prototype["ZSPySeHP"] = function (i, t) {
            var e = t.habitat.id;
            this.datasource.deselectHabitat(e);
            this.updateExecuteButton()
        };
        e.prototype.updateExecuteButton = function () {
            var t = this.datasource.getTotalAmount();
            this.view.massRecruitButton.setOptions({
                content: t + " " + translate("Unit factory")
            });
            if (t === 0) {
                $("#" + this.view.massRecruitButton.id).addClass("disabled")
            } else {
                $("#" + this.view.massRecruitButton.id).removeClass("disabled")
            }
            this.view.massRecruitButton.liveUpdate()
        };
        return e
    }(n.Controller);
    ae.DataSource = function (s) {
        "use strict";
        utils.__extends(e, m);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.selectedUnitID = J.PUSHCART;
            this.lastActionHabitatID = null;
            utils.linkMethod("selectAllHabitats", B.DataSource, e);
            utils.linkMethod("deselectAllHabitats", B.DataSource, e);
            utils.linkMethod("getAllSelected", B.DataSource, e);
            utils.linkMethod("deselectHabitat", B.DataSource, e);
            utils.linkMethod("selectHabitat", B.DataSource, e);
            utils.linkMethod("_findDeadHabitatsInCacheAndRemove", B.DataSource, e);
            utils.linkMethod("prepareResources", F.DataSource, e)
        }
        e.prototype.loadRecruitingList = function () {
            this.setData(this._prepareTemplateData())
        };
        e.prototype.loadFastRecruitingList = function () {
            this.setData(this._prepareFastTemplateData())
        };
        e.prototype._prepare = function (r) {
            var a = t.getSortedHabitate(),
                s = [],
                n = {};
            for (var e = 0, o = a.length; e < o; e++) {
                var l = a[e],
                    i = r(l);
                s.push(i);
                n[i.htmlID] = i.id
            }
            return {
                habitate: s,
                eventIDCache: n
            }
        };
        e.prototype._prepareTemplateData = function () {
            var t = [a.WOOD, a.STONE, a.ORE, a.PEOPLE];
            return this._prepare(function (e) {
                return {
                    htmlID: "id" + utils.uniqueID(),
                    id: e.id,
                    habitatResources: this.prepareResources(e.stats.resources, false, t, e.id),
                    habitatUnits: this.prepareUnitsRecruiting(e.stats.units.own, e),
                    recruitableUnits: this.getRecruitableUnits(e),
                    activeRecruitings: this.getActiveRecruitings(e),
                    numberOfActiveRecruitings: e.habitatUnitOrders.length,
                    name: e.name,
                    title: utils.dynamicTitle(utils.sanitize(e.name)),
                    icon: this.getImageSrc("buttonCastle", "icons"),
                    clickable: true,
                    finishLine: this.countUnitOrderCostsForHabitat(e.id).finish.count,
                    speedupLine: this.countUnitOrderCostsForHabitat(e.id).speedup.count,
                    finishIcon: this.getImageSrc("recruitFinish", "icons"),
                    speedupIcon: this.getImageSrc("recruitSpeedup", "icons")
                }
            }.bind(this))
        };
        e.prototype._prepareFastTemplateData = function () {
            var e = [a.WOOD, a.STONE, a.ORE, a.PEOPLE],
                t = y[this.selectedUnitID];
            return this._prepare(function (i) {
                var a = {
                    htmlID: "id" + utils.uniqueID(),
                    id: i.id,
                    habitatResources: this.prepareResources(i.stats.resources, false, e, i.id),
                    habitatUnits: this.prepareUnitsFastRecruiting(i.stats.units.own, i),
                    recruitableUnits: this.getRecruitableUnits(i),
                    activeRecruitings: this.getActiveRecruitings(i),
                    numberOfActiveRecruitings: i.habitatUnitOrders.length,
                    name: i.name,
                    title: utils.dynamicTitle(utils.sanitize(i.name)),
                    icon: this.getImageSrc("buttonCastle", "icons"),
                    clickable: true,
                    unitID: this.selectedUnitID,
                    amount: t.isRecruitable(i) ? t.getMaxRecruiting(i) : 0,
                    selectable: t.isRecruitable(i) && t.getMaxRecruiting(i) > 0 ? true : false,
                    amountColorStyle: "amountGreen",
                    checked: false
                };
                if (i.habitatUnitOrders.length >= u.maxItemsInRecruitingList) {
                    a.amountColorStyle = "amountYellow"
                }
                if (!t.isRecruitable(i)) {
                    a.amountColorStyle = "amountRed"
                }
                return a
            }.bind(this))
        };
        e.prototype._prepareUnits = function (i, a, n, r) {
            var s = [];
            for (var e in i) {
                var t = {};
                var o = y[e];
                t.unitID = e;
                t.amount = i[e];
                t.recruitButton = this.getImageSrc("recruit", "icons");
                t.noIcon = r;
                if (n) {
                    t.maxInput = {
                        maxIcon: this.getImageSrc("maximum", "icons"),
                        max: o.getMaxRecruiting(a),
                        primaryKey: e,
                        habitatID: a.id
                    }
                }
                s.push(t)
            }
            return s
        };
        e.prototype.prepareUnitsRecruiting = function (t, e) {
            return this._prepareUnits(t, e, true, true)
        };
        e.prototype.prepareUnitsFastRecruiting = function (t, e) {
            return this._prepareUnits(t, e, false, false)
        };
        e.prototype.getRecruitableUnits = function (t) {
            return t.getRecruitableUnits()
        };
        e.prototype.getActiveRecruitings = function (t) {
            return t.getActiveRecruitings()
        };
        e.prototype.countUnitOrderCostsForHabitat = function (e) {
            return t.habitate[e].getTotalRecruitingCosts()
        };
        e.prototype.recruit = function (t, e, a, s) {
            var n = {
                habitatID: t,
                primaryKey: e,
                paymentGranted: s,
                orderAmount: a
            };
            this.lastActionHabitatID = t;
            i.request("HabitatAction/buildUnit", n, this.triggerModelUpdate, this)
        };
        e.prototype.speedUpUnit = function (t, e) {
            this.lastActionHabitatID = e;
            i.request("HabitatAction/speedupBuildUnit", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.speedUpLine = function (t) {
            this.lastActionHabitatID = t;
            i.request("HabitatAction/speedupBuildAllUnits", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.speedUpAll = function () {
            this.lastActionHabitatID = null;
            i.request("HabitatAction/speedupBuildAllUnitsOnEveryHabitat", {}, this.triggerModelUpdate, this)
        };
        e.prototype.finishUnit = function (t, e) {
            this.lastActionHabitatID = e;
            i.request("HabitatAction/finishBuildUnit", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.finishLine = function (t) {
            this.lastActionHabitatID = t;
            i.request("HabitatAction/finishBuildAllUnits", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.finishAll = function () {
            this.lastActionHabitatID = null;
            i.request("HabitatAction/finishBuildAllUnitsOnEveryHabitat", {}, this.triggerModelUpdate, this)
        };
        e.prototype.modelUpdate = function () {
            if (this.subscribers[0].selectedTab === "fast") {
                this.__data = this._prepareFastTemplateData()
            } else {
                this.__data = this._prepareTemplateData()
            }
            this.informControllerUnblock();
            if (!this.lastActionHabitatID) {
                this.publishUpdate()
            } else {
                this.publishDeltaUpdate()
            }
            this.lastActionHabitatID = null
        };
        e.prototype.executeMassRecruit = function (t) {
            var e = "(" + this.getAllSelected().join(",") + ")",
                a = {
                    unitID: this.selectedUnitID,
                    habitatIDArray: e,
                    paymentGranted: t
                };
            this.lastActionHabitatID = null;
            i.request("HabitatAction/buildUnitInHabitatArray", a, this.triggerModelUpdate, this)
        };
        e.prototype.unitSelected = function (t) {
            this.selectedUnitID = +t;
            this.__data = this._prepareFastTemplateData();
            this.publishUpdate()
        };
        e.prototype._storageKey = function () {
            return _.storeLocal.createKey("fastR", this.selectedUnitID)
        };
        e.prototype.getTotalAmount = function () {
            var i = this._findDeadHabitatsInCacheAndRemove(),
                a = 0;
            for (var e = 0, s = i.length; e < s; e++) {
                var n = i[e];
                a += y[this.selectedUnitID].getMaxRecruiting(t.habitate[n])
            }
            return a
        };
        return e
    }(m);
    ae.FastRecruiting = function (e) {
        "use strict";
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }

        function i(e) {
            var t = $(e);
            if (t.is("input[type=checkbox]")) {
                this.habitatSelected(t);
                return true
            }
            if (t.is(".title")) {
                this.openHabitat(t);
                return true
            }
            return false
        }
        t.prototype.openHabitat = function (t) {
            this.notify("CncQVCpR", this, {
                habitat: {
                    id: t.parents(".container").data("habitat")
                }
            })
        };
        t.prototype.clickHandler = function (t) {
            this.bubble(t, i.bind(this), "recruitingList")
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                selector: ".fastRecruiting",
                event: "click",
                callback: this.clickHandler,
                target: this
            });
            return e
        };
        t.prototype.habitatSelected = function (t) {
            var e = t.prop("checked") ? "Ne6XMEKA" : "ZSPySeHP";
            this.notify(e, this, {
                habitat: {
                    id: t.parents(".line").data("habitat")
                }
            })
        };
        t.prototype.select = function (t) {
            $("#recruitingList input").prop("checked", false);
            if (!t) {
                return
            }
            for (var e = 0, i = t.length; e < i; e++) {
                var a = t[e];
                this.selectHabitat(a)
            }
        };
        t.prototype.selectHabitat = function (t) {
            var e = $("#recruitingList .line[data-habitat=" + t + "]");
            e.find("input[type=checkbox]").prop("checked", true)
        };
        return t
    }(TemplateView);
    ae.Content = function (e) {
        "use strict";
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype._clickManager = function (e) {
            var t = $(e);
            if (t.is(".recruitButton:not(.disabled)")) {
                this.recruitButtonClicked(t);
                return true
            }
            if (t.is(".button.maxButton")) {
                this.maxButtonClicked(t);
                return true
            }
            if (t.is(".button.speedup")) {
                this.speedupButtonClicked(t);
                return true
            }
            if (t.is(".button.speedUpLine")) {
                this.speedupLineButtonClicked(t);
                return true
            }
            if (t.is(".button.finishLine")) {
                this.finishLineButtonClicked(t);
                return true
            }
            if (t.is(".title")) {
                this.openHabitat(t);
                return true
            }
            return false
        };
        t.prototype.openHabitat = function (t) {
            this.notify("CncQVCpR", this, {
                habitat: {
                    id: t.parents(".container").data("habitat")
                }
            })
        };
        t.prototype.speedupLineButtonClicked = function (t) {
            this.notify("ors5B(Yw", this, {
                habitatID: t.parents(".container").data("habitat")
            })
        };
        t.prototype.finishLineButtonClicked = function (t) {
            this.notify("I0BNxlkp", this, {
                habitatID: t.parents(".container").data("habitat")
            })
        };
        t.prototype.speedupButtonClicked = function (t) {
            var e = t.data("unit");
            this.notify("X1GRXWT5", this, {
                habitatID: t.parents(".container").data("habitat"),
                unitOrderID: t.data("upgrade")
            })
        };
        t.prototype.maxButtonClicked = function (t) {
            var e = t.data("max");
            t.parents(".maxInput").find("input").val(e)
        };
        t.prototype.recruitButtonClicked = function (t) {
            var e = t.data("unit");
            this.notify("yzTtg%w4", this, {
                habitatID: t.parents(".container").data("habitat"),
                unitID: e,
                amount: t.parents(".unit").find(".unitElement[data-primary-key=" + e + "] .maxInput input").val(),
                max: t.parents(".unit").find(".unitElement[data-primary-key=" + e + "] .maxInput .button.maxButton").data("max")
            })
        };
        t.prototype.timeEvent = function () {
            $(".contentRecruitingList .readyTime").each(function () {
                var t = $(this),
                    e = t.data("complete"),
                    i = utils.date.setCountDownTime(new Date(e));
                t.text(utils.date.secToTimeStr(i))
            })
        };
        t.prototype.clickHandler = function (t) {
            this.bubble(t, this._clickManager.bind(this), "recruitingList")
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                selector: ".contentRecruitingList",
                event: "click",
                callback: this.clickHandler,
                target: this
            });
            return e
        };
        t.prototype.getAllInputFieldValues = function () {
            var t = [],
                e = $(".contentRecruitingList .line");
            e.each(function (s, a) {
                var e = $(a),
                    i = {
                        habitatID: +e.data("habitat"),
                        values: {}
                    };
                e.find("input").each(function (a, e) {
                    var t = $(e);
                    i.values[t.data("primary-key")] = +t.val()
                });
                t.push(i)
            });
            return t
        };
        t.prototype.restoreAllInputFieldValues = function (e) {
            for (var t = 0, r = e.length; t < r; t++) {
                var i = e[t],
                    o = i.habitatID,
                    l = $(".contentRecruitingList .line[data-habitat=" + o + "]"),
                    a = i.values;
                for (var s in a) {
                    var n = a[s],
                        u = l.find("input[data-primary-key=" + s + "]");
                    if (n !== 0) {
                        u.val(n)
                    }
                }
            }
        };
        t.prototype.deltaUpdate = function (d, h, u) {
            var e = $(".contentRecruitingList .line[data-habitat=" + u + "]"),
                c = h.habitate,
                t = i(u, c);
            if (!t) {
                return
            }
            a(e, t);
            s(e, t);
            n(e, t);
            r(e, t);
            o(e, t);
            l(e, t)
        };

        function i(i, e) {
            for (var t = 0, a = e.length; t < a; t++) {
                if (i === e[t].id) {
                    return e[t]
                }
            }
            return null
        }

        function a(t, e) {
            t.find(".title").html(e.title)
        }

        function s(s, a) {
            for (var e = 0, n = a.habitatResources.length; e < n; e++) {
                var t = a.habitatResources[e],
                    i = s.find(".resourceElement[data-primary-key=" + t.resourceID + "] .resourceAmount");
                i.html(t.amount);
                i.removeClass("red organe");
                if (t.resourceColor) {
                    i.addClass(t.resourceColor)
                }
            }
        }

        function n(s, a) {
            for (var i = 0, n = a.habitatUnits.length; i < n; i++) {
                var t = a.habitatUnits[i],
                    e = s.find(".unitElement[data-primary-key=" + t.unitID + "]");
                e.find(".affordable").html(t.amount);
                e.find(".maxInput .smalltextbox input").attr("placeholder", t.maxInput.max);
                e.find(".maxInput .button.maxButton").data("max", t.maxInput.max);
                e.find(".maxInput .button.maxButton").attr("data-max", t.maxInput.max)
            }
        }

        function r(s, e) {
            for (var t = 0, n = e.recruitableUnits.length; t < n; t++) {
                var i = e.recruitableUnits[t],
                    a = s.find(".recruitButton[data-unit=" + i.unitID + "]");
                if (!i.recruitable) {
                    a.addClass("disabled")
                } else {
                    a.removeClass("disabled")
                }
            }
        }

        function o(t, e) {
            if (e.finishLine && t.find(".button.finishLine").length === 0) {
                t.find(".unit.size1of4").append('<div class="button finishLine"><img src="' + e.finishIcon + '"></div>')
            } else if (!e.finishLine) {
                t.find(".unit.size1of4 .button.finishLine").remove()
            }
            if (e.speedupLine && t.find(".button.speedUpLine").length === 0) {
                t.find(".unit.size1of4").append('<div class="button speedUpLine"><img src="' + e.speedupIcon + '"></div>')
            } else if (!e.speedupLine) {
                t.find(".unit.size1of4 .button.speedUpLine").remove()
            }
        }

        function l(o, a) {
            var r = o.find(".units.activeRecruitings");
            r.removeClass("hidden");
            if (a.numberOfActiveRecruitings === 0) {
                r.addClass("hidden")
            }
            for (var e = 0, l = a.activeRecruitings.length; e < l; e++) {
                var n = a.activeRecruitings[e],
                    s = n.orders,
                    t = o.find(".upgradeContainer[data-primary-key=" + n.unitID + "]");
                t.find(".upgrade").remove();
                if (s.length > 0) {
                    t.removeClass("empty")
                } else {
                    t.addClass("empty")
                }
                for (var i = 0, u = s.length; i < u; i++) {
                    var h = s[i];
                    t.append(utils.Template.renderHtml("{{>unitUpgradeOrder}}", h))
                }
            }
        }
        return t
    }(TemplateView);
    ae.TabBar = function (i) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (t, e) {
            this.createSubview(this, {
                count: 0,
                icon: "recruit",
                styles: "tab",
                name: translate("Unit Recruiting"),
                clickMessage: "ZrqcAAn0"
            }, p.TabButton);
            this.createSubview(this, {
                count: 1,
                icon: "recruitGroup",
                styles: "tab",
                name: translate("Mass recruitment"),
                clickMessage: "mUiEUWwH"
            }, p.TabButton);
            this.filler = this.createSubview(this, {
                count: 2,
                icon: "",
                styles: "tab filler unitTable",
                filler: true
            }, p.TabButton);
            this.unitTable = this.filler.createSubview(this.filler, {
                units: y,
                styles: "unitTableHeader"
            }, b.Table);
            this.clearfix();
            this.createSubview(this, {
                styles: "divider"
            });
            this.draw()
        };
        t.prototype.draw = function () {
            t.__super__.draw.apply(this, arguments);
            Se("recruitment")
        };
        t.prototype.hideUnitTable = function () {
            this.unitTable.hide();
            $("#" + this.filler.id).removeClass("unitTable")
        };
        t.prototype.showUnitTable = function () {
            this.unitTable.show();
            $("#" + this.filler.id).addClass("unitTable")
        };
        return t
    }(e);
    ae.Window = function (i) {
        "use strict";
        utils.__extends(e, n.Window);

        function e(t, i) {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.dataUpdate = function (i, a, s) {
            e.__super__.dataUpdate.apply(this, arguments);
            if (s === "normal") {
                this.normalRecruiting(i, a)
            } else {
                this.fastRecruiting(i, a)
            } if (!this.tabbar) {
                this._topBar();
                this._bottomBar();
                this._headline()
            }
            this.updateButtons();
            this.headline.draw();
            if (t && t.habitate) {
                this.styleArray.push("habitat-" + utils.dict.size(t.habitate))
            }
        };
        e.prototype.fastRecruiting = function (e, t) {
            this.mainContentContainer.parent.deleteSubviewByField("tag", "templateContainer");
            this.createFastRecruitingTable(t)
        };
        e.prototype.normalRecruiting = function (i, e) {
            var t;
            this.mainContentContainer.parent.deleteSubviewByField("tag", "templateContainer");
            if (this.recruitingList && this.recruitingList.getAllInputFieldValues) {
                t = this.recruitingList.getAllInputFieldValues()
            }
            this.createRecruitingTable(e);
            if (t) {
                this.recruitingList.restoreAllInputFieldValues(t)
            }
        };
        e.prototype._createTable = function (t, e, i) {
            this.recruitingList = this.createSubview(this.content, {
                templateData: i,
                template: e,
                attachTo: this.content
            }, t);
            this.recruitingList.draw()
        };
        e.prototype.createRecruitingTable = function (t) {
            this._createTable(ae.Content, "globalRecruiting", t)
        };
        e.prototype.createFastRecruitingTable = function (t) {
            this._createTable(ae.FastRecruiting, "fastRecruiting", t)
        };
        e.prototype._headline = function () {
            this.createHeadlineButtons(this.headline)
        };
        e.prototype._topBar = function () {
            this.tabbar = this.createSubview(this.mainContentContainer.parent, {
                name: "recrutingTabbar",
                styles: "tabbar recruitment"
            }, ae.TabBar);
            this.unitButton = this.createSubview(this.mainContentContainer.parent, {
                icon: J.PUSHCART,
                content: translate("Pushcart"),
                iconCategory: "units",
                clickMessage: "EyHNDBxo",
                styles: "unitSelector",
                hidden: true
            }, k);
            this.unitMenu = this.createSubview(this, {
                dropdownSelector: "#" + this.id + " .dropdown.unit",
                chooserButtonSelector: "#" + this.id + " .listButton.unitSelector",
                itemSelector: "unitElement",
                hidden: true,
                selectMessage: "SoAH&3i1",
                selectedItemID: J.PUSHCART
            }, B.UnitMenu);
            this.tabbar.dataUpdate(null, {})
        };
        e.prototype._bottomBar = function () {
            this.bottomButtons = this.createSubview(this.mainContentContainer.parent, {
                styles: "bottomButtons",
                hidden: true
            });
            this.massRecruitButton = this.createSubview(this.bottomButtons, {
                styles: "recruitButton",
                content: translate("Unit factory"),
                clickMessage: "UmiA)7SQ"
            }, l);
            this.createSubview(this.bottomButtons, {
                styles: "selectAllButton",
                content: this.getIcon("buttonCastleMultiple"),
                clickMessage: "&UqUbZ-A",
                hover: translate("Select all habitats")
            }, l)
        };
        e.prototype.showUnitSelector = function () {
            this.unitButton.show()
        };
        e.prototype.hideUnitSelector = function () {
            this.unitButton.hide()
        };
        e.prototype.showBottomButtons = function () {
            this.bottomButtons.show()
        };
        e.prototype.hideBottomButtons = function () {
            this.bottomButtons.hide()
        };
        e.prototype.showUnitHeaderTable = function () {
            this.tabbar.showUnitTable()
        };
        e.prototype.hideUnitHeaderTable = function () {
            this.tabbar.hideUnitTable()
        };
        e.prototype.updateButtons = function () {
            var t, e, i, a;
            if (this.speedAllButton) {
                $("#" + this.speedAllButton.id).remove()
            }
            if (this.finishAllButton) {
                $("#" + this.finishAllButton.id).remove()
            }
            this.headline.buttons.deleteAllSubviews();
            this.deleteSubviewChain(this.speedAllButton);
            this.deleteSubviewChain(this.finishAllButton);
            if (this.canSpeedUpUnitOrders()) {
                t = this.notify("rvHW39mY", this, {
                    imageCategory: "icons",
                    imageName: "doubleArrow"
                });
                e = translate("Speedup all units");
                i = "speedUpAllButton";
                a = "&ut51WtI";
                this.speedAllButton = this.createSubview(this.headline.buttons, {
                    content: t,
                    hover: e,
                    name: i,
                    clickMessage: a
                }, l)
            }
            if (this.canFinishUnitOrders()) {
                t = this.notify("rvHW39mY", this, {
                    imageCategory: "icons",
                    imageName: "finishTick"
                });
                e = translate("Finish all units");
                i = "finishAllButton";
                a = "&n2jWQ3y";
                this.finishAllButton = this.createSubview(this.headline.buttons, {
                    content: t,
                    hover: e,
                    name: i,
                    clickMessage: a
                }, l)
            }
        };
        e.prototype.canFinishUnitOrders = function () {
            var e = false;
            for (var i in t.habitate) {
                for (var a in t.habitate[i].habitatUnitOrders) {
                    if (t.habitate[i].habitatUnitOrders[a].durationFactor < 1) {
                        e = true;
                        break
                    }
                }
            }
            return e
        };
        e.prototype.canSpeedUpUnitOrders = function () {
            var e = false;
            for (var i in t.habitate) {
                for (var a in t.habitate[i].habitatUnitOrders) {
                    if (t.habitate[i].habitatUnitOrders[a].durationFactor === 1) {
                        e = true;
                        break
                    }
                }
            }
            return e
        };
        e.prototype.updateChooserButton = function (t) {
            var e = t ? t : "10001",
                i = t ? translate(y[t].identifier) : "Pushcart";
            this.unitButton.dataUpdate(null, {
                icon: e,
                content: i
            });
            this.unitButton.draw()
        };
        return e
    }(n.Window);
    Le.HoverView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("knowledge");
            this.addRequired("habitat");
            this.setOptions(e);
            this.styleArray.push("knowledgeHover")
        }
        t.prototype.create = function () {
            var t, e, s;
            var n = this.knowledge.identifier.split("/")[0];
            this.createSubview(this, {
                styles: "title",
                content: translate(n)
            });
            this.createSubview(this, {
                styles: "icon",
                content: this.notify("rvHW39mY", this, {
                    imageName: n,
                    imageCategory: "knowledges"
                })
            });
            this.createSubview(this, {
                styles: "description",
                content: this.knowledge.getDescription()
            });
            this.clearfix();
            if (this.knowledge.requiredKnowledges) {
                this.createSubview(this, {
                    styles: "title sub",
                    content: translate("Required knowledge")
                });
                var o = this.createSubview(this, {
                    styles: "enables"
                });
                for (t = 0; t < this.knowledge.requiredKnowledges.length > 0; t++) {
                    var r = this.createSubview(o, {
                        styles: "requiredKnowledge"
                    });
                    e = A[this.knowledge.requiredKnowledges[t]];
                    this.createSubview(r, {
                        content: this.notify("rvHW39mY", this, {
                            imageName: e.identifier,
                            imageCategory: "knowledges"
                        })
                    });
                    s = "";
                    if (this.isKnowledgeResearched(e) === false) {
                        s = "red"
                    }
                    this.createSubview(r, {
                        content: translate(e.identifier.split("/")[0]),
                        styles: s
                    })
                }
            }
            this.clearfix();
            this.createSubview(this, {
                styles: "title sub",
                content: translate("Cost")
            });
            if (this.knowledge.volumeAmount !== null && this.knowledge.volumeAmount !== 0) {
                this.knowledge.buildResources[a.PEOPLE] = this.knowledge.volumeAmount
            }
            this.createSubview(this, {
                resources: this.knowledge.buildResources,
                time: this.knowledge.buildDuration,
                styles: "resources"
            }, P.Table);
            this.clearfix();
            var i = this.knowledge.getEnabled();
            if (i.enables.length > 0) {
                this.createSubview(this, {
                    styles: "title sub",
                    content: translate("Enables")
                });
                this.createSubview(this, {
                    enabledFeatures: i.enables,
                    knowledge: this.knowledge,
                    styles: "enables"
                }, Ie, null, false);
                this.clearfix()
            }
            if (i.bonus.length > 0) {
                this.createSubview(this, {
                    styles: "title sub",
                    content: translate("Modifies")
                });
                this.createSubview(this, {
                    enabledFeatures: i.bonus,
                    knowledge: this.knowledge,
                    styles: "enables"
                }, Ie, null, false);
                this.clearfix()
            }
        };
        t.prototype.isKnowledgeResearched = function (e) {
            var t = false;
            $.each(this.habitat.habitatKnowledges, function (a, i) {
                if (i !== null && i.primaryKey === e.primaryKey) {
                    t = true
                }
            });
            return t
        };
        return t
    }(R);
    Le.HabitatList = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addRequired("building");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            var h = this.building.knowledges;
            var a, i, e, c, r, o;
            var l;
            for (var n = 0; n < h.length; n++) {
                var u = false;
                a = h[n];
                hoverView = new Le.HoverView(this.controller, {
                    knowledge: a,
                    habitat: this.habitat
                });
                hoverView.create();
                var d = this.notify("rvHW39mY", this, {
                    imageName: a.identifier,
                    imageCategory: "knowledges"
                });
                e = this.createSubview(this, {
                    styles: "knowledgeListItem"
                });
                this.createSubview(e, {
                    content: d,
                    hoverView: hoverView,
                    styles: "knowledgeIcon"
                }, N);
                i = this.notify("rvHW39mY", this, {
                    imageName: "research",
                    imageCategory: "icons"
                });
                r = "87ldsMFP";
                o = "button";
                l = A[a.primaryKey];
                if (l.isExplorable(this.habitat) === false) {
                    i = this.notify("rvHW39mY", this, {
                        imageName: "researchBlack",
                        imageCategory: "icons"
                    });
                    o = "button disabled"
                }
                if (l.alreadyResearched(this.habitat) === true) {
                    i = this.notify("rvHW39mY", this, {
                        imageName: "permissionTrueBlack",
                        imageCategory: "browserIcons"
                    });
                    u = true
                }
                var s = this.habitat.getHabitatKnowledge(a.primaryKey);
                if (typeof s !== "undefined") {
                    i = this.notify("rvHW39mY", this, {
                        imageName: "researchSpeedup",
                        imageCategory: "icons"
                    });
                    o = "button";
                    r = "%KS)scz(";
                    if (s.isSpeededup() || s.isHalfDurationReached()) {
                        i = this.notify("rvHW39mY", this, {
                            imageName: "researchFinish",
                            imageCategory: "icons"
                        });
                        r = "023BARhk"
                    }
                }
                if (!this.parent.isPreview && !u) {
                    c = this.createSubview(e, {
                        content: i,
                        clickMessage: r,
                        styles: o,
                        data: a.primaryKey,
                        propagateClicks: false
                    })
                } else if (u) {
                    e.createSubview(e, {
                        content: this.getIcon("missionComplete"),
                        styles: "knowledgeComplete"
                    })
                }
                e.clearfix();
                if (s) {
                    this.createSubview(e, {
                        time: Math.floor((s.complete - (new Date - W)) / 1e3),
                        runningTimer: true,
                        formatFunction: utils.date.secToTimeStr
                    }, K)
                }
                if (n % 3 === 2) {
                    this.clearfix()
                }
            }
        };
        return t
    }(w);
    We.Controller = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("success");
            this.addOption("failure", null);
            this.setOptions(e)
        }
        t.prototype["GFvNsF7-"] = function (t, e) {
            this.success(this);
            this.notify("IvTCew1X", this)
        };
        t.prototype["T2qxF2su"] = function (t, e) {
            if (typeof this.failure != "undefined" && this.failure !== null) {
                this.failure(this)
            }
            this.notify("IvTCew1X", this)
        };
        t.prototype["HTnWZGse"] = function (t, e) {
            this.view.fixHeight()
        };
        t.prototype.dataUpdate = function (t, e) {};
        return t
    }(n.Controller);
    We.Window = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("data", {});
            this.addOption("confirmButton", false);
            this.addOption("modal", false);
            this.setOptions(e);
            this.headline.title.content = this.data ? this.data.title : translate("Error")
        }
        t.prototype.create = function () {
            var t = this.data ? this.data.content : translate("No Description");
            this.setDefaultPosition();
            this.container = this.content.createContainer({
                styles: "dialogContainer"
            });
            this.createSubview(this.container, {
                group: "DialogWindow",
                styles: "dialogContent",
                content: t
            });
            this.buttonContainer = this.createSubview(this.container, {
                styles: "buttons"
            });
            if (this.confirmButton) {
                this.createSubview(this.buttonContainer, {
                    group: "DialogWindow",
                    content: translate("cancel"),
                    clickMessage: "T2qxF2su"
                }, l);
                this.createSubview(this.buttonContainer, {
                    group: "DialogWindow",
                    content: translate("ok"),
                    clickMessage: "GFvNsF7-"
                }, l)
            } else {
                this.createSubview(this.buttonContainer, {
                    group: "DialogWindow",
                    content: translate("ok"),
                    clickMessage: "T2qxF2su"
                }, l)
            }
        };
        t.prototype.fixHeight = function () {
            var t = this.node(),
                e = t.find(".dialogContent").outerHeight(),
                i = 162;
            t.height(e + i)
        };
        t.prototype.compileHTML = function () {
            var e = t.__super__.compileHTML.apply(this, arguments);
            if (this.modal === false) {
                return e
            }
            return e
        };
        t.prototype.setDefaultPosition = function () {
            this.draw();
            var t = $(window),
                e = $("#" + this.id),
                i = t.width() / 2 - e.outerWidth() / 2,
                a = t.height() / 2 - e.outerHeight();
            this.updatePosition({
                x: i,
                y: a
            })
        };
        return t
    }(n.Window);
    ve.Controller = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.mapSlider = {
                settings_bgmusic: this._setVolumes,
                settings_sfx: this._setVolumes,
                settings_mapspeed: this._setMapValues
            }
        }
        t.prototype.dataUpdate = function (t, e) {
            this.view.dataUpdate(t, e)
        };
        t.prototype["X%i7Q_c)"] = function () {
            return this.notify("X%i7Q_c)")
        };
        t.prototype._setVolumes = function (t) {
            var i = {}, e;
            if (t.name === "settings_bgmusic") {
                e = "bgMusic"
            }
            if (t.name === "settings_sfx") {
                e = "sfx"
            }
            if (t.value <= 2) {
                t.value = 0
            }
            i[e] = t.value / 100;
            this.notify("Mbh%Rxg6", this, i)
        };
        t.prototype._setMapValues = function (t) {
            if (t.name === "settings_mapspeed") {
                this.controller.UI_THROTTLE_MOUSEMOVE = t.value;
                this.controller.disableMouseEvents();
                this.controller.enableMouseEvents()
            }
        };
        t.prototype["HQkeVqf2"] = function (i, t) {
            var e = t.name;
            if (!this.mapSlider[e]) {
                return
            }
            this.mapSlider[e].call(this, t);
            this.flashNewValue(e, t.value)
        };
        t.prototype.flashNewValue = function (e, i) {
            var t = $("#" + e).parent();
            t.find(".value").remove();
            t.append('<span class="value">( ' + i + " )</span>")
        };
        t.prototype["mm-DpP)j"] = function () {
            t.__super__["mm-DpP)j"].apply(this, arguments);
            var i = this.view.settings.sliders;
            for (var e = 0, a = i.length; e < a; e++) {
                var s = i[e];
                s.end()
            }
        };
        return t
    }(n.Controller);
    ve.View = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e);
            this.sliders = []
        }
        t.prototype.draw = function () {
            t.__super__.draw.apply(this, arguments);
            var e = this.notify("X%i7Q_c)");
            if (!e) {
                e = {
                    bgMusic: 100,
                    sfx: 100
                }
            } else {
                e.bgMusic *= 100;
                e.sfx *= 100
            }
            this.sliders = [];
            this.sliders.push(this.activateSlider("settings_bgmusic", 1, 100, Math.floor(e.bgMusic)));
            this.sliders.push(this.activateSlider("settings_sfx", 1, 100, Math.floor(e.sfx)))
        };
        return t
    }(TemplateView);
    ve.Window = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("volumes");
            this.setOptions(e);
            this.create()
        }
        t.prototype.create = function () {
            this.settings = this.createSubview(this.content, {
                template: "settings"
            }, ve.View)
        };
        return t
    }(n.Window);
    Ee.Controller = function (i) {
        utils.__extends(t, i);
        var e = "_sfx";

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("backgroundTracks", []);
            this.addOption("castleAtmo", []);
            this.addOption("mapAtmo", []);
            this.setOptions(e);
            this.bgMusic = this._getControlObj(this.backgroundTracks, mi);
            this.atmo = this._getControlObj(this.castleAtmo, Ke);
            this.mAtmo = this._getControlObj(this.mapAtmo, Ke);
            this._sfxCache = {};
            this.sfx = {
                volume: Ke
            }
        }
        t.prototype.start = function () {
            if (this.mapAtmo.length > 0 && this.sfx.volume > 0) {
                this._playTrackLoop(this.mAtmo)
            }
            this.started = true
        };
        t.prototype._getControlObj = function (e, t) {
            e = e || [];
            t = typeof t !== "undefined" ? t : 1;
            return {
                playing: false,
                audio: null,
                name: "",
                volume: t,
                tracks: e,
                index: -1
            }
        };
        t.prototype.dataUpdate = function (e, t) {
            if (t) {
                this.setVolume(t);
                if (!this.started) {
                    this.start()
                }
            }
        };
        t.prototype.nextTrack = function (t) {
            if (!t.tracks) {
                return
            }
            t.index += 1;
            if (t.index >= t.tracks.length) {
                t.index = 0
            }
            return t.tracks[t.index]
        };
        t.prototype._playTrackLoop = function (t) {
            var e = this.nextTrack(t);
            if (t.playing) {
                return false
            }
            t.playing = true;
            t.name = e;
            if (!e) {
                return false
            }
            if (t.audio) {
                t.audio.stop();
                t.audio = undefined
            }
            if (t.volume === 0) {
                return
            }
            t.audio = new Howl({
                urls: t.tracks,
                volume: t.volume,
                autoplay: true,
                loop: true,
                onend: function () {
                    t.playing = false
                }
            });
            return true
        };
        t.prototype.playBGMusic = function () {
            return this._playTrackLoop(this.bgMusic)
        };
        t.prototype.playAtmo = function () {
            return this._playTrackLoop(this.atmo)
        };
        t.prototype.pauseAtmo = function () {
            if (this.atmo.audio && this.atmo.playing) {
                this.atmo.audio.pause()
            }
            this.atmo.playing = false
        };
        t.prototype.playSFX = function (t) {
            if (this.sfx.volume === 0) {
                return
            }
            var e = new Howl({
                urls: [t],
                volume: this.sfx.volume,
                autoplay: true,
                loop: false
            });
            return e
        };
        t.prototype.linkPlaySFX = function (i, a, t) {
            t = t || e;
            if (!this._sfxCache[t]) {
                this._sfxCache[t] = {}
            }
            if (this._sfxCache[t][i]) {
                this.linkPauseSFX(i)
            }
            this._sfxCache[t][i] = this.playSFX(a)
        };
        t.prototype.linkPauseSFX = function (i, t) {
            t = t || e;
            if (!this._sfxCache[t] || !this._sfxCache[t][i]) {
                return
            }
            this._sfxCache[t][i].pause();
            delete this._sfxCache[t][i]
        };
        t.prototype.linkPauseCategorySFX = function (t) {
            if (!this._sfxCache[t]) {
                return
            }
            for (var i in this._sfxCache[t]) {
                var e = this._sfxCache[t][i];
                if (e) {
                    e.pause()
                }
            }
            delete this._sfxCache[t]
        };
        t.prototype.linkSetVolume = function (t, e) {
            for (var i in t) {
                var a = t[i];
                if (a instanceof Audio) {
                    a.volume = e
                } else {
                    this.linkSetVolume(t[i], e)
                }
            }
        };
        t.prototype.pauseBGMusic = function () {
            if (this.bgMusic.audio) {
                this.bgMusic.audio.pause()
            }
            this.bgMusic.playing = false
        };
        t.prototype.setBGVolume = function (t) {
            if (t > 1) {
                t = 1
            }
            if (t < 0) {
                t = 0
            }
            this.bgMusic.volume = t;
            if (this.bgMusic.audio) {
                this.bgMusic.audio.volume(this.bgMusic.volume)
            }
            if (this.bgMusic.volume === 0) {
                this.pauseBGMusic()
            } else {
                this.playBGMusic()
            }
        };
        t.prototype.setSFXVolume = function (t) {
            if (t > 1) {
                t = 1
            }
            if (t < 0) {
                t = 0
            }
            this.sfx.volume = t;
            this.mAtmo.volume = t;
            this.atmo.volume = t;
            if (this.mAtmo.audio) {
                this.mAtmo.audio.volume(this.sfx.volume);
                if (this.sfx.volume > 0) {
                    this.start()
                }
            }
            if (this.atmo.audio) {
                this.atmo.audio.volume(this.sfx.volume)
            }
        };
        t.prototype.setVolume = function (t) {
            if (typeof t.bgMusic != "undefined") {
                this.setBGVolume(t.bgMusic)
            }
            if (typeof t.sfx != "undefined") {
                this.setSFXVolume(t.sfx)
            }
            this.datasource.saveSettings(this.getVolume())
        };
        t.prototype.getVolume = function () {
            return {
                bgMusic: this.bgMusic.volume,
                sfx: this.sfx.volume
            }
        };
        t.prototype["iycdUYyd"] = function () {
            if (this.bgMusic.playing) {
                this.setVolume({
                    bgMusic: 0
                })
            } else {
                this.setVolume({
                    bgMusic: 1
                })
            } if (!this.view) {
                return
            }
            var t = this.view.findSubviewByName("bgMusic");
            if (!t) {
                return
            }
            t.setValue(this.bgMusic.volume);
            t.draw()
        };
        t.prototype["2(SMdPYi"] = function () {
            if (this.sfx.volume > 0) {
                this.setVolume({
                    sfx: 0
                })
            } else {
                this.setVolume({
                    sfx: 1
                })
            } if (!this.view) {
                return
            }
            var t = this.view.findSubviewByName("sfx");
            if (!t) {
                return
            }
            t.setValue(this.sfx.volume);
            t.draw()
        };
        return t
    }(n.Controller);
    Ee.Datasource = function (i) {
        utils.__extends(e, i);

        function e(i, a) {
            e.__super__.constructor.apply(this, arguments);
            this._defaults = {
                bgMusic: mi,
                sfx: Ke
            };
            this.storeKey = "sound_" + t.id
        }
        e.prototype.saveSettings = function (t) {
            this.__data = t;
            _.storeLocal.setJSON(this.storeKey, t)
        };
        e.prototype.loadSettings = function () {
            var t = this._defaults;
            var e = _.storeLocal.getJSON(this.storeKey);
            if (e) {
                t = e
            }
            this.setData(t)
        };
        return e
    }(m);
    q.Controller = function (i) {
        utils.__extends(e, i);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.editmode = 0;
            this.singleeditmode = 0;
            this.playerReplied = false;
            this.forceForumRefresh = false;
            this.playerAlliancePermissions = t.alliancePermission;
            this.currentPlayerCanEdit = t.alliancePermission === h.ALL || t.alliancePermission & h.MODERATE_FORUM
        }

        function a(e) {
            var i = e.find(":checkbox:checked"),
                t = [];
            i.each(function () {
                t.push($(this).parents(".content-frame").data("id"))
            });
            return t
        }
        e.prototype.dataUpdate = function (a, e) {
            if (e && e.forumThreadArray) {
                this.data = t.alliance.forumThreadArray
            }
            if (this.playerAlliancePermissions !== t.alliancePermission) {
                this.playerAlliancePermissions = t.alliancePermission;
                if (t.hasAlliancePermission(h.MODERATE_FORUM)) {
                    if (this.view) {
                        this.currentPlayerCanEdit = true
                    }
                } else {
                    if (this.view) {
                        this.currentPlayerCanEdit = false
                    }
                }
            }
            var i = this.view.findSubviewByField("tag", "currentView");
            if (i && i.name === "ForumThreadWrapper") {
                if (this.playerReplied && !e.threadData) {
                    this.currentThreadDS.getThread(this.currentThread.id);
                    this.playerReplied = false
                }
                if (e.threadData) {
                    i.dataUpdate(null, e.forumMessageArray)
                }
            } else {
                if (this.preventUpdate) {
                    return
                }
                this.refreshForum()
            } if (this.forceForumRefresh) {
                this["0scd3paU"]();
                this.refreshForum();
                this.forceForumRefresh = false
            }
            this._editControlsCounter()
        };
        e.prototype.refreshForum = function () {
            var t = this.view.findSubviewByField("tag", "currentView"),
                i = t && t.name === "ForumNewThread";
            if (!i) {
                this.view.dataUpdate(null, this.data);
                this.view.hideThreadModeratorButtons();
                this.view.stopSingleEditMode();
                this.view.stopEditMode();
                this.editmode = 0;
                this.singleeditmode = 0;
                var e = this.view.headline.buttons.findSubviewByName("back");
                if (e) {
                    e.hide()
                }
            }
            if (this.currentPlayerCanEdit) {
                this.view.editModeButton.show()
            } else {
                this.view.editModeButton.hide()
            }
        };
        e.prototype["Ce-s(7Ta"] = function (t) {
            this.notify("CcFE9soE", this, t)
        };
        e.prototype["0scd3paU"] = function () {
            e.__super__["0scd3paU"].apply(this, arguments);
            this.view.hideThreadModeratorButtons();
            if (this.currentPlayerCanEdit) {
                this.view.editModeButton.show()
            } else {
                this.view.editModeButton.hide()
            }
            this.currentThread = null;
            this.preventUpdate = false
        };
        e.prototype["mlx3poc_"] = function () {
            if (this.editmode) {
                this.view.stopEditMode()
            } else {
                this.view.startEditMode()
            }
            this.editmode ^= 1
        };
        e.prototype["BhAVH9Rq"] = function () {
            if (this.singleeditmode) {
                this.view.stopSingleEditMode()
            } else {
                this.view.startSingleEditMode()
            }
            this.singleeditmode ^= 1
        };
        e.prototype["fSMQMZve"] = function () {
            if (this.currentPlayerCanEdit) {
                var t = this.currentThread;
                this.view.closeThread.setOptions({
                    threadID: t.id
                });
                this.view.openThread.setOptions({
                    threadID: t.id
                });
                this.view.showThreadModeratorButtons(t.closed)
            }
        };
        e.prototype["0I4SJP3-"] = function (a) {
            if (this.view.blockOverlay === true) {
                return
            }
            if (this.editmode) {
                return
            }
            var e = this.data.filter(function (t) {
                return t.id === a
            })[0];
            e = $.extend({}, e);
            if (!e.read) {
                e.read = true;
                t.unreadAllianceMessages -= 1;
                this.notify("QXTrBvlI", this);
                this.refreshForum()
            }
            this.showNextViewOfClass(q.ThreadWrapper, {
                thread: {
                    id: e.id,
                    closed: e.closed,
                    read: e.read,
                    topic: e.topic,
                    lastMessageDate: e.lastMessageDate,
                    owner: e.owner,
                    isCondensed: e.isCondensed,
                    isModerator: this.currentPlayerCanEdit
                },
                name: "ForumThreadWrapper"
            });
            var i = new q.ThreadDataSource(this.controller);
            i.addSubscriber(this);
            i.getThread(a);
            this.currentThreadDS = i;
            this.currentThread = e;
            this.preventUpdate = true;
            this.notify("4Ig3uXuO", this);
            this["fSMQMZve"]()
        };
        e.prototype["PTe4zLJ3"] = function () {
            this.notify("fpfOWXdS", this)
        };
        e.prototype["vUgmyPbx"] = function () {
            this.showNextViewOfClass(q.NewThread, {});
            this.preventUpdate = true
        };
        e.prototype["3p&TX4Je"] = function () {
            var t = this.view.findSubviewByField("name", "ForumNewThread").form;
            var i = t.getInput().subject;
            var a = t.getInput().message;
            var e = t.validate();
            if (e.subject && e.message) {
                this.datasource.createForumThread(i, a);
                this["0scd3paU"]()
            }
        };
        e.prototype["0c5EAAgG"] = function () {
            var t = this.view.findSubviewByField("tag", "currentView").answerForm;
            var e = t.getInput().message;
            if (t.validate().message) {
                this.datasource.answerForumThread(this.currentThread.id, e);
                this.playerReplied = true
            }
        };
        e.prototype["KVKvSQL-"] = function (t) {
            this.datasource.closeThread(t.threadID);
            this.view.toggleCloseThreadButton(true);
            currentView = this.view.findSubviewByField("tag", "currentView");
            if (currentView && currentView.name === "ForumThreadWrapper") {
                currentView.closed = true;
                this.forceForumRefresh = true
            }
        };
        e.prototype["h3(jNEJy"] = function (t) {
            this.datasource.openThread(t.threadID);
            this.view.toggleCloseThreadButton(false);
            currentView = this.view.findSubviewByField("tag", "currentView");
            if (currentView && currentView.name === "ForumThreadWrapper") {
                currentView.closed = false;
                this.forceForumRefresh = true
            }
        };
        e.prototype["ZOs1fVFD"] = function () {
            var t = this.view.findSubviewByField("tag", "currentView"),
                n = $("#" + t.id),
                r = t.name === "ForumOverviewWrapper" ? "overview" : "thread",
                s = a(n),
                e, i;
            if (r === "overview") {
                e = "Really delete selection?";
                i = "deleteForumThreads"
            } else {
                if (s.length !== t.posts.length) {
                    e = "Delete the selected posts?";
                    i = "deleteForumMessages";
                    this.playerReplied = true
                } else {
                    s = [t.thread.id];
                    e = "Really delete selection?";
                    i = "deleteForumThreads";
                    this.forceForumRefresh = true
                }
            }
            utils.dialog.confirm(this, translate(e), translate("Delete"), function () {
                this.datasource[i](s)
            }.bind(this))
        };
        e.prototype["WsUlTV0P"] = function () {
            this._editControlsCounter()
        };
        e.prototype["xhjW7E37"] = function () {
            return this.notify("xhjW7E37", this)
        };
        e.prototype["CO6NsrgM"] = function () {
            var t = this.view.findSubviewByField("tag", "currentView");
            $("#" + t.id + " :checkbox").prop("checked", true);
            this._editControlsCounter()
        };
        e.prototype._editControlsCounter = function () {
            var t = this.view.findSubviewByField("tag", "currentView"),
                e = $("#" + t.id + " :checkbox:checked").length;
            this.view.editControls.updateCounter(e)
        };
        return e
    }(n.Controller);
    q.ThreadDataSource = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.setData = function (t) {
            for (var e in t.forumMessageArray) {
                var i = t.forumMessageArray[e].creationDate;
                t.forumMessageArray[e].creationDate = _.conv.toDate(i)
            }
            t.forumMessageArray.sort(function (t, e) {
                if (t.creationDate > e.creationDate) {
                    return +1
                } else {
                    return -1
                }
                return 0
            });
            if (t.forumMessageArray.length > 0) {
                t.highestMessageId = t.forumMessageArray[t.forumMessageArray.length - 1].id
            } else {
                t.highestMessageId = 0
            }
            this.__data = t;
            this.__data.threadData = true;
            this.informControllerUnblock();
            this.publishUpdate()
        };
        t.prototype.errorHandler = function (t) {
            utils.dialog.alert(this, translate(t.error), translate("Forum"), function () {});
            this.notify("bOsn(oQ9", this, null)
        };
        t.prototype.getThread = function (t) {
            i.request("ForumAction/forumMessageArray", {
                id: t
            }, this.setData, this, 62e3, this.errorHandler)
        };
        return t
    }(m);
    q.NewThread = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("name", "ForumNewThread", true);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.form = this.createSubview(this, {
                attachTo: this,
                replyMessage: "3p&TX4Je",
                templateData: {
                    messageMaxLength: 1e3,
                    subject: true,
                    subjectMaxLength: 100
                }
            }, H.AnswerForm);
            this.form.draw()
        };
        return t
    }(e);
    q.Overview = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("name", "ForumOverview", true);
            this.setOptions(e)
        }

        function i(e) {
            var t = $(e);
            if (t.is(".content-frame")) {
                this.listItemClicked(t.data("id"));
                return true
            }
            if (t.is(":checkbox")) {
                this.checkboxClicked();
                return true
            }
            return false
        }
        t.prototype.checkboxClicked = function () {
            this.notify("WsUlTV0P")
        };
        t.prototype.listItemClicked = function (t) {
            this.notify("0I4SJP3-", t)
        };
        t.prototype.clickHandler = function (t) {
            this.bubble(t, i.bind(this), "#forumOverview")
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                event: "click",
                target: this,
                selector: "#forumOverview",
                callback: this.clickHandler
            });
            return e
        };
        return t
    }(TemplateView);
    q.Messages = function (i) {
        utils.__extends(e, i);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.editModeButton = this.createSubview(this.headline.buttons, {
                graphic: "headlineButton_Edit",
                hover: translate("Edit"),
                clickMessage: "mlx3poc_",
                hidden: true
            }, Z);
            if (t.alliancePermission === h.ALL === false && (t.alliancePermission & h.MODERATE_FORUM) === 0) {
                this.editModeButton.hideLock = true
            }
            this.singleEditModeButton = this.createSubview(this.headline.buttons, {
                graphic: "headlineButton_Edit",
                hover: translate("Edit"),
                clickMessage: "BhAVH9Rq",
                hidden: true
            }, Z);
            this.newThread = this.createSubview(this.headline.buttons, {
                graphic: "headlineButton_newThread",
                hover: translate("New Thread"),
                clickMessage: "vUgmyPbx"
            }, Z);
            this.closeThread = this.createSubview(this.headline.buttons, {
                graphic: "headlineButton_closeThread",
                hover: translate("Close thread"),
                name: "closeThreadButton",
                clickMessage: "KVKvSQL-",
                hidden: true
            }, q.ThreadButton);
            this.openThread = this.createSubview(this.headline.buttons, {
                graphic: "headlineButton_openThread",
                hover: translate("Reopen thread"),
                name: "openThreadButton",
                clickMessage: "h3(jNEJy",
                hidden: true
            }, q.ThreadButton);
            this.deleteItems = this.createSubview(this.headline.buttons, {
                graphic: "headlineButton_eraseThread",
                hover: translate("Delete thread?"),
                name: "deleteItemsButton",
                clickMessage: "ZOs1fVFD",
                hidden: true
            }, q.ThreadButton);
            this.editControls = this.createSubview(this.mainContentContainer.parent, {
                cmDelete: "ZOs1fVFD",
                deleteText: "Delete forum thread (%@)"
            }, Ve);
            this.singleModeThreadClosed = false
        }
        e.prototype.showThreadModeratorButtons = function (t) {
            this.singleEditModeButton.show();
            this.singleModeThreadClosed = t
        };
        e.prototype.hideThreadModeratorButtons = function () {
            this.singleEditModeButton.hide();
            this.closeThread.hide();
            this.openThread.hide();
            this.deleteItems.hide()
        };
        e.prototype.showDeleteButton = function () {
            this.deleteItems.show()
        };
        e.prototype.hideDeleteButton = function () {
            this.deleteItems.hide()
        };
        e.prototype.startEditMode = function () {
            this.content.addClass("editmode");
            this.editModeButton.changeImage("headlineButton_Back");
            this.editControls.show();
            this.newThread.hide()
        };
        e.prototype.stopEditMode = function () {
            this.content.removeClass("editmode");
            this.editModeButton.changeImage("headlineButton_Edit");
            this.editControls.hide();
            this.newThread.show()
        };
        e.prototype.startSingleEditMode = function () {
            this.content.addClass("editmode");
            this.singleEditModeButton.changeImage("headlineButton_Back");
            this.editControls.show();
            this.toggleCloseThreadButton(this.singleModeThreadClosed);
            var t = this.headline.buttons.findSubviewByName("back");
            if (t) {
                t.hide()
            }
        };
        e.prototype.stopSingleEditMode = function () {
            var t = this.headline.buttons.findSubviewByName("back");
            if (t) {
                t.show()
            }
            this.content.removeClass("editmode");
            this.singleEditModeButton.changeImage("headlineButton_Edit");
            this.editControls.hide();
            this.closeThread.hide();
            this.openThread.hide()
        };
        e.prototype.toggleCloseThreadButton = function (t) {
            this.singleModeThreadClosed = t;
            if (this.singleModeThreadClosed) {
                this.closeThread.hide();
                this.openThread.show()
            } else {
                this.closeThread.show();
                this.openThread.hide()
            }
        };
        e.prototype.dataUpdate = function (e, t) {
            this.data = t;
            this.content.deleteSubviewByField("tag", "currentView");
            this.wrapper = this.content.createSubview(this.content, {
                tag: "currentView",
                styles: "contentCurrentView",
                name: "ForumOverviewWrapper"
            });
            this.overview = this.wrapper.createSubview(this.wrapper, {
                attachTo: this.wrapper,
                template: "forumOverview",
                templateData: this._prepareData(this.data)
            }, q.Overview);
            this.wrapper.draw()
        };
        e.prototype._prepareData = function (i) {
            var a = [];
            for (var e = 0, n = i.length; e < n; e++) {
                var t = i[e],
                    s = t.read ? "messageRead" : "messageUnread";
                if (t.closed) {
                    s = "threadClosed"
                }
                t.icon = this.notify("1edS3jXy", this, {
                    imageName: s,
                    imageCategory: "icons"
                });
                t.lastMessageDate = utils.date.formatDateTime(t.lastMessageDate);
                t.context = {
                    styles: "clickable",
                    data: {
                        id: t.id
                    }
                };
                a.push(t)
            }
            return {
                threads: a
            }
        };
        return e
    }(n.Window);
    q.ThreadWrapper = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("thread", {});
            this.posts = [];
            this.setOptions(e)
        }
        t.prototype.dataUpdate = function (e, t) {
            this.posts = t;
            this.deleteAllSubviews();
            this._createThread()
        };
        t.prototype.scrollToBottom = function () {
            var t = $(".win.forum"),
                e = t.find(".main-content"),
                i = t.find(".contentCurrentView");
            e.scrollTop(i.outerHeight(true))
        };
        t.prototype._createThread = function () {
            this.threadView = this.createSubview(this, {
                attachTo: this,
                template: "forumThread",
                templateData: this._prepareData()
            }, q.Thread);
            this.threadView.draw();
            if (!this.thread.closed) {
                this.answerForm = this.createSubview(this, {
                    attachTo: this,
                    name: "answerForm",
                    useContainer: true,
                    templateData: {
                        messageMaxLength: 1e3
                    }
                }, H.AnswerForm);
                this.answerForm.draw()
            }
            this.scrollToBottom()
        };
        t.prototype._prepareData = function () {
            var t = $.extend(true, {}, this.thread);
            t.posts = this._mapPosts();
            return t
        };
        t.prototype._mapPosts = function () {
            var i = [];
            var a = this.notify("1edS3jXy", this, {
                imageName: "buttonPlayer",
                imageCategory: "icons"
            });
            for (var e = 0, s = this.posts.length; e < s; e++) {
                var t = $.extend(true, {}, this.posts[e]);
                t.icon = a;
                t.author.nick = utils.dynamicTitle(utils.sanitize(t.author.nick), 29);
                t.creationDate = utils.date.formatDateTime(t.creationDate);
                t.context = {
                    styles: "messageWrapper",
                    data: {
                        id: t.id
                    }
                };
                i.push(t)
            }
            return i
        };
        return t
    }(e);
    q.Thread = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }

        function i(e) {
            var t = $(e);
            if (t.is(".nick")) {
                this.showPlayer(t.data("player"));
                return true
            }
            if (t.is(":checkbox")) {
                this.checkboxClicked();
                return true
            }
            return false
        }
        t.prototype.showPlayer = function (t) {
            this.notify("Ce-s(7Ta", t)
        };
        t.prototype.checkboxClicked = function () {
            this.notify("WsUlTV0P")
        };
        t.prototype.clickHandler = function (t) {
            this.bubble(t, i.bind(this), "#forumThread")
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                event: "click",
                target: this,
                selector: "#forumThread",
                callback: this.clickHandler
            });
            return e
        };
        return t
    }(TemplateView);
    q.ThreadButton = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("threadID", -1);
            this.setOptions(e)
        }
        return t
    }(Z);
    H.Controller = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments);
            this.editmode = 0;
            this.discussionDataSource = null;
            this.discussionActive = false;
            this.delayedData = null;
            this.reportsChecked = false;
            this.lastScrollPosition = null
        }
        t.prototype.dataUpdate = function (a, e) {
            if (!e || !e.systemMessages || !e.discussions || this.discussionActive) {
                return
            }
            if (this.editmode) {
                this.delayedData = e;
                return
            }
            this.view.stopEditMode();
            var t = this.view.findSubviewByField("tag", "currentView");
            if (t && t.template !== "mailOverview") {
                this.slideOut()
            }
            t = this.view.findSubviewByField("tag", "currentView");
            if (t && t.template !== "mailOverview") {
                this.slideOut()
            }
            this.view.mailOverview.dataUpdate(a, e);
            this.view.draw();
            var i = this.view.headline.buttons;
            if (i) {
                i.findSubviewByName("back").hide();
                i.findSubviewByName("edit").show()
            }
            if (this.lastScrollPosition && t && t.template === "mailOverview") {
                $("#" + this.view.mainContentContainer.id).scrollTop(this.lastScrollPosition)
            }
            this.notify("q1C7PTZC");
            this.view.deleteButton.hide();
            this._editControlsCounter()
        };
        t.prototype.doDelayedDataUpdate = function () {
            if (!this.delayedData) {
                return
            }
            this.dataUpdate(null, this.delayedData);
            this.delayedData = null
        };
        t.prototype["0scd3paU"] = function () {
            t.__super__["0scd3paU"].apply(this, arguments);
            this.view.deleteButton.hide()
        };
        t.prototype["SZNDbKyD"] = function () {
            var t = this.view.findSubviewByField("tag", "currentView");
            if (this.lastScrollPosition && t && t.template === "mailOverview") {
                $("#" + this.view.mainContentContainer.id).scrollTop(this.lastScrollPosition);
                this.discussionActive = false
            }
        };
        t.prototype["8kvrAa%)"] = function () {
            var t = this.view.findSubviewByField("tag", "currentView");
            if (t && t.drawEndMessage.indexOf("mailDiscussion") > -1) {
                $("#" + this.view.mainContentContainer.id).off("scroll")
            }
        };
        t.prototype["647eh5SF"] = function () {
            if (this.editmode) {
                this.view.stopEditMode()
            } else {
                this.view.startEditMode()
            }
            this.editmode ^= 1;
            if (!this.editmode) {
                this.doDelayedDataUpdate()
            }
        };
        t.prototype["WsUlTV0P"] = function () {
            this._editControlsCounter()
        };
        t.prototype.findMarkedThreads = function () {
            var e = [];
            var i = [];
            var a = [];
            $("#" + this.view.mailOverview.templateData.htmlID + " .systemMessage .checkboxWrapper input:checked").parent().parent().each(function (i, t) {
                e.push($(t).attr("data"))
            });
            $("#" + this.view.mailOverview.templateData.htmlID + " .discussion .checkboxWrapper input:checked").parent().parent().each(function (e, t) {
                i.push($(t).attr("data"))
            });
            for (var t = 0, s = e.length; t < s; t++) {
                a.push(this.view.mailOverview.templateData.systemMessages[e[t]].id)
            }
            for (t = 0, s = i.length; t < s; t++) {
                a.push(this.view.mailOverview.templateData.discussions[i[t]].id)
            }
            return a
        };
        t.prototype["JOR9RLfg"] = function () {
            var e = this.view.findSubviewByField("tag", "currentView");
            var t = [];
            if (e.data && e.data.discussionID) {
                t.push(e.data.discussionID)
            } else {
                t = this.findMarkedThreads()
            }
            var i = function () {
                this.datasource.deleteMailThreads(t);
                this.discussionActive = false;
                this.editmode = 0
            }.bind(this);
            var a = function () {};
            if (t.length !== 0) {
                var s = t.length === 1 ? "Delete thread?" : "Delete the selected messages?";
                utils.dialog.confirm(this, translate(s), translate("Messages"), i, a)
            }
        };
        t.prototype["0I4SJP3-"] = function (t) {
            if (this.view.blockOverlay === true || this.editmode) {
                return
            }
            this.discussionActive = true;
            this.notify("_f3L_ht_", this.view);
            var i = {
                parent: this.view.content,
                rowID: t.rowID,
                closed: t.closed,
                topic: t.topic,
                lastMessageDate: t.lastMessageDate,
                owner: t.owner,
                read: t.read,
                isCondensed: false
            };
            var e = this.showNextViewOfClass(H.Discussion, i);
            if (!this.discussionDataSource) {
                this.discussionDataSource = new H.DiscussionDataSource;
                this.discussionDataSource.addSubscriber(e)
            } else {
                this.discussionDataSource.subscribers[0] = e
            }
            this.discussionDataSource.discussion(t.id, this);
            this.notify("4Ig3uXuO", this);
            if (t.previouslyRead === false) {
                t.previouslyRead = true;
                this.datasource.markThreadRead(t.id);
                this.notify("q1C7PTZC")
            }
            this.editmode = 0;
            this.lastScrollPosition = $("#" + this.view.mainContentContainer.id).scrollTop();
            this.view.deleteButton.show()
        };
        t.prototype["FtYKa&CS"] = function () {
            this.slideIn();
            this.view.showDeleteButton()
        };
        t.prototype["&_s2MhkH"] = function () {
            this.notify("VY71NNds", this.view);
            this.notify("QXTrBvlI", this)
        };
        t.prototype["zv&8(V-q"] = function () {
            this.showNextViewOfClass(_e.NewView, {})
        };
        t.prototype["Ce-s(7Ta"] = function (t) {
            this.notify("CcFE9soE", this, t.author || t.data)
        };
        t.prototype["zg3)w3dR"] = function (t) {
            this.showNextViewOfClass(_e.NewView, {
                messageID: t.threadID,
                showSubject: false,
                clickMessage: "0c5EAAgG"
            })
        };
        t.prototype["0c5EAAgG"] = function (t) {
            if (this.view.findSubviewByField("name", "answerForm").validate().message === true) {
                this.discussionActive = false;
                this.datasource.answerDiscussion(t.threadID, t.content)
            }
        };
        t.prototype["xhjW7E37"] = function () {
            return this.notify("xhjW7E37", this)
        };
        t.prototype.recoverAjaxFailure = function () {
            var t = translate("Internal error.");
            this.notify("VY71NNds", this.view);
            utils.dialog.alert(this, t, t)
        };
        t.prototype["QphXIkP%"] = function () {
            var t = this.discussionActive.members.sort(function (t, e) {
                return t.nick > e.nick ? +1 : -1
            });
            this.showNextViewOfClass(H.MemberList, {
                members: t,
                title: this.discussionActive.title
            })
        };
        t.prototype["CO6NsrgM"] = function () {
            if (!this.reportsChecked) {
                $("#" + this.view.mailOverview.templateData.htmlID + " .checkboxWrapper input").prop("checked", true);
                this.reportsChecked = true
            } else {
                $("#" + this.view.mailOverview.templateData.htmlID + " .checkboxWrapper input").prop("checked", false);
                this.reportsChecked = false
            }
            this._editControlsCounter()
        };
        t.prototype._editControlsCounter = function () {
            var t = $("#" + this.view.mailOverview.templateData.htmlID + " .checkboxWrapper input:checked").length;
            this.view.editControls.updateCounter(t)
        };
        return t
    }(n.Controller);
    H.DataSource = function (a) {
        utils.__extends(e, a);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.setData = function (s) {
            var t = this.notify("T_kKC8gM", this, s);
            var e = t.discussions,
                i = t.systemMessages;

            function a(t, e) {
                if (t.lastEntryDate < e.lastEntryDate) {
                    return +1
                } else {
                    return -1
                }
                return 0
            }
            i.sort(a);
            e.sort(a);
            this.__data = {
                systemMessages: i,
                discussions: e
            };
            this.informControllerUnblock();
            this.publishUpdate()
        };
        e.prototype.refresh = function () {
            i.request("MessageAction/messageTitleArray", {}, this.setData, this)
        };
        e.prototype.deleteMailThreads = function (e) {
            var t, a, s = [],
                n = [];
            for (t = 0; t < e.length; t++) {
                a = parseInt(e[t], 10);
                if (a < 0) {
                    s.push((-1 * a).toString())
                } else {
                    n.push(e[t])
                }
            }
            if (de === "jsonp") {
                var r = utils.array.uri_join(n, Ae),
                    o = {
                        systemMessageIdArray: "(" + s.join(",") + ")"
                    };
                i.chainActionFromArray("MessageAction/releaseFromMessageArray", "discussionIdArray", r, this.setData, this, o)
            } else {
                i.request("MessageAction/releaseFromMessageArray", {
                    discussionIdArray: "(" + n.join(",") + ")",
                    systemMessageIdArray: "(" + s.join(",") + ")"
                }, this.setData, this)
            }
        };
        e.prototype.answerDiscussion = function (t, e) {
            i.request("DiscussionAction/addDiscussionEntry", {
                discussionId: t,
                content: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.modelUpdate = function () {
            if (t.unreadDiscussionCount > 0) {
                this.refresh()
            }
            this.informControllerUnblock();
            this.publishUpdate()
        };
        e.prototype.updateDiscussion = function (e) {
            if (!e || !this.__data || !this.__data.discussions) {
                return
            }
            for (var t = 0, i = this.__data.discussions.length; t < i; t++) {
                var a = this.__data.discussions[t];
                if (a.id === e.id) {
                    this.__data.discussions[t] = e
                }
            }
        };
        e.prototype.markThreadRead = function (e) {
            var t;
            for (t = 0; t < this.__data.discussions.length; t++) {
                if (this.__data.discussions[t].id === e) {
                    this.__data.discussions[t].previouslyRead = true
                }
            }
            for (t = 0; t < this.__data.systemMessages.length; t++) {
                if (this.__data.systemMessages[t].id === e) {
                    this.__data.systemMessages[t].previouslyRead = true
                }
            }
        };
        return e
    }(m);
    H.DiscussionDataSource = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.setData = function (t) {
            var e = t.discussion.discussionEntryArray;
            e.sort(function (t, e) {
                if (t.creationDate < e.creationDate) {
                    return -1
                } else {
                    return +1
                }
            });
            this.__data = {
                discussionID: t.discussion.id,
                members: t.discussion.discussionMemberArray,
                listeners: t.discussion.discussionListenerArray,
                entries: e,
                title: t.discussion.title
            };
            this.informControllerUnblock();
            this.publishUpdate()
        };
        t.prototype.discussion = function (e, t) {
            i.request("DiscussionAction/discussion", {
                discussionId: e
            }, this.setData, this, 62e3, utils.bind(t.recoverAjaxFailure, t))
        };
        return t
    }(m);
    H.Overview = function (i) {
        utils.__extends(t, i);
        var e = 37;

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e);
            this.templateData = {
                htmlID: this.id
            }
        }
        t.prototype.dataUpdate = function (r, t) {
            var i = function (a) {
                for (var i = 0, s = a.length; i < s; i++) {
                    var t = a[i];
                    var n = t.previouslyRead === true ? "messageRead" : "messageUnread";
                    t.icon = this.getImageSrc(n, "icons");
                    t.timestamp = utils.date.formatDateTime(t.lastEntryDate);
                    if (t.title.length > e) {
                        t.title = t.title.substr(0, e) + "..."
                    }
                    t.frameParams = {
                        styles: "clickable reportRow",
                        data: i
                    }
                }
                return a
            }.bind(this);
            var a = false,
                s = !t.systemMessages || !t.systemMessages.length,
                n = !t.discussions || !t.discussions.length;
            if (s && n) {
                a = true
            }
            this.templateData = {
                systemMessages: i(t.systemMessages),
                discussions: i(t.discussions),
                htmlID: this.id,
                noMessages: a
            };
            this.create()
        };
        t.prototype.rowClickHandler = function (a) {
            var e = $(a.currentTarget);
            var i = e.attr("data");
            if (!i) {
                return
            }
            var s = e.hasClass("systemMessage") ? this.templateData.systemMessages : this.templateData.discussions;
            var t = s[i];
            this.notify("0I4SJP3-", t);
            t.previouslyRead = true;
            t.icon = this.getImageSrc("messageRead", "icons");
            e.find(".icon img").attr("src", t.icon)
        };
        t.prototype.checkBoxHandler = function (t) {
            t.stopPropagation();
            this.notify("WsUlTV0P", this)
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            var i = function (t, a, i) {
                i = i || "click";
                t = "#" + this.templateData.htmlID + " " + t;
                e.push({
                    selector: t,
                    event: i,
                    callback: a,
                    target: this
                })
            }.bind(this);
            i(".reportRow", this.rowClickHandler);
            i(".checkboxWrapper input", this.checkBoxHandler);
            return e
        };
        t.prototype.show = function () {
            $("#" + this.templateData.htmlID).show()
        };
        t.prototype.hide = function () {
            $("#" + this.templateData.htmlID).hide()
        };
        t.prototype.startEditMode = function () {
            $("#" + this.templateData.htmlID + " .checkboxWrapper").show()
        };
        t.prototype.stopEditMode = function () {
            $("#" + this.templateData.htmlID + " .checkboxWrapper").hide()
        };
        return t
    }(TemplateView);
    H.DiscussionDetail = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }

        function i(e) {
            var t = $(e);
            if (t.is(".title.clickable")) {
                this.showPlayer(t);
                return true
            }
            if (t.is(".discussionMemberList")) {
                this.showMembers();
                return true
            }
            return false
        }
        t.prototype.showPlayer = function (t) {
            var e = t.parents(".content-frame").data("author");
            this.notify("Ce-s(7Ta", {
                author: {
                    id: e
                }
            })
        };
        t.prototype.showMembers = function () {
            this.notify("QphXIkP%")
        };
        t.prototype.clickHandler = function (t) {
            this.bubble(t, i.bind(this), "discussionWrapper")
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                event: "click",
                selector: "#discussionWrapper",
                callback: this.clickHandler,
                target: this
            });
            return e
        };
        return t
    }(TemplateView);
    H.Discussion = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (e, t) {
            this.data = this._prepareData(t);
            this.controller.discussionActive = this.data;
            this.deleteAllSubviews();
            this._createTemplate();
            this.discussion.draw();
            if (this.answerForm) {
                this.answerForm.draw()
            }
            this.notify("&_s2MhkH", this)
        };
        t.prototype._createTemplate = function () {
            this.discussion = this.createSubview(this, {
                attachTo: this,
                template: "mailDiscussion",
                templateData: this.data
            }, H.DiscussionDetail);
            if (!this.data.systemMessage) {
                this.answerForm = this.createSubview(this, {
                    attachTo: this,
                    name: "answerForm",
                    useContainer: true,
                    templateData: s(this.data)
                }, H.AnswerForm)
            }
        };
        t.prototype._prepareData = function (t) {
            var e = this.notify("1edS3jXy", this, {
                imageName: "buttonPlayer",
                imageCategory: "icons"
            });
            t.subscriberContext = {
                styles: "discussionMemberList clickable"
            };
            t.totalMembers = t.members ? t.members.length : 0;
            t.entries = i(t, e);
            t.systemMessage = t.discussionID < 0;
            return t
        };

        function i(t, r) {
            var s = [];
            for (var e = 0, o = t.entries.length; e < o; e++) {
                var n = t.entries[e],
                    i = a(n, t.members);
                s.push({
                    author: i,
                    message: n.content,
                    entryContext: {
                        data: {
                            author: i.id
                        }
                    },
                    header: {
                        title: utils.dynamicTitle(utils.sanitize(i.nick), 29),
                        icon: r,
                        clickable: true
                    }
                })
            }
            return s
        }

        function a(a, t) {
            if (!t) {
                return false
            }
            for (var e = 0, s = t.length; e < s; e++) {
                var i = t[e];
                if (i.id === a.playerId) {
                    return i
                }
            }
            return false
        }

        function s(t) {
            return {
                messageMaxLength: 1e3,
                id: t.discussionID
            }
        }
        return t
    }(e);
    H.MemberList = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("title", "");
            this.addOption("members", []);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.memberList = this.createSubview(this, {
                attachTo: this,
                template: "mailMemberList",
                templateData: this._prepareData()
            }, H.MemberListDetail);
            this.memberList.draw()
        };
        t.prototype._prepareData = function () {
            var i = [];
            for (var e = 0, a = this.members.length; e < a; e++) {
                var t = this.members[e];
                t.context = {
                    styles: "clickable tablerow mailMemberItem",
                    data: {
                        author: t.id
                    }
                };
                t.permissionIcon = r.MemberRow.prototype.permissionImageFor.apply(this, [t.alliancePermission]);
                i.push(t)
            }
            return {
                title: this.title,
                members: i
            }
        };
        return t
    }(e);
    H.MemberListDetail = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }

        function i(e) {
            var t = $(e);
            if (t.is(".content-frame")) {
                this.showPlayer(t.data("author"));
                return true
            }
            return false
        }
        t.prototype.showPlayer = function (t) {
            this.notify("Ce-s(7Ta", {
                author: {
                    id: t
                }
            })
        };
        t.prototype.clickHandler = function (t) {
            this.bubble(t, i.bind(this), "mailMemberList")
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                event: "click",
                selector: "#mailMemberList",
                callback: this.clickHandler,
                target: this
            });
            return e
        };
        return t
    }(TemplateView);
    H.Window = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e);
            this.create()
        }
        t.prototype.create = function () {
            this.editModeButton = this.createSubview(this.headline.buttons, {
                graphic: "headlineButton_edit",
                hover: translate("Edit"),
                clickMessage: "647eh5SF",
                name: "edit"
            }, Z);
            this.deleteButton = this.createSubview(this.headline.buttons, {
                graphic: "headlineButton_eraseThread",
                hover: translate("Delete"),
                clickMessage: "JOR9RLfg",
                name: "delete",
                hidden: true
            }, Z);
            this.editControls = this.createSubview(this.mainContentContainer.parent, {
                cmDelete: "JOR9RLfg",
                deleteText: "Delete messages (%@)"
            }, Ve);
            this.mailOverview = this.createSubview(this.content, {
                name: "mailTable",
                tag: "currentView",
                template: "mailOverview"
            }, H.Overview)
        };
        t.prototype.hideTabBar = function () {};
        t.prototype.showTabBar = function () {};
        t.prototype.startEditMode = function () {
            this.content.addClass("editmode");
            this.editModeButton.changeImage("headlineButton_Back");
            this.editControls.show()
        };
        t.prototype.stopEditMode = function () {
            this.content.removeClass("editmode");
            this.editModeButton.changeImage("headlineButton_Edit");
            this.editControls.hide()
        };
        return t
    }(n.Window);
    _e.View = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("group", "Message", true);
            this.addOption("author", "");
            this.addOption("creationDate", "");
            this.addOption("messageID", -1);
            this.addOption("moderator", false);
            this.setOptions(e);
            this.styles += " messageWrapper";
            this.marked = false
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            var e;
            if (this.author) {
                e = this.createSubview(this, {
                    styles: "content-header with-icon"
                });
                this.createSubview(e, {
                    content: utils.dynamicTitle(this.author.nick, 29),
                    styles: "title clickable",
                    name: "author_" + this.author.id,
                    author: this.author,
                    showIcon: true
                }, Mi);
                this.createSubview(e, {
                    content: this.creationDate,
                    styles: "timestamp detail"
                })
            } else {
                e = this.createSubview(this, {
                    styles: "content-header systemMessage"
                });
                this.createSubview(e, {
                    content: this.creationDate,
                    styles: "timestamp"
                })
            }
            e.clearfix();
            if (this.parent.closed === false && this.parent.moderator === true) {
                this.marked = false;
                this.checkbox = this.createSubview(this, {
                    styles: "markMessageCheckbox",
                    content: "<input type='checkbox' />",
                    clickMessage: "vo4CGZD1",
                    hidden: !this.moderator
                })
            }
            var i = this.content.replace(/\u00a0/gi, " ");
            i = utils.sanitize(i);
            this.createSubview(this, {
                content: i.replace(/\n/g, "<br>"),
                styles: "message",
                handleLinks: true
            });
            this.content = ""
        };
        t.prototype.check = function () {
            if (!this.checkbox) {
                return
            }
            this.checkbox.node().find(":checkbox").attr("checked", true);
            this.marked = true
        };
        t.prototype.uncheck = function () {
            if (!this.checkbox) {
                return
            }
            this.checkbox.node().find(":checkbox").attr("checked", false);
            this.marked = false
        };
        t.prototype.isChecked = function () {
            return this.marked
        };
        return t
    }(w);
    _e.NewView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("name", "NewMessage");
            this.addOption("viewName", "newMessage");
            this.addOption("receiver", null);
            this.addOption("receivingPlayerArray", "");
            this.addOption("messageID", -1);
            this.addOption("buttonText", translate("Send"));
            this.addOption("showSubject", true);
            this.setOptions(e);
            this.elementClickMessage = this.clickMessage;
            this.propagateClicks = false;
            this.clickMessage = null
        }
        t.prototype.dataUpdate = function () {};
        t.prototype.create = function () {
            this.container = this.createContainer();
            if (this.receiver !== null) {
                this.createSubview(this.container, {
                    name: "receiver",
                    content: translate("Receiver") + ":" + this.receiver.nick
                })
            }
            if (this.showSubject === true) {
                this.subject = this.createSubview(this.container, {
                    name: "subject",
                    maxLength: 100,
                    caption: "Subject"
                }, O.Input)
            }
            this.message = this.createSubview(this.container, {
                name: "message",
                maxLength: 1e3,
                inputType: "text"
            }, O.Input);
            this.createSubview(this.container, {
                name: "submit",
                content: this.buttonText,
                clickMessage: this.elementClickMessage
            }, l);
            this.createSubview(this.container, {
                name: "paste",
                content: translate("paste_link"),
                clickMessage: "xhjW7E37"
            }, l);
            this.errorContainer = this.createSubview(this.container, {
                name: "errorContainer",
                styles: "warning"
            })
        };
        t.prototype.getSubject = function () {
            if (this.findSubviewByName("subject") === null) {
                return "Subject"
            }
            return this.findSubviewByName("subject").getValue()
        };
        t.prototype.getMessage = function () {
            return this.findSubviewByName("message").getValue()
        };
        t.prototype.validate = function () {
            var a = this.findSubviewByName("message"),
                t = this.findSubviewByName("subject"),
                i = a.validate(),
                e;
            if (i && t !== null) {
                e = t.validate()
            } else {
                e = true
            }
            this.errorContainer.setContent("");
            if (t !== null && !e) {
                this.setErrors(t.validationMessages)
            }
            if (!i) {
                this.setErrors(a.validationMessages)
            }
            this.errorContainer.draw();
            return i && e
        };
        t.prototype.setErrors = function (t) {
            var e = this.errorContainer.content;
            for (var i in t) {
                var a = t[i];
                e += "<p class='error'>" + a + "</p>"
            }
            this.errorContainer.setContent(e)
        };
        t.prototype.paste = function (t) {
            this.message.addContent(t)
        };
        return t
    }(e);
    H.AnswerForm = function (a) {
        utils.__extends(t, a);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("template", "mailNewMessageForm", true);
            this.addOption("replyMessage", "0c5EAAgG");
            this.setOptions(e)
        }
        var e = "warning";

        function s(e) {
            var t = $(e);
            if (t.is(".reply")) {
                this.reply(t);
                return true
            }
            if (t.is(".paste")) {
                this.paste(t);
                return true
            }
            return false
        }
        t.prototype._getSections = function () {
            var t = $("#newAnswer"),
                e = t.find("textarea"),
                i = t.find("input[type=text]");
            return {
                $wrapper: t,
                $textarea: e,
                $subject: i,
                data: t.data()
            }
        };
        t.prototype.reply = function () {
            var t = this._getSections();
            this.notify(this.replyMessage, {
                threadID: t.data.discussion,
                content: t.$textarea.val()
            })
        };
        t.prototype.paste = function () {
            var t = this._getSections(),
                e = t.$textarea.val(),
                i = this.notify("xhjW7E37");
            t.$textarea.val(e + i);
            this.updateLimit({
                target: t.$textarea[0]
            })
        };
        t.prototype.clickHandler = function (t) {
            this.bubble(t, s.bind(this), "newAnswer")
        };
        t.prototype.updateLimit = function (r) {
            var o = $(r.target),
                a = this._getSections(),
                t, i, n, s;
            i = o[0].tagName === "TEXTAREA" ? "message" : "subject";
            t = a.$wrapper.find(".limit." + i);
            if (i === "subject") {
                s = a.$subject.val().length
            } else {
                s = a.$textarea.val().length
            }
            t.find(".current").html(s);
            n = this.validate();
            if (n[i] === true) {
                t.removeClass(e)
            } else {
                t.addClass(e)
            }
        };
        t.prototype.getInput = function () {
            var t = this._getSections();
            return {
                subject: t.$subject.val(),
                message: t.$textarea.val()
            }
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                event: "click",
                selector: "#newAnswer",
                callback: this.clickHandler,
                target: this
            });
            e.push({
                event: "keyup",
                selector: "input",
                callback: this.updateLimit,
                target: this
            });
            e.push({
                event: "keyup",
                selector: "textarea",
                callback: this.updateLimit,
                target: this
            });
            return e
        };
        t.prototype.validate = function () {
            var a = this._getSections(),
                t = this.templateData,
                e = {
                    subject: false,
                    message: false
                };
            if (t.subject) {
                e.subject = i(a.$subject.val(), t.subjectMaxLength)
            }
            e.message = i(a.$textarea.val(), t.messageMaxLength);
            return e
        };

        function i(e, t) {
            if (t && e.length > t) {
                return false
            }
            return true
        }
        return t
    }(TemplateView);
    p.Controller = function (i) {
        utils.__extends(e, i);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.selectedTableForDisplay = "arrayAll";
            this.initialDataUpdate = true;
            this.currentReportID = null;
            this.reportsChecked = false
        }
        e.prototype.dataUpdate = function (s, e) {
            var i, n, a;
            if (e === null) {
                return
            }
            if (this.view.hidden === false) {
                t.unreadReportCount = 0
            }
            this.data = e;
            if (this.initialDataUpdate === true) {
                this.initialDataUpdate = false;
                var r = this.view.tabbar;
                r.dataUpdate(s, e);
                this.view.reportTable.dataUpdate(s, e.reportsView[this.selectedTableForDisplay]);
                this.view.reportTable.draw()
            } else {
                i = this.view.findSubviewByField("tag", "currentView");
                if (i.name === "ReportDetails") {
                    for (a = 0; a < e.reports.length; a++) {
                        if (i.data.threadID === e.reports[a].threadID) {
                            n = e.reports[a];
                            i.dataUpdate(s, this._prepareData(n));
                            i.draw();
                            break
                        }
                    }
                } else {
                    this.view.reportTable.dataUpdate(s, e.reportsView[this.selectedTableForDisplay]);
                    this.view.reportTable.draw()
                }
            }
            this._editControlsCounter()
        };
        e.prototype["0scd3paU"] = function () {
            e.__super__["0scd3paU"].apply(this, arguments);
            if (this.view.settingsActive) {
                this.view.hideSettings()
            }
        };
        e.prototype["33gYIOnu"] = function () {
            if (this.editmode) {
                this.view.stopEditMode()
            } else {
                this.view.startEditMode()
            }
            this.editmode ^= 1
        };
        e.prototype["926w(&JQ"] = function () {
            var t = this.data.reportsView[this.selectedTableForDisplay];
            var i = [];
            if (!t) {
                return
            }
            for (var e = 0; e < t.length; e++) {
                i.push(t[e].threadID)
            }
            utils.dialog.confirm(this, translate("Delete reports?"), translate("Reports"), function () {
                this.datasource.deleteReportCategory(i)
            }.bind(this), function () {})
        };
        e.prototype["Q(7d5rkH"] = function (t) {
            this.notify("handleHabitatAction", t.data, "centerCastle")
        };
        e.prototype["i2UykS-N"] = function () {
            utils.dialog.confirm(this, translate("Really delete selection?"), translate("Reports"), function () {
                this.datasource.deleteReport(this.currentReportID);
                this.initialDataUpdate = true;
                this.slideOut()
            }.bind(this), function () {})
        };
        e.prototype["MS1VHGhp"] = function (t) {
            this.notify("createHabitatWindow", t.data)
        };
        e.prototype["SZNDbKyD"] = function () {
            this.view.hideSettings();
            this.view.deleteSingleReportButton.hide();
            if (this.lastListPosition) {
                $("#" + this.view.mainContentContainer.id).scrollTop(this.lastListPosition)
            }
        };
        e.prototype._prepareData = function (t) {
            var e = {
                date: t.date,
                destinationETA: t.destinationETA,
                destinationHabitat: t.destinationHabitat,
                habitat: t.habitat,
                threadID: t.threadID,
                internalCategory: t.internalCategory,
                knowledge: t.knowledge,
                mission: t.mission,
                published: t.published,
                resources: t.resources,
                sourceHabitat: t.sourceHabitat,
                transitType: t.transitType,
                type: t.type,
                units: t.units,
                unitsLoss: t.unitsLoss,
                successful: t.successful,
                battlePartyDictionary: t.battlePartyDictionary,
                battleType: t.battleType,
                defenderUnitDictionary: t.defenderUnitDictionary,
                buildings: t.buildings,
                copperAmount: t.copperAmount,
                impactDate: t.impactDate,
                silverAmount: t.silverAmount,
                foreignReport: t.foreignReport
            };
            if (t.foreignReport !== true) {
                e.paginationInfo = this._getPaginationInfo(t.threadID)
            }
            var i = this["SiPbxnVc"](e);
            e.reportInfo = i;
            e.header = {
                title: translate(t.headline),
                icon: i.icon,
                detail: p.DataParsers.formatHeadlineDate(t.date)
            };
            e.habitat.icon = this.notify("1edS3jXy", this, {
                imageName: "centerHabitat",
                imageCategory: "icons"
            });
            e = p.DataParsers.modifyDataSourceDest(e, i);
            e = p.DataParsers.modifyDataBuildings(e);
            e = p.DataParsers.modifyDataResources(e);
            e = p.DataParsers.modifyDataUnits(e);
            e = p.DataParsers.modifyDataUnitsLoss(e);
            e = p.DataParsers.modifyDataUnitParties(e, "battlePartyDictionary");
            e = p.DataParsers.modifyDataUnitParties(e, "defenderUnitDictionary");
            e = p.DataParsers.modifyDataSilver(e);
            e = p.DataParsers.modifyDataKnowledge(e, this);
            if (e.type === 11) {
                e.facebook = p.DataParsers.facebookData(this)
            }
            return e
        };
        e.prototype["0I4SJP3-"] = function (t, e) {
            if (this.editmode) {
                return
            }
            e = typeof e === "undefined" ? true : e;
            this.lastListPosition = $("#" + this.view.mainContentContainer.id).scrollTop();
            if (t.date) {
                var i = _.storeLocal.createKey("rlr"),
                    a = _.storeLocal.getItem(i);
                if (!a || Date.parse(a) < t.date) {
                    _.storeLocal.setItem(i, t.date.toString())
                }
            }
            this.showNextViewOfClass(p.View, {
                data: this._prepareData(t),
                styles: "report"
            }, e);
            this.currentReportID = t.threadID;
            this.view.deleteSingleReportButton.setOptions({
                data: this.currentReportID
            });
            this.view.deleteSingleReportButton.show()
        };
        e.prototype["bJyUTr0u"] = function (a) {
            var s = a.direction,
                t = this.paginationCurrentIndex,
                e = this.view.findSubviewByField("tag", "currentView"),
                i;
            if (s === "next") {
                t += 1
            } else {
                t -= 1
            }
            t -= 1;
            i = this.data.reportsView[this.selectedTableForDisplay][t];
            e.dataUpdate(this.datasource, this._prepareData(i));
            e.draw()
        };
        e.prototype._getPaginationInfo = function (s) {
            var t = {};
            var a = this.data.reportsView[this.selectedTableForDisplay];
            var e;
            for (var i = 0, n = a.length; i < n; i++) {
                if (a[i].threadID === s) {
                    e = i + 1;
                    break
                }
            }
            t.total = a.length;
            t.current = e;
            t.isStart = e <= 1;
            t.isEnd = e === t.total;
            this.paginationCurrentIndex = e;
            return t
        };
        e.prototype["SiPbxnVc"] = function (e) {
            var t = this.reportIconName(e);
            return {
                icon: t.icon,
                headline: t.headline,
                description: t.description,
                type: e.type
            }
        };
        e.prototype["8Z&9z-U-"] = function (t) {
            this["0scd3paU"]();
            this.selectedTableForDisplay = t.arrayName;
            var e = this.view.findSubviewByName("reportstable");
            this.view.hideSettings();
            e.dataUpdate(null, this.data.reportsView[this.selectedTableForDisplay]);
            this.view.reportTable.draw();
            if (this.editmode) {
                this.view.reportTable.startEditMode();
                this._editControlsCounter()
            }
        };
        e.prototype.reportIconName = function (t) {
            var n = "",
                s = "",
                e = "";
            var i = this.notify("7v%5T22p", this);
            if (t.type === f.ATTACK_WARNING) {
                e = translate("%@ sent an attack to %@.", t.sourceHabitat.name, t.habitat.name);
                return {
                    icon: i.getImageSrc("AttackWarning", "reportIcons"),
                    headline: translate("Attack from %@", t.sourceHabitat.name),
                    description: e
                }
            }
            if (t.type === f.MISSION_FINISHED) {
                e = translate("Mission %@ accomplished", translate(t.mission.identifier));
                return {
                    icon: i.getImageSrc(t.mission.identifier, "missions"),
                    headline: translate(t.mission.identifier),
                    description: e
                }
            }
            if (t.type === f.KNOWLEDGE_RESEARCHED) {
                e = translate("Research of %@ finished.", translate(t.knowledge.identifier));
                return {
                    icon: i.getImageSrc(t.knowledge.identifier, "knowledges"),
                    headline: translate(t.knowledge.identifier),
                    description: e
                }
            }
            if (t.type === f.TRANSIT_RETURNED) {
                if (t.transitType === v.TRANSIT_TRANSPORT) {
                    if (t.resources && t.resources[a.SILVER] !== 0) {
                        e = translate("A transit from a Market arrived at %@.", t.destinationHabitat.name)
                    } else {
                        e = translate("A transport delivering resources to %@ returned to %@.", t.sourceHabitat.name, t.destinationHabitat.name)
                    }
                    return {
                        icon: i.getImageSrc("TransitTransportReturn", "reportIcons"),
                        headline: translate("Transit Report"),
                        description: e
                    }
                } else {
                    if (t.transitType === v.TRANSIT_DEFENSE) {
                        e = translate("Troops defending %@ returned to %@.", t.sourceHabitat.name, t.destinationHabitat.name);
                        return {
                            icon: i.getImageSrc("TransitDefenseReturn", "reportIcons"),
                            headline: translate("Transit Report"),
                            description: e
                        }
                    } else {
                        e = translate("Troops attacking %@ returned to %@.", t.sourceHabitat.name, t.destinationHabitat.name);
                        return {
                            icon: i.getImageSrc("TransitAttackReturn", "reportIcons"),
                            headline: translate("Transit Report"),
                            description: e
                        }
                    }
                }
            }
            if (t.type === f.SPY_FINISHED) {
                if (t.successful === true) {
                    e = translate("Your spy returned with valuable information from %@.", t.destinationHabitat.name);
                    return {
                        icon: i.getImageSrc("TransitSpyReturn", "reportIcons"),
                        headline: translate("Spy in %@", t.destinationHabitat.name),
                        description: e
                    }
                } else {
                    e = translate("Your spy was captured at %@.", t.destinationHabitat.name);
                    return {
                        icon: i.getImageSrc("SpyCaptured", "reportIcons"),
                        headline: translate("Spy in %@", t.destinationHabitat.name),
                        description: e
                    }
                }
            }
            if (t.type === f.BATTLE_ROUND_FINISHED) {
                if (t.internalCategory === C.EXTERNAL_UNITS_TO_DEFENSE) {
                    n = i.getImageSrc("DefenseReport", "reportIcons")
                } else {
                    n = i.getImageSrc("TransitAttack", "reportIcons")
                }
                e = translate("A battle was fought at %@.", t.destinationHabitat.name);
                if (utils.dict.size(t.unitsLoss) === 0) {
                    s = Xe.GREEN
                } else if (utils.dict.size(t.units) === 0) {
                    s = Xe.YELLOW
                } else if (utils.dict.size(t.unitsLoss) > 0) {
                    s = Xe.RED
                }
                return {
                    icon: n,
                    headline: translate("Battle in %@", t.destinationHabitat.name),
                    color: s,
                    description: e
                }
            }
            if (t.type === f.LOST_FOREIGN_DEFENDER) {
                e = translate("Lost defenders from %@", t.destinationHabitat.name);
                return {
                    icon: i.getImageSrc("ForeignDefenseReport", "reportIcons"),
                    headline: translate("Lost foreign defenders"),
                    description: e
                }
            }
            if (t.type === f.CONQUEST_FAILED) {
                e = translate("Failed to conquer %@", t.destinationHabitat.name);
                return {
                    icon: i.getImageSrc("TransitAttack", "reportIcons"),
                    headline: translate("Failed to conquer %@", t.destinationHabitat.name),
                    description: e
                }
            }
            if (t.type === f.CONQUEST) {
                e = translate("%@ was conquered.", t.destinationHabitat.name);
                return {
                    icon: i.getImageSrc("TransitAttack", "reportIcons"),
                    headline: translate("Conquered %@", t.destinationHabitat.name),
                    description: e
                }
            }
            if (t.type === f.SPY_CAPTURED) {
                e = translate("A spy from %@ was captured at %@.", t.sourceHabitat.name, t.habitat.name);
                return {
                    icon: i.getImageSrc("SpyCaptured", "reportIcons"),
                    headline: translate("Spy captured report"),
                    description: e
                }
            }
            if (t.type === f.DELIVERED_RESOURCES) {
                e = translate("A transport from %@ arrived at %@.", t.sourceHabitat.name, t.destinationHabitat.name);
                return {
                    icon: i.getImageSrc("TransitTransport", "reportIcons"),
                    headline: translate("Transit Report"),
                    description: e
                }
            }
            if (t.type === f.DELIVERED_DEFENSE) {
                e = translate("Defenders from %@ arrived at %@.", t.sourceHabitat.name, t.destinationHabitat.name);
                return {
                    icon: i.getImageSrc("TransitTransport", "reportIcons"),
                    headline: translate("Transit Report"),
                    description: e
                }
            }
        };
        e.prototype["BCBzPhu3"] = function () {
            this.view.showSettings()
        };
        e.prototype["pN&OEnG("] = function (a) {
            var e = a.parent;
            var i = 0;
            for (var t = 0; t < e.settings.length; t++) {
                if (e.settings[t].isChecked() === true) {
                    i = i + Math.pow(2, e.settings[t].data.reportType)
                }
            }
            this.datasource.changeReportSetup(i)
        };
        e.prototype["aqtvYr4w"] = function (t) {
            var e = t.published;
            this.datasource.togglePublishReport(t.id, e)
        };
        e.prototype["-pVBP1K_"] = function (t) {
            var e = this.notify("TYxiXgsZ", this, t);
            this.notify("J0N%It)p", this, e);
            _.blinkButton($("#" + this.view.id + " .button.copy"))
        };
        e.prototype["%H(aWJB5"] = function (t) {
            this.notify("%H(aWJB5", t)
        };
        e.prototype["yvRNuVNY"] = function () {
            this._editControlsCounter()
        };
        e.prototype["CO6NsrgM"] = function () {
            if (!this.reportsChecked) {
                $("#" + this.view.reportTable.templateData.htmlID + " .markTableEntryCheckbox input").prop("checked", true);
                this.reportsChecked = true
            } else {
                $("#" + this.view.reportTable.templateData.htmlID + " .markTableEntryCheckbox input").prop("checked", false);
                this.reportsChecked = false
            }
            this._editControlsCounter()
        };
        e.prototype._editControlsCounter = function () {
            var t = $("#" + this.view.reportTable.templateData.htmlID + " .markTableEntryCheckbox input:checked").length;
            this.view.editControls.updateCounter(t)
        };
        e.prototype["S5dD%5UP"] = function (a) {
            var e = [];
            if ( !! ~a.styleArray.indexOf("disabled")) {
                return false
            }
            var i = $("#" + this.view.reportTable.templateData.htmlID + " .markTableEntryCheckbox input:checked");
            for (var t = 0, s = i.length; t < s; t++) {
                var n = $(i[t]).parent().parent().attr("data");
                var r = this.view.reportTable.reports[n];
                e.push(r.threadID)
            }
            utils.dialog.confirm(this, translate("Delete the selected reports?"), translate("Reports"), function () {
                this.datasource.deleteReportCategory(e);
                this["33gYIOnu"]()
            }.bind(this), function () {})
        };
        return e
    }(n.Controller);
    (function () {
        p.DataParsers = {
            formatHeadlineDate: e,
            unitHeadline: h,
            modeliseResources: i,
            formatBuildings: n,
            formatUnits: r,
            modifyDataSourceDest: l,
            modifyDataBuildings: u,
            modifyDataResources: t,
            modifyDataUnits: d,
            modifyDataUnitsLoss: m,
            modifyDataUnitParties: g,
            modifyDataSilver: b,
            modifyDataKnowledge: w,
            facebookData: S
        };

        function e(t) {
            var e = t.getDate() < 10 ? "0" + t.getDate() : t.getDate();
            var i = t.getMonth() + 1 < 10 ? "0" + (t.getMonth() + 1) : t.getMonth() + 1;
            var a = t.getFullYear();
            var s = t.getHours() < 10 ? "0" + t.getHours() : t.getHours();
            var n = t.getMinutes() < 10 ? "0" + t.getMinutes() : t.getMinutes();
            return "<span class='date'>" + e + "." + i + "." + a + "</span> <span class='time'>" + s + ":" + n + "</span>"
        }

        function h(t) {
            var e = translate("Returned units");
            if (t.battleType === 0) {
                var i = t.destinationHabitat ? t.destinationHabitat.name : t.habitat.name;
                e = translate("%@ - battle survivors", i)
            } else if (t.battleType === 2 || t.battleType === 1) {
                e = translate("%@ - battle survivors", t.habitat.name)
            } else if (t.type === v.TRANSIT_SPY) {
                e = translate("Spied Units")
            } else if (t.type === f.LOST_FOREIGN_DEFENDER) {
                e = translate("Deserted units")
            }
            return e
        }

        function i(t) {
            var e = [];
            for (var i in t) {
                var a = t[i],
                    n = new s.HabitatResource({
                        amount: a,
                        resourceId: i
                    });
                e.push(n)
            }
            return e
        }

        function n(i) {
            var a = [];
            for (var t in i) {
                var s = i[t],
                    e = c[t];
                a.push({
                    primaryKey: t,
                    level: s,
                    identifier: e.identifier,
                    iconName: e.identifier.split("/")[0],
                    order: e.order
                })
            }
            return _.sortByOrder(a)
        }

        function r(t) {
            if (!t) {
                return null
            }
            var a = [];
            for (var e in t) {
                var s = t[e],
                    i = y[e].clone();
                i.unitID = e;
                i.amount = s;
                a.push(i)
            }
            return _.sortByOrder(a)
        }

        function l(t, e) {
            if (t.sourceHabitat) {
                t.sourceHabitat.icon = e.icon;
                if (t.sourceHabitat.name === t.habitat.name) {
                    delete t.sourceHabitat
                }
            }
            if (t.destinationHabitat) {
                t.destinationHabitat.icon = e.icon;
                if (t.destinationHabitat.name === t.habitat.name) {
                    delete t.destinationHabitat
                }
            }
            return t
        }

        function u(t) {
            if (!t.buildings) {
                return t
            }
            t.buildingHeader = {
                title: translate("Spied Buildings")
            };
            t.buildings = p.DataParsers.formatBuildings(t.buildings);
            return t
        }

        function t(t) {
            if (!t.resources || !utils.dict.size(t.resources)) {
                return t
            }
            var e;
            if (t.type === v.TRANSIT_SPY) {
                e = translate("Spied Resources")
            } else {
                e = translate("Carried resources")
            }
            t.resourceHeader = {
                title: e
            };
            t.resources = {
                habitatResources: p.DataParsers.modeliseResources(t.resources)
            };
            return t
        }

        function d(t) {
            if (!t.units || !utils.dict.size(t.units)) {
                t.units = null;
                return t
            }
            t.units = {
                header: {
                    title: p.DataParsers.unitHeadline(t)
                },
                habitatUnits: p.DataParsers.formatUnits(t.units)
            };
            return t
        }

        function m(t) {
            if (!t.unitsLoss || !utils.dict.size(t.unitsLoss)) {
                t.unitsLoss = null;
                return t
            }
            var e;
            if (t.sourceHabitat && t.sourceHabitat.name) {
                e = translate("%@ - battle losses", t.sourceHabitat.name)
            } else {
                e = translate("%@ - battle losses", t.habitat.name)
            }
            t.unitsLoss = {
                header: {
                    title: e
                },
                habitatUnits: p.DataParsers.formatUnits(t.unitsLoss)
            };
            return t
        }

        function g(t, e) {
            if (!t[e]) {
                return t
            }
            var u = {
                parties: []
            }, n = false;
            for (var h in t[e]) {
                var a = t[e][h],
                    r = a.habitatDictionary.name,
                    o = a.unitDictionary,
                    l = a.lossDictionary,
                    c = utils.dict.size(o),
                    d = utils.dict.size(l),
                    i = {}, s;
                if (!r) {
                    continue
                }
                if (e === "battlePartyDictionary") {
                    if (a.battleType === 1) {
                        s = "Defending troops"
                    } else {
                        s = "Offending troops"
                    }
                    i.partyTitle = translate(s)
                }
                if (c > 0) {
                    n = true;
                    i.survivors = {
                        header: {
                            title: translate("%@ - battle survivors", r)
                        },
                        habitatUnits: p.DataParsers.formatUnits(o)
                    }
                }
                if (d > 0) {
                    n = true;
                    i.losses = {
                        header: {
                            title: translate("%@ - battle losses", r)
                        },
                        habitatUnits: p.DataParsers.formatUnits(l)
                    }
                }
                u.parties.push(i)
            }
            t[e] = n ? u : null;
            return t
        }

        function b(t) {
            if (!t.silverAmount) {
                return t
            }
            var e = {};
            e[a.SILVER] = t.silverAmount;
            t.silverHeader = {
                title: translate("Silver")
            };
            t.silverAmount = {
                habitatResources: p.DataParsers.modeliseResources(e)
            };
            return t
        }

        function w(t, o) {
            if (!t.knowledge) {
                return t
            }
            var i = t.knowledge.getEnabled(),
                l = [];
            if (!i || !i.enables || !i.enables.length) {
                t.knowledge = null;
                return t
            }
            for (var s = 0, h = i.enables.length; s < h; s++) {
                var a = i.enables[s],
                    n = a.imageCategory,
                    e, u, r;
                e = a.identifier.split("/");
                if (e.length > 1) {
                    e = translate(e[0]) + " " + translate("Level") + e[1]
                } else {
                    e = translate(e[0])
                } if (n) {
                    r = a.identifier;
                    if (n === "units") {
                        r = a.primaryKey.toString()
                    }
                    u = o.notify("1edS3jXy", o, {
                        imageName: r,
                        imageCategory: n
                    })
                }
                l.push({
                    headline: e,
                    icon: u
                })
            }
            t.knowledgeHeader = {
                title: translate("Enables")
            };
            t.knowledge = l;
            return t
        }

        function S(t) {
            var e = encodeURIComponent("220177808035948");
            var i = encodeURIComponent(o.getValueOf("fbCaptureCastleLink"));
            var a = encodeURIComponent("http://lordsandknights.com");
            var s = encodeURIComponent(o.getValueOf("fbCaptureCastleName"));
            var n = encodeURIComponent(o.getValueOf("fbCaptureCastlePicture"));
            var r = encodeURIComponent(o.getValueOf("fbCaptureCastleDescription"));
            var l = "https://www.facebook.com/dialog/feed?app_id=" + e + "&redirect_uri=" + a + "&display=page&link=" + i + "&picture=" + n + "&name=" + s + "&description=" + r + "&show_error=true";
            var u = t.notify("1edS3jXy", t, {
                imageName: "facebook",
                imageCategory: "icons"
            });
            return {
                url: l,
                icon: u
            }
        }
    })();
    p.DataSource = function (a) {
        utils.__extends(e, m);

        function e(t, i) {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.setData = function (a) {
            var i = a.habitatReportArray;
            var t;
            this.__data = {};
            this.__data.reportsView = {
                arrayAll: [],
                arrayMission: [],
                arrayBattle: [],
                arrayAttack: [],
                arrayResearch: [],
                arrayTransit: [],
                arraySpy: [],
                arrayDefense: []
            };
            this.__data.reports = [];
            for (var e = 0; e < i.length; e++) {
                t = new s.Report(i[e]);
                t.threadID = t.id;
                delete t.id;
                this.sortReportIntoCategory(this.__data.reportsView, t);
                this.__data.reports.push(t)
            }
            this.informControllerUnblock();
            this.publishUpdate()
        };
        e.prototype.setReport = function (a) {
            var e = this.__data.reports,
                i = a.report,
                t;
            for (t = 0; t < e.length; t++) {
                if (e[t].threadID == i.id) {
                    e[t].published = i.published;
                    break
                }
            }
            this.informControllerUnblock();
            this.publishUpdate()
        };
        e.prototype.setReportSetup = function (e) {
            t.reportSetup = e.reportSetup;
            this.informControllerUnblock();
            this.publishUpdate()
        };
        e.prototype.modelUpdate = function () {
            if (t.unreadReportCount > 0) {
                this.refreshReportsFromServer()
            }
        };
        e.prototype.refreshReportsFromServer = function () {
            i.request("ReportAction/habitatReportArray", {}, this.setData, this)
        };
        e.prototype.togglePublishReport = function (t, e) {
            i.request("ReportAction/setReportPublished", {
                id: t,
                published: !e
            }, this.setReport, this)
        };
        e.prototype.changeReportSetup = function (t) {
            i.request("ReportAction/changeReportSetup", {
                reportSetup: t
            }, this.setReportSetup, this)
        };
        e.prototype.deleteReportCategory = function (t) {
            if (de === "jsonp") {
                var e = utils.array.uri_join(t, Ae);
                i.chainActionFromArray("ReportAction/deleteHabitatReportArray", "idArray", e, this.setData, this)
            } else {
                i.request("ReportAction/deleteHabitatReportArray", {
                    idArray: "(" + t.join(",") + ")"
                }, this.setData, this)
            }
        };
        e.prototype.deleteReport = function (t) {
            i.request("ReportAction/deleteHabitatReport", {
                id: t
            }, this.setData, this)
        };
        e.prototype._reportToCategory = function (t, e, i) {
            t.headline = i;
            this.__data.reportsView[e].push(t)
        };
        e.prototype.sortReportIntoCategory = function (e, t) {
            t.reportViewClass = p.ListEntry;
            e.arrayAll.push(t);
            if (t.type === f.ATTACK_WARNING || t.type === f.LOST_FOREIGN_DEFENDER) {
                this._reportToCategory(t, "arrayDefense", "Defense Report")
            }
            if (t.type === f.CONQUEST || t.type === f.CONQUEST_FAILED) {
                this._reportToCategory(t, "arrayAttack", "Battle Report")
            }
            if (t.type === f.TRANSIT_RETURNED || t.type === f.DELIVERED_RESOURCES || t.type === f.DELIVERED_DEFENSE) {
                this._reportToCategory(t, "arrayTransit", "Transit Report")
            }
            if (t.type === f.KNOWLEDGE_RESEARCHED) {
                this._reportToCategory(t, "arrayResearch", "Knowledge researched report")
            }
            if (t.type === f.MISSION_FINISHED) {
                this._reportToCategory(t, "arrayMission", "Mission Report")
            }
            if (t.type === f.SPY_FINISHED || t.type == f.SPY_CAPTURED) {
                this._reportToCategory(t, "arraySpy", "Spy Report")
            }
            if (t.type === f.LOST_FOREIGN_DEFENDER) {
                this._reportToCategory(t, "arrayDefense", "Lost foreign defenders")
            }
            if (t.type === f.BATTLE_ROUND_FINISHED) {
                if (t.battleType === C.ATTACKER) {
                    this._reportToCategory(t, "arrayAttack", "Battle Report")
                } else {
                    this._reportToCategory(t, "arrayDefense", "Defense Report")
                }
            }
        };
        return e
    }(m);
    p.DetailView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e)
        }

        function i(e) {
            var t = $(e);
            if (t.is(".icon.clickable")) {
                this.centerMapOver(t);
                return true
            }
            if (t.is(".publishbutton")) {
                this.togglePublish(t);
                return true
            }
            if (t.is(".copy")) {
                this.copyReport(t);
                return true
            }
            return false
        }
        t.prototype.centerMapOver = function (e) {
            var t = e.data();
            this.notify("Q(7d5rkH", {
                data: {
                    id: t.id,
                    mapX: t.x,
                    mapY: t.y
                }
            })
        };
        t.prototype.togglePublish = function (t) {
            this.notify("aqtvYr4w", {
                published: t.data("published"),
                id: t.data("id")
            })
        };
        t.prototype.copyReport = function (t) {
            this.notify("-pVBP1K_", {
                habitat: t.data("habitat"),
                report: t.data("id")
            })
        };
        t.prototype.paginationClick = function (e) {
            var i = $(e.target),
                t = "next";
            if (i.parent().is(".back")) {
                t = "back"
            }
            this.notify("bJyUTr0u", {
                direction: t
            })
        };
        t.prototype.clickHandler = function (t) {
            this.bubble(t, i.bind(this), "reportDetail")
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                selector: ".pagination .button",
                event: "click",
                callback: this.paginationClick,
                target: this
            });
            e.push({
                selector: "#reportDetail",
                event: "click",
                callback: this.clickHandler,
                target: this
            });
            return e
        };
        return t
    }(TemplateView);
    p.View = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("name", "ReportDetails", true);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            if (!this.data) {
                return
            }
            this.detail = this.createSubview(this, {
                templateData: this.data,
                template: "reportDetail",
                attachTo: this
            }, p.DetailView)
        };
        t.prototype.dataUpdate = function (e, t) {
            this.data = t;
            this.create()
        };
        return t
    }(e);
    p.Overview = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e);
            this.templateData = {
                htmlID: this.id
            };
            this.readReportIDs = [];
            this.lastReadTimeKey = _.storeLocal.createKey("rlr");
            this.lastReadTime = Date.parse(_.storeLocal.getItem(this.lastReadTimeKey)) || null
        }
        t.prototype.dataUpdate = function (l, s) {
            this.reports = s;
            var n = this.reports.length;
            var r = false;
            this.templateData = {
                days: {},
                showMoreButton: r,
                htmlID: this.id
            };
            for (var t = 0, o = n; t < o; t++) {
                var a = this.notify("SiPbxnVc", this.reports[t]);
                var e = utils.date.showFormatShortDateTime(this.reports[t].date);
                if (!this.templateData.days[e]) {
                    this.templateData.days[e] = {
                        date: e,
                        reports: []
                    }
                }
                var i = "";
                if (utils.dict.size(this.reports[t].unitsLoss) > 0) {
                    i += " losses"
                }
                if (this.readReportIDs.indexOf(this.reports[t].serverID) === -1 && this.lastReadTime && Date.parse(this.reports[t].date) > this.lastReadTime || !this.lastReadTime) {
                    i += " new"
                }
                this.templateData.days[e].reports.push({
                    icon: a.icon,
                    timestamp: utils.date.formatDateTimeForNightModus(this.reports[t].date),
                    title: a.headline,
                    habitat: this.reports[t].habitat.name,
                    frameParams: {
                        styles: "clickable reportRow " + i,
                        data: t
                    },
                    editmode: this.editMode
                })
            }
            this.create()
        };
        t.prototype.reportRowClickHandler = function (a) {
            var e = $(a.currentTarget);
            var i = e.attr("data");
            if (!i) {
                return
            }
            var t = this.reports[i];
            this.notify("0I4SJP3-", t);
            if (this.readReportIDs.indexOf(t.serverID) === -1) {
                this.readReportIDs.push(t.serverID);
                e.removeClass("new")
            }
            if (Date.parse(t.date) > this.lastReadTime) {
                _.storeLocal.setItem(this.lastReadTimeKey, t.date);
                this.lastReadTime = Date.parse(t.date)
            }
        };
        t.prototype.checkBoxHandler = function (t) {
            this.notify("yvRNuVNY", this)
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            var i = function (t, a, i) {
                i = i || "click";
                t = "#" + this.templateData.htmlID + " " + t;
                e.push({
                    selector: t,
                    event: i,
                    callback: a,
                    target: this
                })
            }.bind(this);
            i(".reportRow", this.reportRowClickHandler);
            i(".markTableEntryCheckbox input", this.checkBoxHandler);
            return e
        };
        t.prototype.show = function () {
            $("#" + this.templateData.htmlID).show()
        };
        t.prototype.hide = function () {
            $("#" + this.templateData.htmlID).hide()
        };
        t.prototype.startEditMode = function () {
            $("#" + this.templateData.htmlID + " .markTableEntryCheckbox").show()
        };
        t.prototype.stopEditMode = function () {
            $("#" + this.templateData.htmlID + " .markTableEntryCheckbox").hide()
        };
        return t
    }(TemplateView);
    p.Settings = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("settings", []);
            this.addOption("setupValue", 0);
            this.setOptions(e);
            this.styleArray.push("actsAsCurrentView")
        }
        t.prototype.create = function () {
            this.createSubview(this, {
                content: translate("Save"),
                hover: translate("Save"),
                clickMessage: "pN&OEnG("
            }, l);
            this.settings.push(this.createSettingsLine("defense", "Attack Warning", f.ATTACK_WARNING));
            this.settings.push(this.createSettingsLine("defense", "Lost foreign defenders", f.LOST_FOREIGN_DEFENDER));
            this.settings.push(this.createSettingsLine("transitAttack", "Battle Report", f.BATTLE_ROUND_FINISHED));
            this.settings.push(this.createSettingsLine("transitAttack", "Successful Conquest", f.CONQUEST));
            this.settings.push(this.createSettingsLine("transitAttack", "Failed Conquest", f.CONQUEST_FAILED));
            this.settings.push(this.createSettingsLine("transport", "Transit Report", f.TRANSIT_RETURNED));
            this.settings.push(this.createSettingsLine("transport", "Delivered Resources", f.DELIVERED_RESOURCES));
            this.settings.push(this.createSettingsLine("researchBlack", "Knowledge researched report", f.KNOWLEDGE_RESEARCHED));
            this.settings.push(this.createSettingsLine("missionBlack", "Mission Report", f.MISSION_FINISHED));
            this.settings.push(this.createSettingsLine("transitSpy", "Spy Report", f.SPY_FINISHED));
            this.settings.push(this.createSettingsLine("transitSpy", "Spy captured report", f.SPY_CAPTURED))
        };
        t.prototype.createSettingsLine = function (a, s, i) {
            var t = this.createSubview(this, {
                styles: "reportSettingsLine"
            }, w);
            var e;
            t.createSubview(t, {
                styles: "icon",
                content: this.notify("rvHW39mY", this, {
                    imageCategory: "icons",
                    imageName: a
                })
            });
            t.createSubview(t, {
                styles: "title",
                content: translate(s)
            });
            e = t.createSubview(t, {
                styles: "checkbox",
                clickMessage: "Jksm-Fxh",
                data: {
                    reportType: i
                }
            }, O.Checkbox);
            if (this.setupValue & 1 << i) {
                e.check()
            }
            return e
        };
        return t
    }(e);
    p.TabBar = function (i) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (s, a) {
            this.content = a.reportsView;
            this.lengthAll = a.reports.length;
            var n;
            this.deleteAllSubviews();
            var e = "";
            var t = "";
            for (var i in this.content) {
                if (i == "arrayAll") {
                    t = "all";
                    e = "Show All"
                } else if (i == "arrayMission") {
                    t = "mission";
                    e = "Mission Report"
                } else if (i == "arrayAttack") {
                    t = "attack";
                    e = "Battle Report"
                } else if (i == "arrayDefense") {
                    t = "defence";
                    e = "Defense Report"
                } else if (i == "arrayResearch") {
                    t = "research";
                    e = "Knowledge researched report"
                } else if (i == "arrayTransit") {
                    t = "transit";
                    e = "Transit Report"
                } else if (i == "arraySpy") {
                    t = "spy";
                    e = "Spy Report"
                } else {
                    t = "";
                    e = ""
                } if (t !== "") {
                    this.createSubview(this, {
                        count: this.content[i].length,
                        icon: t,
                        arrayName: i,
                        styles: "tab",
                        name: translate(e)
                    }, p.TabButton)
                }
            }
            this.draw()
        };
        t.prototype.draw = function () {
            t.__super__.draw.apply(this, arguments);
            Se("reports")
        };
        return t
    }(e);
    p.TabHover = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("name");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.createSubview(this, {
                content: this.name,
                styles: "nameHover clean"
            });
            this.clearfix()
        };
        return t
    }(R);
    p.TabButton = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("count", 0);
            this.addOption("icon", "");
            this.addOption("arrayName", "");
            this.addOption("name", "");
            this.addOption("filler", false);
            this.setOptions(e);
            if (!this.filler && !this.clickMessage) this.clickMessage = "8Z&9z-U-"
        }
        t.prototype.create = function () {
            if (this.filler) return;
            var t = this.notify("rvHW39mY", this, {
                imageName: this.icon,
                imageCategory: "tabs"
            }),
                e = this.notify("rvHW39mY", this, {
                    imageName: this.icon + "_active",
                    imageCategory: "tabs"
                }),
                i = $(t).attr("src"),
                a = $(e).attr("src");
            this.attributes = {
                "data-default": i,
                "data-active": a
            };
            this.createSubview(this, {
                styles: "tab-content",
                content: t,
                lazyHoverClass: p.TabHover,
                lazyHoverOptions: {
                    name: this.name
                }
            }, N)
        };
        return t
    }(e);
    p.Window = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("reportSetupValue", 0);
            this.setOptions(e);
            this.create();
            this.settingsActive = false
        }
        t.prototype.create = function () {
            this.editModeButton = this.createSubview(this.headline.buttons, {
                graphic: "headlineButton_Edit",
                hover: translate("Edit"),
                name: "editButton",
                clickMessage: "33gYIOnu"
            }, Z);
            this.settingsButton = this.createSubview(this.headline.buttons, {
                graphic: "headlineButton_SetUp",
                hover: translate("Preferences"),
                name: "setupButton",
                clickMessage: "BCBzPhu3"
            }, Z);
            this.deleteSingleReportButton = this.createSubview(this.headline.buttons, {
                graphic: "headlineButton_eraseThread",
                hover: translate("Delete"),
                name: "deleteItemsButton",
                clickMessage: "i2UykS-N",
                hidden: true
            }, Z);
            this.tabbar = new p.TabBar(this.controller, {
                parent: this.subviews[0],
                name: "reportTabBar",
                styles: "tabbar reports"
            });
            this.content.addSubview(this.tabbar);
            this.settings = this.content.createSubview(this.content, {
                name: "reportsettings",
                setupValue: this.reportSetupValue,
                hidden: true
            }, p.Settings);
            this.reportTable = this.createSubview(this.content, {
                name: "reportstable",
                tag: "currentView",
                styles: "reportstable contentCurrentView",
                template: "reportOverview"
            }, p.Overview);
            this.editControls = this.createSubview(this.mainContentContainer.parent, {}, Ve)
        };
        t.prototype.startEditMode = function () {
            this.content.styleArray.push("editmode");
            this.reportTable.startEditMode();
            this.editModeButton.changeImage("headlineButton_Back");
            this.editControls.show();
            $("#" + this.id + " .main-content").css("bottom", "51px");
            this.hideSettings();
            this.settingsButton.hide()
        };
        t.prototype.stopEditMode = function () {
            this.content.styleArray.splice(this.content.styleArray.indexOf("editmode"), 1);
            this.reportTable.stopEditMode();
            this.editModeButton.changeImage("headlineButton_Edit");
            this.editControls.hide();
            $("#" + this.id + " .main-content").css("bottom", "5px");
            this.settingsButton.show()
        };
        t.prototype.showSettings = function () {
            var t = this.content.findSubviewByName("reportstable");
            if (typeof t !== "undefined") {
                t.hide()
            }
            this.headline.buttons.hideAllButtons();
            this.headline.buttons.findSubviewByName("back").show();
            this.settings.show();
            this.settingsActive = true
        };
        t.prototype.hideSettings = function () {
            var t = this.content.findSubviewByName("reportstable");
            if (typeof t !== "undefined") {
                t.show()
            }
            this.headline.buttons.hideAllButtons();
            this.headline.buttons.findSubviewByName("editButton").show();
            this.headline.buttons.findSubviewByName("setupButton").show();
            this.settings.hide();
            this.settingsActive = false
        };
        t.prototype.show = function () {
            t.__super__.show.apply(this, arguments);
            this.notify("%H(aWJB5", this)
        };
        return t
    }(n.Window);
    r.Controller = function (a) {
        utils.__extends(e, a);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.addOption("itemsPerPage", 30);
            this.addOption("resetRequired", false);
            this.addOption("lastReportLoad", Date.now());
            this.edittingField = {};
            this.editting = false;
            this.memberSortingType = "name";
            this.memberSortingDirection = "asc"
        }
        e.prototype.dataUpdate = function (e, i) {
            if (this.editting === true && !this.resetRequired) {
                this.deplayedUpdate = i;
                return
            }
            if (this.resetRequired) {
                this.view.reset();
                this.resetRequired = false
            }
            this.view.dataUpdate(e, t.alliance)
        };
        e.prototype["1-pbxv-g"] = function () {
            this.toggleViews("allianceProfile")
        };
        e.prototype[")q1Eomu("] = function () {
            this.toggleViews("allianceMembers")
        };
        e.prototype["YYn0JM99"] = function () {
            this.toggleViews("allianceRights")
        };
        e.prototype["FrFbTGa1"] = function () {
            this.toggleViews("allianceInvitations")
        };
        e.prototype["4-PupHg4"] = function () {
            var t = this.view.sections[2],
                e = Date.now(),
                i;
            if (!t.reports) {
                this.datasource.loadReports(t);
                this.lastReportLoad = e
            } else if (t.reports.length && this.lastReportLoad) {
                i = (e - this.lastReportLoad) / 1e3 / 60;
                if (i > 2) {
                    this.datasource.loadReports(t);
                    this.lastReportLoad = e
                }
            }
            this.toggleViews("allianceReports")
        };
        e.prototype["a4mM8Jww"] = function () {
            this.toggleViews("allianceDiplomacy")
        };
        e.prototype["qXcHrBVE"] = function () {
            this.toggleViews("allianceRankings")
        };
        e.prototype["GTD%-q(j"] = function () {
            var t = this.view.findSubviewByName("createNewAlliance").input,
                e = t.getValue();
            if (t.validate()) {
                this.resetRequired = true;
                this.datasource.createAlliance({
                    name: e
                })
            }
        };
        e.prototype["9SVA_8Y1"] = function (t) {
            var e = t.parent.allianceID;
            utils.dialog.confirm(this, translate("Accept invitation"), translate("Invitations"), function () {
                this.resetRequired = true;
                this.datasource.acceptAllianceInvitation(e)
            }.bind(this))
        };
        e.prototype["QI2S&vvz"] = function (t) {
            var e = t.parent.allianceID;
            utils.dialog.confirm(this, translate("Decline invitation"), translate("Invitations"), function () {
                this.datasource.declineAllianceInvitation(e)
            }.bind(this))
        };
        e.prototype["vHQXxThA"] = function (t) {
            var e = t.parent.parent.parent.playerID;
            this.datasource.cancelAllianceInvitation(e)
        };
        e.prototype["-jbriJhv"] = function () {
            utils.dialog.confirm(this, translate("Are you sure?"), translate("Alliance"), function () {
                this.resetRequired = true;
                this.datasource.leaveAlliance();
                this.notify("Jka00I6m", this)
            }.bind(this))
        };
        e.prototype["vbtoLC_A"] = function () {
            if (!t || !t.hasAlliance()) {
                return
            }
            utils.dialog.confirm(this, translate("Are you sure?"), translate("Alliance"), function () {
                this.resetRequired = true;
                this.datasource.disbandAlliance(t.alliance.id);
                this.notify("Jka00I6m", this)
            }.bind(this))
        };
        e.prototype["dbDnWFP_"] = function () {
            var n = this.view.findSubviewByName("allianceMembers");
            if (!n) {
                return
            }
            var r = n.table;
            var a;
            var s = [];
            for (var e = 0; e < r.subviews.length; e++) {
                a = r.subviews[e].checkbox;
                if (typeof a !== "undefined" && a.isChecked()) {
                    s.push(a.data)
                }
            }
            var i = "" + t.id + ",";
            for (e = 0; e < s.length; e++) {
                i += s[e].playerID + ","
            }
            i = i.substring(0, i.length - 1);
            this.showNextViewOfClass(_e.NewView, {
                name: "massMailForm",
                styles: "massMail",
                receivingPlayerArray: i,
                maxLength: u.maxDiscussionTitleLength,
                clickMessage: "(SpqXPxt"
            })
        };
        e.prototype["(SpqXPxt"] = function () {
            var e = this.view.findSubviewByName("massMailForm"),
                i = e.subject,
                a = e.message;
            if (i.validate() && a.validate()) {
                if (e.receivingPlayerArray !== "" + t.id + "") {
                    this.datasource.sendMassMailToSelectedMembers(i.getValue(), a.getValue(), e.receivingPlayerArray)
                } else {
                    this.datasource.sendMassMail(i.getValue(), a.getValue())
                }
                this["0scd3paU"]()
            } else {
                utils.dialog.alert(this, translate("You are not allowed to send empty messages."), translate("Error"), function () {})
            }
        };
        e.prototype["B(sCcsCu"] = function () {
            this._profileEditAction("allianceProfileDescription")
        };
        e.prototype["QOCIbojJ"] = function () {
            this._profileEditAction("allianceProfileName")
        };
        e.prototype["p(xcr1Tm"] = function () {
            var t = this.view.findSubviewByName("form_allianceProfileName"),
                e = t.input.getValue();
            this.datasource.changeAllianceData({
                name: i.stripHTML(e)
            });
            this.editting = false;
            this._checkDelayedUpdate()
        };
        e.prototype["ANkjLFnO"] = function () {
            var t = this.view.findSubviewByName("form_allianceProfileDescription"),
                e = t.input.getValue();
            this.datasource.changeAllianceData({
                descriptionText: e
            });
            this.editting = false;
            this._checkDelayedUpdate()
        };
        e.prototype._profileEditAction = function (t) {
            var e = this.view.findSubviewByName("content_" + t),
                i = this.view.findSubviewByName("form_" + t);
            if (this.edittingField[t]) {
                this.edittingField[t] = false;
                i.hidden = true;
                e.hidden = false;
                var a = false;
                for (var s in this.edittingField) {
                    var n = this.edittingField[s];
                    if (n) {
                        a = true
                    }
                }
                if (!a) {
                    this.editting = false;
                    this._checkDelayedUpdate()
                }
            } else {
                this.editting = true;
                this.edittingField[t] = true;
                i.hidden = false;
                e.hidden = true
            }
            this.view.findSubviewByName("allianceProfile").draw()
        };
        e.prototype["SDBv6Kf9"] = function () {
            var t = this.view.findSubviewByName("allianceMembers").table;
            t.nextPage();
            t.draw()
        };
        e.prototype["YxkFBRtG"] = function () {
            var t = this.view.findSubviewByName("allianceMembers").table;
            t.prevPage();
            t.draw()
        };
        e.prototype["1y0Q-dze"] = function (t) {
            var e = $("#" + t.id).find(":input"),
                i = $("#" + t.parent.parent.table.id).find("input[type=checkbox]");
            i.prop("checked", e.is(":checked"))
        };
        e.prototype["TqBLYo--"] = function () {
            var t = this.view.findSubviewByName("allianceMembers");
            this.memberSortingDirection = "asc";
            t.dataUpdate(null, t.data)
        };
        e.prototype["Jp-DMK5U"] = function () {
            var t = this.view.findSubviewByName("allianceMembers");
            this.memberSortingDirection = "desc";
            t.dataUpdate(null, t.data)
        };
        e.prototype["BvgxKpaW"] = function () {
            var t = this.view.findSubviewByName("allianceMembers");
            if (!t) {
                return
            }
            t.sortTypeMenu.toggleOnce()
        };
        e.prototype["Ck231(jS"] = function (e) {
            var t = this.view.findSubviewByName("allianceMembers");
            var i = e.data.type;
            this.memberSortingType = i;
            t.sortTypeMenu.hide();
            t.dataUpdate(null, t.data)
        };
        e.prototype["rcBQ5NUE"] = function () {
            var t = this.view.findSubviewByName("allianceRights").table;
            t.nextPage();
            t.draw()
        };
        e.prototype["l)Xw5FGt"] = function () {
            var t = this.view.findSubviewByName("allianceRights").table;
            t.prevPage();
            t.draw()
        };
        e.prototype["Ep6_KyUN"] = function () {
            var s = this.view.findSubviewByName("allianceRights").table.subviews;
            for (var i = 0; i < s.length; i++) {
                var e = s[i],
                    r = e.playerID,
                    t = e.alliancePermission;
                if (e.editted) {
                    t = 0;
                    for (var a = 0; a < e.icons.length; a++) {
                        var n = e.icons[a],
                            o = n.currentStatus ? n.permissionMask : 0;
                        t = t | o
                    }
                    if (t === h.MAX) {
                        t = h.ALL
                    }
                    e.reset(t);
                    this["8b4)JjJH"]();
                    this.datasource.changePermissionForMember(r, t)
                }
            }
        };
        e.prototype["jgHuhXJr"] = function (t) {
            t.toggle();
            this.view.draw()
        };
        e.prototype["0FxTgyJ8"] = function () {
            var t = this.view.findSubviewByName("savePermissions");
            if (t.hidden) {
                t.show()
            }
        };
        e.prototype["8b4)JjJH"] = function () {
            var t = this.view.findSubviewByName("savePermissions");
            if (!t.hidden) {
                t.hide()
            }
        };
        e.prototype["Qs9W5r7L"] = function (t) {
            if (this.view.slideLock) {
                return false
            }
            this.view.slideLock = true;
            var e = {
                type: t.type,
                date: t.date,
                title: t.title,
                sendingPlayer: t.sendingPlayer,
                receivingPlayer: t.receivingPlayer,
                destinationAlliance: t.destinationAlliance,
                newAlliancePermission: t.newAlliancePermission,
                oldAlliancePermission: t.oldAlliancePermission,
                newDiplomaticRelation: t.newDiplomaticRelation,
                oldDiplomaticRelation: t.oldDiplomaticRelation,
                clickMessage: null
            };
            this.showNextViewOfClass(r.ReportDetails.View, e);
            this.resetSlideLock()
        };
        e.prototype["XNiQvVWH"] = function (e) {
            var t = e.parent.parent.table;
            t.nextPage();
            t.draw()
        };
        e.prototype["znVUVdoN"] = function () {
            var t = this.view.findSubviewByName("allianceDiplomacy").table;
            t.nextPage();
            t.draw()
        };
        e.prototype["%SnEYo%("] = function (t) {
            var i = t.parent.diplomacy,
                e = t.data.relation,
                a = this._filterDiplomacy(i, e);
            this.showNextViewOfClass(r.DiplomacyList, {
                rows: a,
                relation: e
            })
        };
        e.prototype._filterDiplomacy = function (e, i) {
            var a = [];
            for (var t = 0; t < e.length; t++) {
                var s = e[t];
                if (i === le.ALL || i === s.relationship) {
                    a.push(s)
                }
            }
            return a
        };
        e.prototype["xRy_eCwl"] = function (t) {
            var e = t.data.alliance;
            this.controller.createForeignAllianceWindow(e)
        };
        e.prototype["z8RhS)KL"] = function (t) {
            this.datasource.changeRelationship(t.data);
            this["0scd3paU"]();
            t.parent.toggle()
        };
        e.prototype["pHawGOIe"] = function (i, t) {
            var e = t.page;
            this.datasource.getNextRankings(e)
        };
        e.prototype["h4MWA4%j"] = function (i, e) {
            if (t.alliance.id === e.playerID) {
                return
            }
            this.controller.createForeignAllianceWindow({
                id: e.playerID
            })
        };
        e.prototype["V(xgXe-G"] = function (i, t) {
            var e = t.type;
            if (e === "points") {
                this.datasource.showCurrentPointsRanking()
            } else {
                this.datasource.showCurrentAverageRanking()
            }
        };
        e.prototype["Ih)KLSsD"] = function (i, t) {
            var e = t.query;
            this.datasource.searchAlliance(e)
        };
        e.prototype["wgwjcACY"] = function (e) {
            var t = e.parent.playerInfo;
            if (typeof t === "undefined") {
                return
            }
            this.notify("Tf6iX-sR", this, t)
        };
        e.prototype["AhB5UK7v"] = function () {
            var t = this.view.findSubviewByName("submit");
            if (!t) {
                return
            }
            if (t.styleArray.indexOf("disabled") === -1) {
                t.styleArray.push("disabled")
            }
            t.draw()
        };
        e.prototype["POUKlbut"] = function () {
            var t = this.view.findSubviewByName("submit");
            if (!t) {
                return
            }
            if (t.styleArray.indexOf("disabled") > -1) {
                t.styleArray.splice(t.styleArray.indexOf("disabled"), 1)
            }
            t.draw()
        };
        e.prototype["6ofnhGey"] = function () {
            this.notify("6ofnhGey", this);
            this["0scd3paU"]()
        };
        e.prototype["PPJepePU"] = function (i) {
            var a = i.playerData || i.data,
                e = a.playerID || a.id;
            if (!e) {
                return
            }
            if (e === t.id) {
                this.notify("h4MWA4%j", this)
            } else {
                this.notify("CcFE9soE", this, e)
            }
        };
        e.prototype["lLPtbYRm"] = function (i) {
            var a = i.allianceData || i.data,
                e = a.id,
                s = a.name || null;
            if (!e) {
                return
            }
            if (t.hasAlliance() && t.alliance.id === e) {
                this.notify("createAllianceWindow", this)
            } else {
                this.notify("createForeignAllianceWindow", {
                    id: e,
                    name: s
                })
            }
        };
        e.prototype.toggleViews = function (e) {
            for (var i = 0; i < this.view.sections.length; i++) {
                var t = this.view.sections[i];
                if (t.name !== e) {
                    t.hide()
                } else {
                    t.init();
                    if (this.currentView !== e) {
                        t.show()
                    }
                }
            }
            this.currentView = e;
            this["0scd3paU"]()
        };
        e.prototype.resetSlideLock = function () {
            setTimeout(utils.bind(function () {
                if (this.view) {
                    this.view.slideLock = false
                }
            }, this), 250)
        };
        e.prototype["u4U2NRjL"] = function (t) {
            var e = this.notify("Vr(P2Uey", this, t.data);
            this.notify("J0N%It)p", this, e)
        };
        e.prototype._checkDelayedUpdate = function () {
            if (this.deplayedUpdate) {
                this.dataUpdate(null, this.deplayedUpdate)
            }
        };
        e.prototype["xhjW7E37"] = function () {
            var t = this.view.findSubviewByName("allianceProfile");
            if (t && !t.hidden) {
                t.paste(this.notify("xhjW7E37", this));
                return
            }
            var t = this.view.findSubviewByName("massMailForm");
            if (t && !t.hidden) {
                t.paste(this.notify("xhjW7E37", this));
                return
            }
        };
        return e
    }(n.Controller);
    r.Controller.findTransitRelation = function (a) {
        var e = a.alliance,
            s = "neutral";
        if (+t.id === a.id) {
            return "player"
        }
        if (!t.hasAlliance() || !e) {
            return s
        }
        if (t.hasAlliance() && +t.alliance.id === +e.id) {
            return "member"
        }
        for (var i = 0; i < t.alliance.diplomacyToArray.length; i++) {
            var n = t.alliance.diplomacyToArray[i];
            if (+n.id === +e.id) {
                return ie.getRelationshipImage(n.relationship)
            }
        }
        return s
    };
    r.DataSource = function (n) {
        utils.__extends(e, m);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.rankingStart = null;
            this.rankingEnd = null;
            this.rankingView = null;
            this._searchResultsActive = false;
            this._rankingType = "points";
            this._rankingData = null
        }

        function a(t) {
            var e = {};
            if (typeof t.name !== "undefined") {
                e.name = t.name
            }
            if (typeof t.descriptionText !== "undefined") {
                e.descriptionText = t.descriptionText
            }
            return e
        }
        e.prototype.changePermissionForMember = function (t, e) {
            i.request("AllianceAction/setPermission", {
                id: t,
                permission: e
            }, this.updatePlayerPermission, this)
        };
        e.prototype.changeAllianceData = function (t) {
            var e = a(t);
            i.request("AllianceAction/changeAllianceData", e, this.triggerModelUpdate, this)
        };
        e.prototype.disbandAlliance = function (t) {
            i.request("AllianceAction/disbandAlliance", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.leaveAlliance = function () {
            i.request("AllianceAction/leaveAlliance", {}, this.triggerModelUpdate, this)
        };
        e.prototype.createAlliance = function (t) {
            var e = a(t);
            i.request("AllianceAction/createAlliance", e, this.triggerModelUpdate, this)
        };
        e.prototype.acceptAllianceInvitation = function (t) {
            i.request("AllianceAction/acceptInvitation", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.declineAllianceInvitation = function (t) {
            i.request("AllianceAction/declineInvitation", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.cancelAllianceInvitation = function (t) {
            i.request("AllianceAction/cancelInvitation", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.sendMassMail = function (t, e) {
            i.request("AllianceAction/massMail", {
                subject: t,
                content: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.sendMassMailToSelectedMembers = function (t, e, a) {
            i.request("DiscussionAction/createDiscussion", {
                subject: t,
                content: e,
                receivingPlayerArray: a
            }, this.triggerModelUpdate, this)
        };
        e.prototype.changeRelationship = function (t) {
            i.request("AllianceAction/setDiplomaticRelation", t, this.triggerModelUpdate, this)
        };
        e.prototype._setRankings = function (t, e) {
            this.rankingStart = t;
            this.rankingEnd = e;
            if (this.rankingStart < 1) {
                this.rankingStart = 1;
                this.rankingEnd = 2 * me
            }
        };
        e.prototype.getNextRankings = function (t, e) {
            if (t === 1) {
                this._setRankings(this.rankingEnd, this.rankingEnd + 2 * me)
            } else {
                this._setRankings(this.rankingStart - 2 * me, this.rankingStart)
            }
            this._executeGetRankings()
        };
        e.prototype._addImageInfosToAllianceData = function (a) {
            var n = t.alliance.diplomacyToArray;
            for (var s = 0, r = a.ranking.length; s < r; s++) {
                var e = a.ranking[s],
                    i = "neutral";
                if (+e.id === t.alliance.id) {
                    i = "member";
                    e.own = true
                }
                n.forEach(function (t) {
                    if (+e.id === t.id) {
                        i = ie.getRelationshipImage(t.relationship);
                        return
                    }
                });
                e.relationship = i;
                e.relationshipIcon = this.getImageSrc(i, "diplomacy")
            }
            return a
        };
        e.prototype.prepareRankingData = function (t) {
            if (t.ranking.length) {
                this._setRankings(t.ranking[0].rank, t.ranking[t.ranking.length - 1].rank)
            } else {
                t = {
                    ranking: this._rankingData.ranking
                }
            }
            var e = this._addImageInfosToAllianceData(t),
                i = {
                    htmlID: "id" + utils.uniqueID(),
                    rankingListName: "allianceRankingList",
                    allianceRankings: true,
                    controlsHtmlID: "id" + utils.uniqueID(),
                    displayedRanking: e.ranking,
                    ranking: e.ranking,
                    searchResults: this._searchResultsActive,
                    higherRankData: {
                        page: -1
                    },
                    lowerRankData: {
                        page: 1
                    }
                };
            this.rankingView.dataUpdate(null, i);
            this.informControllerUnblock();
            this._rankingData = t
        };
        e.prototype.getRankings = function (e) {
            e.start = e.start || t.alliance.rank - me;
            e.end = e.end || t.alliance.rank + me;
            this._setRankings(e.start, e.end);
            this.rankingView = e.view;
            this._executeGetRankings()
        };
        e.prototype._executeGetRankings = function () {
            var t = {
                start: this.rankingStart,
                end: this.rankingEnd
            }, e = this._rankingType === "points" ? "showRankingV2" : "showRankingByAverage";
            i.request("AllianceAction/" + e, t, this.prepareRankingData, this)
        };
        e.prototype._resetRankings = function (e) {
            var i = e === "points" ? t.alliance.rank : t.alliance.rankAverage;
            this._rankingType = e;
            this._searchResultsActive = false;
            this._setRankings(i - me, i + me);
            this._executeGetRankings()
        };
        e.prototype.showCurrentPointsRanking = function () {
            this._resetRankings("points")
        };
        e.prototype.showCurrentAverageRanking = function () {
            this._resetRankings("average")
        };
        e.prototype.loadReports = function (t) {
            var e = this;

            function a(i) {
                t.saveReports(i.allianceReportArray || []);
                e.informControllerUnblock()
            }
            i.request("AllianceReportAction/allianceReportArray", {}, a, this)
        };
        e.prototype.searchAlliance = function (t) {
            this._searchResultsActive = true;
            i.request("AllianceAction/search", {
                name: t
            }, this.prepareRankingData, this)
        };
        e.prototype.createForumThread = function (t, e) {
            i.request("ForumAction/createForumThread", {
                topic: t,
                content: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.answerForumThread = function (t, e) {
            i.request("ForumAction/createForumMessage", {
                id: t,
                content: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.closeThread = function (t) {
            i.request("ForumAction/setForumThreadClosed", {
                id: t,
                closed: "1"
            }, this.triggerModelUpdate, this)
        };
        e.prototype.openThread = function (t) {
            i.request("ForumAction/setForumThreadClosed", {
                id: t,
                closed: "0"
            }, this.triggerModelUpdate, this)
        };
        e.prototype.deleteForumThreads = function (t) {
            if (de === "jsonp") {
                var e = utils.array.uri_join(t, Ae);
                i.chainActionFromArray("ForumAction/deleteForumThreads", "forumThreadIdArray", e, this.triggerModelUpdate, this)
            } else {
                i.request("ForumAction/deleteForumThreads", {
                    forumThreadIdArray: "(" + t.join(",") + ")"
                }, this.triggerModelUpdate, this)
            }
        };
        e.prototype.deleteForumMessages = function (t) {
            if (de === "jsonp") {
                var e = utils.array.uri_join(t, Ae);
                i.chainActionFromArray("ForumAction/deleteForumMessages", "forumMessageIdArray", e, this.triggerModelUpdate, this)
            } else {
                i.request("ForumAction/deleteForumMessages", {
                    forumMessageIdArray: "(" + t.join(",") + ")"
                }, this.triggerModelUpdate, this)
            }
        };
        e.prototype.loadPlayerInfo = function (t, e) {
            var a = this;

            function s(t) {
                a.informControllerUnblock();
                e.savePlayerInfo(t.Player)
            }
            i.request("ProfileAction/playerInformation", {
                id: t
            }, s, this)
        };
        e.prototype.updatePlayerPermission = function (n, o) {
            var i = n.Player || null;
            var e;
            if (i) {
                if (t.hasAlliance() && t.alliance.playerArray) {
                    var a = new s.Player(i);
                    for (e = 0; e < t.alliance.playerArray.length; e++) {
                        var r = t.alliance.playerArray[e];
                        if (a.id === r.id) {
                            t.alliance.playerArray[e] = a
                        }
                    }
                }
            }
            if (i.id === t.id) {
                t.alliancePermission = i.alliancePermission
            }
            for (e = 0; e < this.subscribers.length; e++) {
                this.subscribers[e].resetRequired = true
            }
            this.setData(t.alliance)
        };
        e.prototype.sendMessageToPlayer = function (t, e, a) {
            i.request("DiscussionAction/createDiscussion", {
                receivingPlayerArray: t,
                subject: e,
                content: a
            }, this.triggerModelUpdate, this)
        };
        e.prototype.modelUpdate = function () {
            this.publishUpdate()
        };
        return e
    }(m);
    X.Controller = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (t, e) {
            this.view.dataUpdate(t, e)
        };
        t.prototype["z8RhS)KL"] = function (t) {
            this.datasource.changeRelationship(t.data);
            this.view.forceUpdate = true;
            t.parent.toggle()
        };
        t.prototype["O6xYNd7&"] = function () {
            this.toggleViews("profile")
        };
        t.prototype["TGD&oNTu"] = function () {
            this.toggleViews("members")
        };
        t.prototype["g2A2IW-a"] = function (e) {
            var t = e.parent.parent.table;
            t.nextPage();
            t.draw()
        };
        t.prototype["(MI5Yfyg"] = function (e) {
            var t = e.parent.parent.table;
            t.prevPage();
            t.draw()
        };
        t.prototype["PPJepePU"] = function (t) {
            this.notify("CcFE9soE", this, t.playerData.id)
        };
        t.prototype["0scd3paU"] = function () {
            t.__super__["0scd3paU"].apply(this, arguments);
            if (this.viewStack.length === 0) {
                this.view.renderBlocked = false;
                this.view.showToolbarButtons()
            }
        };
        t.prototype["wgwjcACY"] = function (e) {
            var t = e.parent.playerInfo;
            if (typeof t === "undefined") {
                return
            }
            this.view.renderBlocked = true;
            this.notify("Tf6iX-sR", this, t)
        };
        t.prototype["AhB5UK7v"] = function () {
            var t = this.view.findSubviewByName("submit");
            if (!t) {
                return
            }
            if (t.styleArray.indexOf("disabled") === -1) {
                t.styleArray.push("disabled")
            }
            t.draw()
        };
        t.prototype["POUKlbut"] = function () {
            var t = this.view.findSubviewByName("submit");
            if (!t) {
                return
            }
            if (t.styleArray.indexOf("disabled") > -1) {
                t.styleArray.splice(t.styleArray.indexOf("disabled"), 1)
            }
            t.draw()
        };
        t.prototype["6ofnhGey"] = function () {
            this.notify("6ofnhGey", this);
            t.__super__["0scd3paU"].apply(this, arguments)
        };
        t.prototype.toggleViews = function (i) {
            for (var t = 0; t < this.view.sections.length; t++) {
                var e = this.view.sections[t];
                e.name !== i ? e.hide() : e.show()
            }
        };
        t.prototype["u4U2NRjL"] = function (t) {
            var e = this.notify("Vr(P2Uey", this, t.data);
            this.notify("J0N%It)p", this, e);
            _.blinkButton($("#" + this.view.id + " .button.copy"))
        };
        return t
    }(n.Controller);
    X.DataSource = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.loadInfo = function (t, e) {
            var a = this;

            function s(t) {
                e.saveData(t);
                a.informControllerUnblock()
            }
            i.request("AllianceAction/allianceInformation", {
                id: t
            }, s, this)
        };
        t.prototype.loadPlayerInfo = function (t, e) {
            var a = this;

            function s(t) {
                e.savePlayerInfo(t.Player);
                a.informControllerUnblock()
            }
            i.request("ProfileAction/playerInformation", {
                id: t
            }, s, this)
        };
        t.prototype.changeRelationship = function (t) {
            i.request("AllianceAction/setDiplomaticRelation", t, this.triggerModelUpdate, this)
        };
        t.prototype.sendMessageToPlayer = function (t, e, a) {
            i.request("DiscussionAction/createDiscussion", {
                receivingPlayerArray: t,
                subject: e,
                content: a
            }, this.triggerModelUpdate, this)
        };
        return t
    }(m);
    X.Window = function (i) {
        utils.__extends(t, i);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("sections", [])
        }
        t.prototype.dataUpdate = function (e, t) {
            if (t && t.id) {
                this.allianceID = t.id
            }
            if (this.controller.datasource && this.allianceID && !this.data) {
                this.controller.datasource.loadInfo(this.allianceID, this)
            } else if (this.data && this.forceUpdate) {
                this.render();
                this.forceUpdate = false
            }
        };
        t.prototype.init = function () {
            if (!this.data && this.allianceID) {
                this.dataUpdate(null, {
                    id: this.allianceID
                })
            }
            return this
        };
        t.prototype.saveData = function (t) {
            if (t && t.alliance) {
                this.data = new s.Alliance(t.alliance);
                this.render()
            }
        };
        t.prototype.clean = function () {
            this.sections = [];
            this.content.deleteAllSubviews()
        };
        t.prototype.render = function () {
            if (!this.data) {
                return
            }
            this.headline.title.content = utils.sanitize(this.data.name);
            this.clean();
            this.container = this.createSubview(this.content, {
                group: "foreignAlliance",
                tag: "currentView",
                styles: "container"
            });
            this.addButtons();
            this.addSections();
            this.draw()
        };
        t.prototype.addButtons = function () {
            var t = this.container.createSubview(this.container, {
                styles: "buttons"
            });
            t.createSubview(t, {
                group: "foreignAlliance",
                content: translate("Profile"),
                hover: translate("Profile"),
                styles: "text",
                clickMessage: "O6xYNd7&"
            }, l);
            t.createSubview(t, {
                group: "foreignAlliance",
                content: translate("Members"),
                hover: translate("Members"),
                styles: "text",
                clickMessage: "TGD&oNTu"
            }, l);
            t.createSubview(t, {
                group: "foreignAlliance",
                content: this.notify("rvHW39mY", this, {
                    imageName: "pasteBoardAllianceWhite",
                    imageCategory: "icons"
                }),
                hover: translate("Copy alliance link"),
                clickMessage: "u4U2NRjL",
                data: {
                    alliance: this.allianceID
                },
                styles: "copy"
            }, l);
            t.clearfix()
        };
        t.prototype.addSections = function () {
            this.createSection({
                name: "profile",
                allianceData: this.data
            }, X.Profile);
            this.createSection({
                name: "members",
                hidden: true,
                playerData: this.data.playerArray
            }, X.Members)
        };
        t.prototype.createSection = function (t, i) {
            var a;
            i = i || e;
            t.styles = t.styles || t.name;
            a = this.createSubview(this.container, t, i);
            this.sections.push(a)
        };
        t.prototype.showToolbarButtons = function () {
            this._toggleToolbarButtons("show")
        };
        t.prototype.hideToolbarButtons = function () {
            this._toggleToolbarButtons("hide")
        };
        t.prototype._toggleToolbarButtons = function (i) {
            for (var t = 0; t < this.toolbar.subviews.length; t++) {
                var e = this.toolbar.subviews[t];
                if (e.name !== "back") {
                    if (i == "hide") {
                        e.hide()
                    } else {
                        e.show()
                    }
                }
            }
        };
        return t
    }(n.Window);
    X.Members = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("playerData");
            this.addOption("perPage", 30);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            if (!this.playerData) {
                return
            }
            this.table = this.createSubview(this, {
                styles: "memberTableWrapper",
                name: "foreignAllianceMembers",
                rowClass: r.MemberRow,
                pageItems: this.perPage,
                nextButtonClickMessage: "g2A2IW-a"
            }, De);
            this.table.dataUpdate(null, this.playerData)
        };
        t.prototype._headerContent = function () {};
        return t
    }(e);
    X.Profile = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("allianceData");
            this.setOptions(e)
        }
        t.prototype.dataUpdate = function () {
            this.create()
        };
        t.prototype.create = function () {
            this.deleteSubviewByField("group", "foreignAllianceProfile");
            this.createSubview(this, {
                group: "foreignAllianceProfile",
                title: translate("Details"),
                header: true,
                profile: true
            }, X.RelationshipSection);
            this.createSubview(this, {
                title: translate("Description"),
                group: "foreignAllianceProfile",
                dataAttribute: "descriptionText",
                fallback: translate("No Description")
            }, X.ProfileSection)
        };
        return t
    }(e);
    X.ProfileSection = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("title", "");
            this.addOption("dataAttribute", "");
            this.addOption("fallback", null);
            this.setOptions(e);
            this.styles += " allianceDetailSection"
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            var e = this.parent.allianceData[this.dataAttribute] || this.fallback || "";
            e = utils.sanitize(e);
            this.createSubview(this, {
                title: this.title
            }, I);
            this.createSubview(this, {
                styles: "content",
                content: e,
                handleLinks: true
            })
        };
        return t
    }(w);
    X.RelationshipSection = function (i) {
        utils.__extends(e, i);

        function e(a, i) {
            e.__super__.constructor.apply(this, arguments);
            this.addOption("header", false);
            this.addOption("profile", false);
            this.setOptions(i);
            this.styles = this.styles += " relationship";
            this.editable = t.hasAlliancePermission(h.DIPLOMATIC_RELATIONS);
            this.allianceID = this.parent.allianceData.id
        }
        e.prototype.create = function () {
            e.__super__.create.apply(this, arguments);
            var i = this.findRelationship(),
                t = {
                    styles: "largeicon",
                    callback: null
                };
            if (this.editable) {
                t.styles += " clickable";
                t.callback = utils.bind(this.toggleMenu, this)
            }
            this.createSubview(this, {
                styles: t.styles,
                clickCallback: t.callback,
                content: i.icon
            });
            if (this.editable) {
                this.menu = this.createSubview(this, {
                    currentRelationship: i.relation,
                    allianceID: this.allianceID
                }, r.RelationshipMenu)
            }
            this.nameSection = this.createSubview(this, {
                styles: "section",
                group: "allianceProfileSection"
            });
            this.createSubview(this.nameSection, {
                styles: "label",
                group: "allianceProfileSection",
                content: translate("Alliance") + ":"
            });
            this.createSubview(this.nameSection, {
                styles: "value",
                group: "allianceProfileSection",
                content: utils.sanitize(this.parent.allianceData.name)
            });
            this.clearfix();
            var a = this.createSubview(this, {
                styles: "section",
                group: "allianceProfileSection"
            });
            this.createSubview(a, {
                content: this.title,
                styles: "label"
            });
            this.createSubview(a, {
                styles: "content value",
                content: i.text
            });
            this.clearfix();
            if (this.profile) {
                this.profilePoints = this.createSubview(this, {
                    styles: "section",
                    group: "allianceProfileSection"
                });
                this.createSubview(this.profilePoints, {
                    styles: "label",
                    group: "allianceProfileSection",
                    content: translate("Points") + ":"
                });
                this.createSubview(this.profilePoints, {
                    styles: "value",
                    group: "allianceProfileSection",
                    content: this.parent.allianceData.points
                });
                this.profilePoints.clearfix();
                this.createSubview(this.profilePoints, {
                    styles: "label",
                    group: "allianceProfileSection",
                    content: translate("Average points") + ":"
                });
                this.createSubview(this.profilePoints, {
                    styles: "value",
                    group: "allianceProfileSection",
                    content: this.parent.allianceData.pointsAverage
                });
                this.profilePoints.clearfix();
                this.profileRank = this.createSubview(this, {
                    styles: "section",
                    group: "allianceProfileSection"
                });
                this.createSubview(this.profileRank, {
                    styles: "label",
                    group: "allianceProfileSection",
                    content: translate("Rank") + ":"
                });
                this.createSubview(this.profileRank, {
                    styles: "value",
                    group: "allianceProfileSection",
                    content: this.parent.allianceData.rank
                });
                this.profileRank.clearfix();
                this.createSubview(this.profileRank, {
                    styles: "label",
                    group: "allianceProfileSection",
                    content: translate("Members") + ":"
                });
                this.createSubview(this.profileRank, {
                    styles: "value",
                    group: "allianceProfileSection",
                    content: this.parent.allianceData.playerArray.length
                });
                this.clearfix()
            }
        };
        e.prototype.findRelationship = function () {
            var e = le.NEUTRAL,
                i;
            if (t.hasAlliance() && t.alliance.id === this.allianceID) {
                i = "member"
            } else {
                if (t.hasAlliance() && t.alliance.diplomacyToArray) {
                    for (var a = 0; a < t.alliance.diplomacyToArray.length; a++) {
                        var s = t.alliance.diplomacyToArray[a];
                        if (s && s.id === this.allianceID) {
                            e = s.relationship
                        }
                    }
                }
                i = ie.getRelationshipImage(e)
            }
            return {
                text: ie.getRelationshipString(e),
                icon: this.notify("rvHW39mY", this, {
                    imageName: i,
                    imageCategory: "diplomacy"
                }),
                relation: e
            }
        };
        e.prototype.toggleMenu = function () {
            if (this.menu) {
                this.menu.toggle()
            }
        };
        return e
    }(X.ProfileSection);
    r.Diplomacy = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("diplomacy", [])
        }
        t.prototype.init = function () {
            return this
        };
        t.prototype.dataUpdate = function (i, t) {
            if (t && t.diplomacyToArray) {
                this.diplomacy = this.sortData(t.diplomacyToArray);
                this.create();
                var e = this.controller.view.findSubviewByField("tag", "currentView");
                if (e && e.group === "AllianceDiplomacyList") {
                    e.dataUpdate(i, this.diplomacy)
                }
            }
        };
        t.prototype.sortData = function (t) {
            return t.sort(function (t, e) {
                if (t.rank > e.rank) {
                    return +1
                } else {
                    return -1
                }
            })
        };
        t.prototype.create = function () {
            if (!this.diplomacy) {
                return
            }
            var s = [{
                content: "Vassal / Feudal Lord",
                icon: "liege",
                relation: le.VASSAL
            }, {
                content: "Allies",
                icon: "ally",
                relation: le.ALLY
            }, {
                content: "NAP",
                icon: "nap",
                relation: le.NAP
            }, {
                content: "Enemy",
                icon: "enemy",
                relation: le.ENEMY
            }];
            this.deleteSubviewByField("group", "allianceDiplomacy");
            for (var i = 0; i < s.length; i++) {
                var e = s[i],
                    a = this.controller._filterDiplomacy(this.diplomacy, e.relation).length,
                    n = "diplomacyRow",
                    r = null,
                    t;
                if (a && a > 0) {
                    n += " clickable";
                    r = "%SnEYo%("
                }
                t = this.createSubview(this, {
                    styles: n,
                    group: "allianceDiplomacy",
                    data: {
                        relation: e.relation
                    },
                    clickMessage: r
                }, w);
                t.createSubview(t, {
                    content: this.notify("rvHW39mY", this, {
                        imageName: e.icon,
                        imageCategory: "diplomacy"
                    }),
                    styles: "typeIcon"
                });
                t.createSubview(t, {
                    content: translate(e.content) + " (" + a + ")"
                })
            }
            this.draw()
        };
        return t
    }(e);
    r.DiplomacyList = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("rows");
            this.addRequired("relation");
            this.addOption("group", "AllianceDiplomacyList", true);
            this.addOption("perPage", 30);
            this.setOptions(e)
        }
        t.prototype.dataUpdate = function (e, t) {
            this.rows = this.controller._filterDiplomacy(t, this.relation);
            this.deleteAllSubviews();
            this.create();
            this.draw()
        };
        t.prototype.create = function () {
            this.table = this.createSubview(this, {
                group: "allianceDiplomacy",
                styles: "diplomacyTable",
                pageItems: this.perPage,
                rowClass: r.DiplomacyRow,
                nextButtonClickMessage: "znVUVdoN"
            }, De);
            this.table.dataUpdate(null, this.rows)
        };
        return t
    }(e);
    r.DiplomacyRow = function (i) {
        utils.__extends(e, i);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addRequired("relationship");
            this.addOption("points", "");
            this.addOption("rank", "");
            this.setOptions(t);
            this.addOption("allianceData", t);
            this.addOption("styles", "viewSection row dimplomacy", true)
        }
        e.prototype.create = function () {
            var i = t.hasAlliancePermission(h.DIPLOMATIC_RELATIONS),
                n = ie.getRelationshipImage(this.relationship),
                a = null,
                s = null,
                e = "col icon";
            if (i) {
                a = utils.bind(this.toggleMenu, this);
                e = e += " clickable";
                s = translate("New diplomacy relationship")
            }
            this.diplomacyContainer = this.createContainer();
            this.createSubview(this.diplomacyContainer, {
                styles: e,
                content: this.notify("rvHW39mY", this, {
                    imageName: n,
                    imageCategory: "diplomacy"
                }),
                clickCallback: a,
                hover: s,
                addClass: false
            }, l);
            this.createSubview(this.diplomacyContainer, {
                styles: "col name clickable",
                content: utils.truncate(this.name, 25),
                data: {
                    alliance: this.allianceData
                },
                clickMessage: "xRy_eCwl"
            });
            this.createSubview(this.diplomacyContainer, {
                styles: "col points",
                content: this.points
            });
            this.createSubview(this.diplomacyContainer, {
                styles: "col rank",
                content: this.rank
            });
            if (i) {
                this.menu = this.createSubview(this.diplomacyContainer, {
                    currentRelationship: this.relationship,
                    allianceID: this.allianceData.id
                }, r.RelationshipMenu)
            }
            this.clearfix()
        };
        e.prototype.toggleMenu = function () {
            if (this.menu) {
                this.menu.toggle()
            }
        };
        return e
    }(e);
    r.RelationshipMenu = function (i) {
        utils.__extends(t, i);
        var e = [{
            name: "Vassal / Feudal Lord",
            relation: le.VASSAL
        }, {
            name: "Allies",
            relation: le.ALLY
        }, {
            name: "NAP",
            relation: le.NAP
        }, {
            name: "Enemy",
            relation: le.ENEMY
        }, {
            name: "Neutral",
            relation: le.NEUTRAL
        }];

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("currentRelationship");
            this.addRequired("allianceID");
            this.addOption("hidden", true, true);
            this.addOption("styles", "relationship dropdown", true);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.deleteAllSubviews();
            for (var a = 0; a < e.length; a++) {
                var i = e[a],
                    s = "row clickable",
                    n = ie.getRelationshipImage(i.relation),
                    t;
                if (this.currentRelationship == i.relation) {
                    s += " current"
                }
                t = this.createSubview(this, {
                    styles: s,
                    data: {
                        diplomaticValue: i.relation,
                        id: this.allianceID
                    },
                    clickMessage: "z8RhS)KL"
                });
                t.createSubview(t, {
                    content: translate(i.name),
                    styles: "name"
                });
                t.createSubview(t, {
                    content: this.notify("rvHW39mY", this, {
                        imageName: n,
                        imageCategory: "diplomacy"
                    }),
                    styles: "icon"
                });
                t.clearfix()
            }
        };
        t.prototype.toggle = function () {
            return this.hidden ? this.show() : this.hide()
        };
        return t
    }(e);
    r.InvitationManager.View = function (i) {
        utils.__extends(e, i);

        function e(t, i) {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.dataUpdate = function (t, e) {
            this.create();
            this.draw()
        };
        e.prototype.create = function () {
            this.deleteSubviewByField("group", "invitationManager");
            var e = t.allianceInvitations || [];
            this.createSubview(this, {}, r.InvitationManager.CreateAllianceForm);
            if (t.allianceInvitations.length) {
                this.createSubview(this, {
                    invitations: e
                }, r.InvitationManager.InvitationList)
            }
        };
        return e
    }(e);
    r.InvitationManager.CreateAllianceForm = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("group", "invitationManager", true);
            this.addOption("name", "createNewAlliance", true);
            this.addOption("styles", "viewSection newAlliance", true)
        }
        t.prototype.create = function () {
            var t = this.createContainer();
            t.createSubview(t, {
                title: translate("Alliance")
            }, I);
            this.input = t.createSubview(t, {
                minLength: u.allianceNameLengthMin,
                maxLength: u.allianceNameLengthMax,
                caption: "Rename Habitat"
            }, O.Input);
            t.createSubview(t, {
                name: "createAllianceControl",
                styles: "create button",
                content: translate("Form"),
                clickMessage: "GTD%-q(j"
            })
        };
        return t
    }(e);
    r.InvitationManager.InvitationList = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("invitations", []);
            this.addOption("group", "invitationManager", true);
            this.setOptions(e);
            this.addOption("styles", "viewSection invitationList", true);
            this.addOption("name", "allianceInvitationList", true)
        }
        t.prototype.create = function () {
            if (!this.invitations || !this.invitations.length) {
                return
            }
            this.deleteSubviewByField("group", "InvitationList");
            var t = this.createContainer({
                group: "InvitationList"
            });
            this.table = t.createSubview(t, {
                rowClass: r.InvitationManager.InvitationRow
            }, G);
            this.table.dataUpdate(null, this.invitations)
        };
        return t
    }(e);
    r.InvitationManager.InvitationRow = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("allianceID", e.id || -1);
            this.addOption("allianceName", e.name || "");
            this.addOption("points", 0);
            this.setOptions(e);
            this.addOption("styles", "invitationRow", true);
            this.addOption("name", "InvitationRow", true)
        }
        t.prototype.create = function () {
            this.createSubview(this, {
                content: this.notify("rvHW39mY", this, {
                    imageName: "buttonAlliance",
                    imageCategory: "icons"
                }),
                styles: "col allianceIcon"
            });
            this.createSubview(this, {
                content: utils.truncate(this.allianceName, 22),
                styles: "col allianceName clickable",
                clickMessage: "xRy_eCwl",
                data: {
                    alliance: {
                        id: this.allianceID,
                        name: this.allianceName
                    }
                }
            });
            this.createSubview(this, {
                content: this.points,
                styles: "col alliancePoints"
            });
            this.createSubview(this, {
                content: this.notify("rvHW39mY", this, {
                    imageName: "permissionTrueColored",
                    imageCategory: "browserIcons"
                }),
                name: "acceptAlliance",
                styles: "col accept button",
                clickMessage: "9SVA_8Y1"
            });
            this.createSubview(this, {
                content: this.notify("rvHW39mY", this, {
                    imageName: "permissionFalseColored",
                    imageCategory: "browserIcons"
                }),
                name: "declineAlliance",
                styles: "col decline button",
                clickMessage: "QI2S&vvz"
            });
            this.createSubview(this, {
                styles: "clearfix",
                content: ""
            })
        };
        return t
    }(e);
    r.Invitations = function (i) {
        utils.__extends(e, i);

        function e(t, i) {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.init = function () {
            return this
        };
        e.prototype.dataUpdate = function (t, e) {
            this.create();
            this.draw()
        };
        e.prototype.create = function () {
            var a = t.allianceInvitations || [],
                e, s, i;
            this.deleteSubviewByField("group", "AllianceInvitationSection");
            if (a.length) {
                this.createSubview(this, {
                    content: translate("Invitations to other alliances"),
                    group: "AllianceInvitationSection",
                    styles: "title wood-hl"
                });
                s = this.createSubview(this, {
                    group: "AllianceInvitationSection",
                    invitations: a
                }, r.InvitationManager.InvitationList);
                this.draw()
            }
            if (t.hasAlliance()) {
                e = t.alliance.invitedPlayerArray || [];
                if (e.length) {
                    this.createSubview(this, {
                        content: translate("Invitations"),
                        styles: "title wood-hl",
                        group: "AllianceInvitationSection"
                    });
                    i = this.createSubview(this, {
                        group: "AllianceInvitationSection",
                        styles: "viewSection sent invitationList",
                        rowClass: r.SentInvitationRow
                    }, G);
                    i.dataUpdate(null, e)
                }
            }
            if (!s && !i) {
                this.createSubview(this, {
                    group: "AllianceInvitationSection",
                    content: translate("No Invitations"),
                    styles: "wood-hl"
                })
            }
        };
        return e
    }(e);
    r.SentInvitationRow = function (a) {
        utils.__extends(i, a);

        function i(e, t) {
            i.__super__.constructor.apply(this, arguments);
            this.addOption("playerID", t.id || -1);
            this.addOption("nick", "");
            this.addOption("points", "");
            this.addOption("rank", "");
            this.addOption("styles", "invitationRow");
            this.setOptions(t);
            this.addOption("playerData", t)
        }
        i.prototype.create = function () {
            this.invitationTable = this.createSubview(this, {
                styles: "tablerow clickable"
            }, w);
            var i = new e(this.controller, {
                parent: this,
                styles: "col nickname"
            });
            i.playerData = this.playerData;
            if (t.hasAlliancePermission(h.INVITE_PLAYER)) {
                i.createSubview(this.invitationTable, {
                    content: this.notify("rvHW39mY", this, {
                        imageName: "permissionFalseColored",
                        imageCategory: "browserIcons"
                    }),
                    name: "cancelInvite",
                    styles: "cancel",
                    clickMessage: "vHQXxThA"
                })
            }
            i.createSubview(this.invitationTable, {
                content: utils.truncate(this.nick, 25),
                styles: "col nickname",
                data: {
                    id: this.playerID
                },
                clickMessage: "PPJepePU"
            });
            this.addSubview(i);
            this.createSubview(this.invitationTable, {
                content: this.points,
                styles: "col points"
            });
            this.createSubview(this.invitationTable, {
                styles: "clearfix",
                content: ""
            })
        };
        return i
    }(e);
    r.Members = function (a) {
        utils.__extends(i, a);

        function i(a, e) {
            i.__super__.constructor.apply(this, arguments);
            this.addOption("active", false, true);
            this.addOption("canDismiss", !! t.hasAlliancePermission(h.DISMISS_PLAYER));
            this.addOption("canMassMail", !! t.hasAlliancePermission(h.MASS_MAIL));
            this.setOptions(e)
        }
        i.prototype.dataUpdate = function (e, t) {
            this.data = this._sortData(t);
            if (this.buttons) {
                this.deleteSortControls();
                this.deleteEditControls();
                this.addSortControls();
                this.buttons.clearfix();
                this.addEditControls();
                this.buttons.draw()
            }
            if (this.table) {
                this.table.dataUpdate(e, t)
            } else {
                this.create()
            }
        };
        i.prototype._sortData = function (i) {
            var s = i.playerArray,
                a, e, t;
            a = this.controller ? this.controller.memberSortingType : "name";
            if (a === "name") {
                t = "name"
            } else if (a === "points") {
                t = "points"
            } else {
                t = "alliancePermission"
            }
            e = s.sort(function (e, i) {
                var a = +e[t],
                    s = +i[t];
                if (a > s) {
                    return -1
                } else if (a < s) {
                    return +1
                } else {
                    return e.nick > i.nick ? +1 : -1
                }
            });
            if (this.controller.memberSortingDirection === "desc") {
                e = e.reverse()
            }
            i.playerArray = e;
            return i
        };
        i.prototype.init = function () {
            if (!this.active) {
                this.active = true;
                this.create()
            }
            return this
        };
        i.prototype.create = function () {
            if (!this.data || !this.active) {
                return
            }
            this.buttons = this.createSubview(this, {
                name: "buttons",
                styles: "buttons"
            });
            this.addSortControls();
            this.buttons.clearfix();
            this.addEditControls();
            var t = new e(this.controller, {
                parent: this,
                content: "",
                styles: "clearfix"
            });
            this.addSubview(t);
            this.table = this.createSubview(this, {
                styles: "memberTableWrapper",
                rowClass: r.MemberRow,
                pageItems: this.controller.itemsPerPage,
                prevButtonClickMessage: "YxkFBRtG",
                nextButtonClickMessage: "SDBv6Kf9"
            }, r.MemberTable);
            this.table.dataUpdate(null, this.data);
            this.addSubview(this.table);
            this._managePaginationControls()
        };
        i.prototype.deleteEditControls = function () {
            this.buttons.deleteSubviewByField("tag", "editControl")
        };
        i.prototype.addEditControls = function () {
            if (!this.canMassMail) {
                return
            }
            this.createSubview(this.buttons, {
                styles: "checkAll",
                content: "<input type='checkbox' checked='true'>",
                clickMessage: "1y0Q-dze",
                tag: "editControl"
            }, O.Element);
            this.createSubview(this.buttons, {
                content: translate("Send mass mail"),
                styles: "massMailButton",
                clickMessage: "dbDnWFP_",
                tag: "editControl"
            }, l)
        };
        i.prototype.addSortControls = function () {
            var t = "sort asc";
            var e = "sort desc";
            var i = this.controller.view.id;
            if (this.controller.memberSortingDirection === "asc") {
                t += " active"
            } else {
                e += " active"
            }
            this.sortButton = this.createSubview(this.buttons, {
                icon: false,
                iconCategory: "icons",
                content: translate("alliance.sort." + this.controller.memberSortingType),
                clickMessage: "BvgxKpaW",
                styles: "searchTypeSelector",
                tag: "sortControl"
            }, k);
            this.sortTypeMenu = this.createSubview(this.controller.view, {
                dropdownSelector: "#" + i + " .sort.dropdown",
                chooserButtonSelector: "#" + i + " .searchTypeSelector",
                itemSelector: "sortDropdownItem",
                selectedItemID: this.controller.memberSortingType,
                hidden: true,
                tag: "sortControl"
            }, r.SortMenu);
            this.createSubview(this.buttons, {
                content: "<span class='shell'></span>",
                styles: t,
                name: "sortAsc",
                tag: "sortControl",
                clickMessage: "TqBLYo--"
            });
            this.createSubview(this.buttons, {
                content: "<span class='shell'></span>",
                styles: e,
                name: "sortDesc",
                tag: "sortControl",
                clickMessage: "Jp-DMK5U"
            });
            this.buttons.clearfix();
            this.buttons.draw()
        };
        i.prototype.deleteSortControls = function () {
            this.buttons.deleteSubviewByField("tag", "sortControl");
            this.controller.view.deleteSubviewByField("tag", "sortControl")
        };
        i.prototype.createTableHeader = function () {
            var e = this.canDismiss ? "nickname edit" : "nickname";
            var t = this.createSubview(this, {
                styles: "tableheader"
            }, w);
            this.createSubview(t, {
                styles: e,
                content: translate("Nickname")
            });
            this.createSubview(t, {
                styles: "points",
                content: translate("Points")
            });
            this.createSubview(t, {
                styles: "rank",
                content: translate("Ranking")
            });
            return t
        };
        i.prototype._managePaginationControls = function () {
            var t = this.findSubviewByName("nextButton"),
                e = this.findSubviewByName("prevButton"),
                i = !this.data || this.data.playerArray.length < this.controller.itemsPerPage ? "hide" : "show";
            if (t) {
                t[i]()
            }
            if (e) {
                e[i]()
            }
        };
        return i
    }(e);
    r.SortMenu = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.styleArray.push("sort alliance dropdown");
            this.addOption("itemSelector", "sortDropdownItem");
            this.addOption("dropdownSelector", "type");
            this.addOption("selectMessage", "Ck231(jS");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.deleteSubviewByField("name", "sortDropdown");
            var i = this.createSubview(this, {
                name: "sortDropdown"
            });
            var a = ["name", "points", "rights"];
            for (var e = 0, s = a.length; e < s; e++) {
                var t = a[e];
                i.createSubview(i, {
                    content: translate("alliance.sort." + t),
                    name: "sortItem_" + t,
                    styles: "sortDropdownItem",
                    tag: "sortDropdownItem",
                    attributes: {
                        "data-primary-key": t
                    },
                    data: {
                        type: t
                    },
                    clickMessage: this.selectMessage
                })
            }
        };
        return t
    }(n.PopUp);
    r.MemberTable = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (i, e) {
            if (e === null) {
                return
            }
            this.data = e.playerArray || [];
            t.__super__.dataUpdate.call(this, i, this.data)
        };
        return t
    }(De);
    r.MemberRow = function (a) {
        utils.__extends(i, a);

        function i(s, e) {
            i.__super__.constructor.apply(this, arguments);
            e.playerID = e.id;
            this.addOption("nick", "");
            this.addOption("playerID", "");
            this.addOption("points", "");
            this.addOption("rank", "");
            this.addOption("alliancePermission", "-1");
            this.setOptions(e);
            this.addOption("canDismiss", this.parent.parent.canDismiss);
            this.addOption("canMassMail", this.parent.parent.canMassMail);
            this.addOption("playerData", e);
            var a = "tablerow allianceMemberRow";
            if (+this.playerID === +t.id) {
                a += " highlight clickable"
            } else {
                a += " clickable"
            }
            this.clickMessage = "PPJepePU";
            if (this.canDismiss || this.canMassMail) {
                a += " editable"
            }
            this.addOption("styles", a);
            this.addOption("ranking", +e.rowID + 1)
        }
        i.prototype.create = function () {
            i.__super__.create.apply(this, arguments);
            var n = [{
                name: "permission",
                content: this.permissionImageFor(this.alliancePermission)
            }, {
                name: "nickname",
                content: utils.sanitize(this.nick)
            }, {
                name: "points",
                content: this.points
            }],
                r;
            if (this.canDismiss || this.canMassMail) {
                if (+this.playerID !== +t.id) {
                    this.checkbox = this.createSubview(this, {
                        styles: "rowSection checkboxContainer",
                        name: "checkbox_" + this.playerID,
                        data: {
                            playerID: +this.playerID,
                            nick: this.nick
                        },
                        checked: true
                    }, O.Checkbox)
                } else {
                    this.createSubview(this, {
                        styles: "rowSection checkboxContainer empty"
                    })
                }
            }
            for (var s = 0; s < n.length; s++) {
                var a = n[s];
                this.createSubview(this, {
                    name: utils.sanitize(a.name),
                    styles: "rowSection " + a.name,
                    content: a.content,
                    data: this.playerData,
                    clickMessage: a.clickMessage || null
                })
            }
            r = new e(this.controller, {
                parent: this,
                content: "",
                styles: "clearfix"
            });
            this.addSubview(r)
        };
        i.prototype.permissionImageFor = function (t) {
            function e(t) {
                var e = t;
                while (e !== 0) {
                    t = e;
                    e = t & t - 1
                }
                return t
            }
            t = e(parseInt(t, 10)).toString();
            if (parseInt(t, 10) < -1) {
                t = "32"
            }
            if (parseInt(t, 10) > 32) {
                t = "32"
            }
            if (t.length === 1) {
                t = "0" + t
            }
            return this.notify("rvHW39mY", this, {
                imageName: "permission" + t,
                imageCategory: "icons"
            })
        };
        return i
    }(w);
    r.Profile = function (i) {
        utils.__extends(e, i);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.dataUpdate = function (e, t) {
            this.data = t;
            this.addToolbar();
            this.create();
            this.draw()
        };
        e.prototype.init = function () {
            return this
        };
        e.prototype.addToolbar = function () {
            this.deleteSubviewByField("name", "buttons");
            this.buttons = this.createSubview(this, {
                name: "buttons",
                styles: "buttons"
            });
            if (t.hasAlliance()) {
                this.createSubview(this.buttons, {
                    group: "profileButtonControl",
                    name: "copyLink",
                    content: this.notify("rvHW39mY", this, {
                        imageName: "pasteBoardAllianceWhite",
                        imageCategory: "icons"
                    }),
                    hover: translate("Copy alliance link"),
                    clickMessage: "u4U2NRjL",
                    data: {
                        alliance: t.alliance.id
                    },
                    styles: "icon"
                }, l)
            }
            if (t.hasAlliancePermission(h.DISBAND_ALLIANCE)) {
                this.createSubview(this.buttons, {
                    group: "profileButtonControl",
                    content: translate("Disband Alliance"),
                    clickMessage: "vbtoLC_A"
                }, l)
            }
            this.createSubview(this.buttons, {
                group: "profileButtonControl",
                content: translate("Leave alliace"),
                clickMessage: "-jbriJhv"
            }, l);
            this.buttons.clearfix()
        };
        e.prototype.create = function () {
            if (!this.data) {
                return
            }
            this.deleteSubviewByField("group", "allianceProfile", true);
            this.createSubview(this, {
                group: "allianceProfile",
                name: "allianceProfileName",
                dataAttribute: "name",
                buttonMessage: "QOCIbojJ",
                saveMessage: "p(xcr1Tm",
                styles: "profile",
                minMessage: translate("Please enter alliance name"),
                maxLength: u.allianceNameLengthMax || u.nameMaximumLength,
                minLength: u.allianceNameLengthMin || u.nameMinimumLength
            }, r.ProfileSection);
            this.createSubview(this, {
                group: "allianceProfile",
                name: "allianceProfileDescription",
                dataAttribute: "descriptionText",
                buttonMessage: "B(sCcsCu",
                saveMessage: "ANkjLFnO",
                maxLength: +u.maxAllianceDescriptionLength,
                minLength: false,
                allowBlank: true,
                inputType: "text",
                title: "Description",
                descriptionSection: true
            }, r.ProfileSection)
        };
        e.prototype.paste = function (e) {
            var t = this.findSubviewByName("allianceProfileDescription");
            if (t) {
                t.paste(e)
            }
        };
        return e
    }(e);
    r.ProfileSection = function (i) {
        utils.__extends(e, i);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addOption("title", "");
            this.addOption("descriptionSection", false);
            this.addOption("dataAttribute", false);
            this.addOption("titleString", "");
            this.addOption("buttonMessage", "");
            this.addOption("saveMessage", "");
            this.addOption("inputType", "string");
            this.addOption("maxLength", 31);
            this.addOption("minLength", 0);
            this.addOption("allowBlank", false);
            this.addOption("minMessage", false);
            this.setOptions(t);
            this.styles += " allianceDetailSection"
        }
        e.prototype.create = function () {
            e.__super__.create.apply(this, arguments);
            var a, r = "editFieldForm descriptionForm";
            this.deleteSubviewByField("group", "allianceProfileSection");
            var o = this.descriptionSection ? translate(this.title) : this.parent.data.name;
            this.createSubview(this, {
                title: utils.sanitize(o),
                name: "allianceProfileHeader",
                group: "allianceProfileSection"
            }, I);
            if (this.descriptionSection) {
                a = this.parent.data[this.dataAttribute] || translate("No Description")
            } else {
                a = ""
            }
            var s = utils.sanitize(a);
            s = s.replace(/&lt;br\/>/g, "<br/>");
            this.createSubview(this, {
                group: "allianceProfileSection",
                styles: "content",
                name: "content_" + this.name,
                content: s,
                handleLinks: true
            });
            var u = t.hasAlliancePermission(h.DIPLOMATIC_RELATIONS) || t.hasAlliancePermission(h.DISBAND_ALLIANCE) || t.hasAlliancePermission(h.ALL);
            if (this.buttonMessage && this.saveMessage && this.inputType && u) {
                var c = {
                    min: this.minMessage,
                    blank: ""
                };
                var d = this.descriptionSection ? "Description" : "Change Name";
                var n = {
                    group: "allianceProfileSection",
                    name: "form_" + this.name,
                    styles: r,
                    caption: d,
                    inputType: this.inputType,
                    originalValue: this.parent.data[this.dataAttribute],
                    saveMessage: this.saveMessage,
                    cancelMessage: this.buttonMessage,
                    useDefaultIcons: true,
                    allowBlank: this.allowBlank,
                    maxLength: this.maxLength,
                    minLength: this.minLength,
                    validationMessages: c,
                    hidden: true
                };
                if (this.descriptionSection) {
                    n.pasteLinkButton = true
                }
                var p = this.createSubview(this, n, O.EditFieldForm);
                p.clearfix();
                this.createSubview(this, {
                    group: "allianceProfileSection",
                    name: "editButton_" + this.name,
                    styles: "edit button",
                    hover: translate("Edit"),
                    content: this.notify("rvHW39mY", this, {
                        imageName: "edit",
                        imageCategory: "icons"
                    }),
                    clickMessage: this.buttonMessage
                }, l)
            }
            if (!this.descriptionSection) {
                var i = this.createSubview(this, {
                    styles: "section",
                    name: "profileDetailsWrapper",
                    group: "allianceProfileSection"
                });
                this.createSubview(i, {
                    styles: "label",
                    group: "allianceProfileSection",
                    content: translate("Points") + ":"
                });
                this.createSubview(i, {
                    styles: "value",
                    group: "allianceProfileSection",
                    content: this.parent.data.points
                });
                i.clearfix();
                this.createSubview(i, {
                    styles: "label",
                    group: "allianceProfileSection",
                    content: translate("Average points") + ":"
                });
                this.createSubview(i, {
                    styles: "value",
                    group: "allianceProfileSection",
                    content: this.parent.data.pointsAverage
                });
                i.clearfix();
                this.createSubview(i, {
                    styles: "label",
                    group: "allianceProfileSection",
                    content: translate("Rank") + ":"
                });
                this.createSubview(i, {
                    styles: "value",
                    group: "allianceProfileSection",
                    content: this.parent.data.rank
                });
                i.clearfix();
                this.createSubview(i, {
                    styles: "label",
                    group: "allianceProfileSection",
                    content: translate("Members") + ":"
                });
                this.createSubview(i, {
                    styles: "value",
                    group: "allianceProfileSection",
                    content: this.parent.data.playerArray.length
                });
                i.clearfix()
            }
        };
        e.prototype.paste = function (e) {
            var t = this.findSubviewByName("form_" + this.name);
            if (t) {
                t.input.addContent(e)
            }
        };
        return e
    }(w);
    r.Rankings = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (e, t) {
            if (!t.displayedRanking) {
                return
            }
            this.templateData = t;
            this._createRankingControls(t);
            this.create();
            this.draw();
            window.setTimeout(function () {
                var t = $("#" + this.controller.view.mainContentContainer.id),
                    e = t.find(".rankingTable .tablerow .owner");
                if (e.length > 0) {
                    var i = t.height(),
                        a = t.find(".rankingTable .tablerow .owner").position().top;
                    t.scrollTop(a - i / 2)
                }
            }.bind(this), 250)
        };
        t.prototype.init = function () {
            if (!this.initiated) {
                this.initiated = true
            }
            return this
        };
        t.prototype._createRankingControls = function (t) {
            if (!this.topButtonsContainer) {
                this.topButtonsContainer = this.controller.view.createSubview(this.controller.view.mainContentContainer.parent, {});
                this.topButtonsContainer.draw();
                this.topButtons = this.controller.view.createSubview(this.topButtonsContainer, {
                    template: "allianceRankingControls",
                    templateData: t,
                    attachTo: this.topButtonsContainer
                }, RankingListControls);
                this.topButtons.draw()
            }
        };
        t.prototype._removeRankingControls = function () {
            if (!this.topButtonsContainer) {
                return
            }
            this.topButtonsContainer.removeFromDOM();
            this.controller.view.deleteSubviewChain(this.topButtonsContainer);
            this.topButtonsContainer = null;
            this.topButtons = null
        };
        t.prototype.show = function () {
            $("#" + this.attachTo.id).parents(".win").addClass("lightBG").addClass("rankingsView");
            if (!this.templateData) {
                this.controller.datasource.getRankings({
                    type: "points",
                    view: this
                });
                return
            }
            this._createRankingControls(this.templateData);
            this.create();
            this.draw();
            t.__super__.show.apply(this, arguments)
        };
        t.prototype.hide = function () {
            $("#" + this.attachTo.id).parents(".win").removeClass("lightBG").removeClass("rankingsView");
            this._removeRankingControls();
            t.__super__.hide.apply(this, arguments)
        };
        return t
    }(RankingList);
    r.Reports = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("reports", [])
        }
        t.prototype.init = function () {
            if (!this.reports.length) {
                this.controller.datasource.loadReports(this)
            }
            return this
        };
        t.prototype.dataUpdate = function (t, e) {};
        t.prototype.create = function () {
            if (!this.reports.length) {
                return
            }
            this.deleteSubviewByField("group", "allianceReportsGroup");
            this.buttons = this.createSubview(this, {
                group: "allianceReportsGroup",
                name: "buttons",
                styles: "buttons"
            });
            this.table = this.createSubview(this, {
                group: "allianceReportsGroup",
                pageItems: 10,
                rowClass: r.ReportRow,
                nextButtonClickMessage: "XNiQvVWH"
            }, De);
            this.table.dataUpdate(null, this.reports);
            this._managePaginationControls()
        };
        t.prototype.saveReports = function (i) {
            var t = [];
            for (var e = 0; e < i.length; e++) {
                var a = new s.AllianceReport(i[e]);
                t.push(a)
            }
            t.sort(function (t, e) {
                if (t.date.getTime() > e.date.getTime()) {
                    return -1
                } else {
                    return +1
                }
            });
            this.reports = t;
            this.create();
            this.draw()
        };
        t.prototype._managePaginationControls = function () {
            var t = this.findSubviewByName("nextButton"),
                e = this.findSubviewByName("prevButton"),
                i = !this.reports || this.reports.length < this.controller.itemsPerPage ? "hide" : "show";
            if (t) {
                t[i]()
            }
            if (e) {
                e[i]()
            }
        };
        return t
    }(e);
    r.ReportRow = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("type");
            this.addRequired("date");
            this.addRequired("title");
            this.addOption("sendingPlayer", null);
            this.addOption("receivingPlayer", null);
            this.addOption("destinationAlliance", null);
            this.addOption("newAlliancePermission", null);
            this.addOption("oldAlliancePermission", null);
            this.addOption("newDiplomaticRelation", null);
            this.addOption("oldDiplomaticRelation", null);
            this.addOption("rowID", -1);
            this.addOption("clickMessage", "Qs9W5r7L", true);
            this.setOptions(e);
            this.styles += " reportRow clickable"
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            this.createSubview(this, {
                styles: "arrow",
                content: this.notify("rvHW39mY", this, {
                    imageName: "clickableArrow",
                    imageCategory: "browserIcons"
                })
            });
            this.createSubview(this, {
                name: "title",
                styles: "title",
                content: this.title
            });
            this.createSubview(this, {
                name: "senderName",
                styles: "sender",
                content: utils.sanitize(this.sendingPlayer.nick)
            });
            this.createSubview(this, {
                name: "date",
                styles: "date",
                content: _.conv.toDate(this.date)
            })
        };
        return t
    }(w);
    r.ReportDetails.View = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("type");
            this.addRequired("date");
            this.addRequired("title");
            this.addOption("sendingPlayer", null);
            this.addOption("receivingPlayer", null);
            this.addOption("destinationAlliance", null);
            this.addOption("newAlliancePermission", null);
            this.addOption("oldAlliancePermission", null);
            this.addOption("newDiplomaticRelation", null);
            this.addOption("oldDiplomaticRelation", null);
            this.setOptions(e);
            this.styleArray.push("reportDetails")
        }
        t.prototype.create = function () {
            this.deleteAllSubviews();
            var t = this.createContainer();
            this.headerContainer = this.createSubview(t, {
                detail: utils.date.formatDateTime(this.date),
                title: this.title
            }, I);
            if (this.sendingPlayer && this.sendingPlayer.id) {
                this.createSubview(t, {
                    name: "sender",
                    title: translate("From Player") + ":",
                    playerData: this.sendingPlayer
                }, r.ReportDetails.Player)
            }
            if (this.receivingPlayer && this.receivingPlayer.id) {
                this.createSubview(t, {
                    name: "reciever",
                    title: translate("To Player") + ":",
                    playerData: this.receivingPlayer
                }, r.ReportDetails.Player)
            }
            if (this.destinationAlliance) {
                this.createSubview(t, {
                    name: "destAlliance",
                    allianceData: this.destinationAlliance,
                    oldRelationship: this.oldDiplomaticRelation,
                    newRelationship: this.newDiplomaticRelation
                }, r.ReportDetails.Alliance)
            }
            if (this.newAlliancePermission && (this.oldAlliancePermission || this.oldAlliancePermission === 0)) {
                this.createSubview(this, {
                    name: "alliancePermissionChanges",
                    newPermission: this.newAlliancePermission,
                    oldPermission: this.oldAlliancePermission
                }, r.ReportDetails.Permissions)
            }
        };
        return t
    }(e);
    r.ReportDetails.Player = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("playerData", {});
            this.addOption("title", "");
            this.addOption("styles", "player", true);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.createSubview(this, {
                content: utils.sanitize(this.title),
                styles: "reportTitle"
            });
            this.createSubview(this, {
                content: utils.sanitize(this.playerData.nick),
                styles: "playerName reportDetail clickable",
                data: this.playerData,
                clickMessage: "PPJepePU"
            })
        };
        return t
    }(e);
    r.ReportDetails.Alliance = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("allianceData");
            this.addOption("oldRelationship", null);
            this.addOption("newRelationship", null);
            this.addOption("styles", "alliance", true);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var t, e, i = ie.getRelationshipImage(this.oldRelationship),
                a = ie.getRelationshipImage(this.newRelationship);
            this.allianceContainer = this.createSubview(this, {
                styles: "allianceContainer"
            });
            this.createSubview(this.allianceContainer, {
                content: translate("For alliance") + ":",
                styles: "reportTitle"
            });
            this.createSubview(this.allianceContainer, {
                content: utils.sanitize(this.allianceData.name),
                data: this.allianceData,
                clickMessage: "lLPtbYRm",
                styles: "allianceName reportDetail clickable"
            });
            this.diplomacyContainer = this.createSubview(this, {
                styles: "diplomacyContainer"
            });
            t = this.createSubview(this.diplomacyContainer, {
                styles: "relation old"
            });
            this.createSubview(t, {
                styles: "icon",
                content: this.notify("rvHW39mY", this, {
                    imageName: i,
                    imageCategory: "diplomacy"
                })
            });
            this.createSubview(t, {
                styles: "reportTitle",
                content: translate("Old diplomacy relationship") + ":"
            });
            this.createSubview(t, {
                styles: "reportDetail",
                content: ie.getRelationshipString(this.oldRelationship)
            });
            t.clearfix();
            e = this.createSubview(this.diplomacyContainer, {
                styles: "relation new"
            });
            this.createSubview(e, {
                styles: "icon",
                content: this.notify("rvHW39mY", this, {
                    imageName: a,
                    imageCategory: "diplomacy"
                })
            });
            this.createSubview(e, {
                styles: "reportTitle",
                content: translate("New diplomacy relationship") + ":"
            });
            this.createSubview(e, {
                styles: "reportDetail",
                content: ie.getRelationshipString(this.newRelationship)
            });
            e.clearfix()
        };
        return t
    }(e);
    r.ReportDetails.Permissions = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("newPermission");
            this.addRequired("oldPermission");
            this.addOption("styles", "permissionChanges", true);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            var n = [{
                name: "Invite Player",
                mask: h.INVITE_PLAYER
            }, {
                name: "Dismiss Player",
                mask: h.DISMISS_PLAYER
            }, {
                name: "Moderate Forum",
                mask: h.MODERATE_FORUM
            }, {
                name: "Mass Mail",
                mask: h.MASS_MAIL
            }, {
                name: "Diplomacy Relationship",
                mask: h.DIPLOMATIC_RELATIONS
            }, {
                name: "Change Permission",
                mask: h.PLAYER_PERMISSIONS
            }, {
                name: "Disband Alliance",
                mask: h.DISBAND_ALLIANCE
            }];
            var e = this.createSubview(this, {
                styles: "header"
            });
            this.createSubview(e, {
                content: translate("Permission"),
                styles: "col title"
            });
            this.createSubview(e, {
                content: translate("Old Permissions"),
                styles: "col old"
            });
            this.createSubview(e, {
                content: translate("New Permissions"),
                styles: "col new"
            });
            e.clearfix();
            for (var a = 0; a < n.length; a++) {
                var s = n[a],
                    r = this.oldPermission & s.mask ? "permissionTrueColored" : "permissionFalseColored",
                    o = this.newPermission & s.mask ? "permissionTrueColored" : "permissionFalseColored",
                    i;
                i = this.createSubview(this, {
                    styles: "row"
                });
                this.createSubview(i, {
                    styles: "title",
                    content: translate(s.name)
                });
                this.createSubview(i, {
                    styles: "oldPermission",
                    content: this.notify("rvHW39mY", this, {
                        imageName: r,
                        imageCategory: "browserIcons"
                    })
                });
                this.createSubview(i, {
                    styles: "newPermission",
                    content: this.notify("rvHW39mY", this, {
                        imageName: o,
                        imageCategory: "browserIcons"
                    })
                })
            }
            this.clearfix()
        };
        return t
    }(w);
    r.Rights = function (i) {
        utils.__extends(e, i);

        function e(t, i) {
            e.__super__.constructor.apply(this, arguments);
            this.addOption("opened", false);
            this.addOption("created", false)
        }
        e.prototype.dataUpdate = function (e, t) {
            this.data = t;
            if (!this.created) {
                this.addToolbarControls();
                this.create()
            } else {
                this.table.dataUpdate(null, this.data)
            }
        };
        e.prototype.init = function () {
            if (!this.opened) {
                this.opened = true
            }
            return this
        };
        e.prototype.addToolbarControls = function () {
            this.buttons = this.createSubview(this, {
                name: "buttons",
                styles: "buttons"
            });
            this.createSubview(this.buttons, {
                name: "prevButton",
                content: translate("Previous"),
                hover: translate("Previous"),
                clickMessage: "l)Xw5FGt"
            }, l);
            this.createSubview(this.buttons, {
                name: "nextButton",
                content: translate("Next"),
                hover: translate("Next"),
                clickMessage: "rcBQ5NUE"
            }, l)
        };
        e.prototype.create = function () {
            if (!this.data || !this.active) {
                return
            }
            this.headerContainer = this.createSubview(this, {}, w);
            this.createSubview(this.headerContainer, {
                styles: "tableHeader",
                content: this._headerContent()
            });
            this.applyEditControls();
            this.table = this.createSubview(this, {
                styles: "memberTableWrapper",
                rowClass: r.RightRow,
                pageItems: this.controller.itemsPerPage
            }, r.RightsTable);
            this.table.dataUpdate(null, this.data);
            this._managePaginationControls();
            this.created = true
        };
        e.prototype.applyEditControls = function () {
            if (t.hasAlliancePermission(h.PLAYER_PERMISSIONS)) {
                this.createSubview(this.buttons, {
                    hidden: true,
                    name: "savePermissions",
                    content: translate("Verify"),
                    hover: translate("Verify"),
                    clickMessage: "Ep6_KyUN"
                }, l)
            }
        };
        e.prototype._headerContent = function () {
            var t = "<span class='nickname'>" + translate("Nickname") + "</span>";
            t += "<span class='invitePlayer' title='" + translate("Invite Player") + "'>IP</span>";
            t += "<span class='dismissPlayer' title='" + translate("Dismiss Player") + "'>DM</span>";
            t += "<span class='moderateForum' title='" + translate("Moderate Forum") + "'>MF</span>";
            t += "<span class='massMail' title='" + translate("Mass Mail") + "'>MM</span>";
            t += "<span class='diplomaticRelations' title='" + translate("Diplomacy Relatioship") + "'>DR</span>";
            t += "<span class='playerPermissions' title='" + translate("Change Permission") + "'>CR</span>";
            t += "<span class='disbandAlliance' title='" + translate("Disband Alliance") + "'>DA</span>";
            t += "<div class='clearfix'></div>";
            return t
        };
        e.prototype._managePaginationControls = function () {
            var t = this.buttons.findSubviewByName("nextButton"),
                e = this.buttons.findSubviewByName("prevButton"),
                i = !this.data || this.data.playerArray.length < this.controller.itemsPerPage ? "hide" : "show";
            if (t) {
                t[i]()
            }
            if (e) {
                e[i]()
            }
        };
        return e
    }(e);
    r.RightsTable = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (i, e) {
            if (!e) {
                return
            }
            this.data = e.playerArray || [];
            t.__super__.dataUpdate.call(this, i, this.data)
        };
        return t
    }(pi);
    r.RightRow = function (a) {
        utils.__extends(i, a);

        function i(s, e) {
            i.__super__.constructor.apply(this, arguments);
            this.editted = false;
            this.icons = [];
            e.playerID = e.id;
            this.addOption("nick", "");
            this.addOption("playerID", "");
            this.addOption("alliancePermission", "");
            this.setOptions(e);
            var a = this.playerID == t.id ? "allianceRightRow owner" : "allianceRightRow";
            this.addOption("styles", a, true);
            this.create()
        }
        i.prototype.create = function () {
            this.topContainer = this.createSubview(this, {}, w);
            this.rightsContainer = this.createSubview(this.topContainer, {
                styles: "rightsContainer"
            }, e);
            var n = [{
                name: "invitePlayer",
                mask: h.INVITE_PLAYER
            }, {
                name: "massMail",
                mask: h.MASS_MAIL
            }, {
                name: "moderateForum",
                mask: h.MODERATE_FORUM
            }, {
                name: "diplomaticRelations",
                mask: h.DIPLOMATIC_RELATIONS
            }, {
                name: "dismissPlayer",
                mask: h.DISMISS_PLAYER
            }, {
                name: "changeRights",
                mask: h.PLAYER_PERMISSIONS
            }, {
                name: "disbandAlliance",
                mask: h.DISBAND_ALLIANCE
            }],
                c = new e(this.controller, {
                    name: "nickname",
                    content: this.nick,
                    parent: this.rightsContainer,
                    styles: "rowSection nickname"
                }),
                o;
            this.addSubview(c);
            for (var a = 0; a < n.length; a++) {
                var i = n[a],
                    l = null,
                    u = "rowSection " + i.name,
                    s;
                if (t.hasAlliancePermission(h.PLAYER_PERMISSIONS)) {
                    l = "jgHuhXJr";
                    u += " edittable"
                }
                s = new r.RightIcon(this.controller, {
                    parent: this.rightsContainer,
                    name: i.name,
                    styles: u,
                    permissionMask: i.mask,
                    currentStatus: !! (this.alliancePermission & i.mask),
                    content: this.permissionImageFor(i.mask),
                    clickMessage: l
                });
                this.icons.push(s);
                this.addSubview(s)
            }
            o = new e(this.controller, {
                parent: this,
                content: "",
                styles: "clearfix"
            });
            this.addSubview(o)
        };
        i.prototype.reset = function (i) {
            this.editted = false;
            this.alliancePermission = i;
            for (var t = 0; t < this.icons.length; t++) {
                var e = this.icons[t];
                e.content = this.permissionImageFor(e.permissionMask)
            }
        };
        i.prototype.permissionImageFor = function (t) {
            var e = this.alliancePermission & t || this.alliancePermission == h.ALL,
                i = e ? "permissionTrueColored" : "permissionFalseColored";
            return this.notify("rvHW39mY", this, {
                imageName: i,
                imageCategory: "browserIcons"
            })
        };
        i.prototype.confimEdit = function () {
            this.editted = true;
            this.notify("0FxTgyJ8", this)
        };
        return i
    }(e);
    r.RightIcon = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("permissionMask", "");
            this.addOption("currentStatus", "");
            this.setOptions(e)
        }
        t.prototype.toggle = function () {
            var t = !this.currentStatus;
            this.content = this.edittedImage(t);
            this.currentStatus = t;
            this.parent.parent.parent.parent.confimEdit();
            return this
        };
        t.prototype.edittedImage = function (t) {
            var e = t ? "permissionTrue" : "permissionFalse";
            return this.notify("rvHW39mY", this, {
                imageName: e,
                imageCategory: "browserIcons"
            })
        };
        return t
    }(e);
    r.TabButton = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("icon");
            this.addOption("hoverText");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var t = this.notify("rvHW39mY", this, {
                imageName: this.icon,
                imageCategory: "tabs"
            }),
                e = this.notify("rvHW39mY", this, {
                    imageName: this.icon + "_active",
                    imageCategory: "tabs"
                }),
                i = $(t).attr("src"),
                a = $(e).attr("src");
            this.attributes = {
                "data-default": i,
                "data-active": a
            };
            this.createSubview(this, {
                styles: "tab-content",
                content: t,
                lazyHoverClass: p.TabHover,
                lazyHoverOptions: {
                    name: this.hoverText
                }
            }, N)
        };
        return t
    }(e);
    r.Window = function () {
        "use strict";
        utils.__extends(e, n.Window);

        function e(t, i) {
            e.__super__.constructor.apply(this, arguments);
            this.sections = [];
            this.toolbarControls = [];
            this.allianceActive = true;
            this.slideLock = false;
            this.create()
        }
        e.prototype.draw = function () {
            e.__super__.draw.apply(this, arguments);
            Se("alliance")
        };
        e.prototype.reset = function () {
            this.data = t.alliance;
            this.clean();
            this.notifySections();
            this.draw();
            if (this.sections.length > 1) {
                this.controller.currentView = null;
                this.controller.toggleViews("allianceProfile")
            }
        };
        e.prototype.clean = function () {
            this.sections = [];
            this.removeClass("shorty");
            this.content.deleteAllSubviews();
            this.contentContainer.deleteSubviewByField("name", "allianceTabBar");
            this.create()
        };
        e.prototype.create = function () {
            if (t.hasAlliance()) {
                this.addTabbar();
                this.addAlliance()
            } else {
                this.allianceActive = false;
                this.addInvitationManager()
            }
        };
        e.prototype.notifySections = function () {
            for (var t = 0; t < this.sections.length; t++) {
                var e = this.sections[t];
                e.dataUpdate(this.datasource, this.data)
            }
        };
        e.prototype.dataUpdate = function (e, t) {
            if (t) {
                this.data = t;
                this.notifySections()
            }
            if (t === null && this.allianceInvitationManager) {
                this.allianceInvitationManager.dataUpdate(e, t)
            }
        };
        e.prototype.removeTabbar = function () {
            this.subviews[0].deleteSubviewByField("name", "allianceTabBar");
            this.tabbar = undefined
        };
        e.prototype.addTabbar = function () {
            this.tabbar = this.createSubview(this.contentContainer, {
                styles: "tabbar alliance",
                name: "allianceTabBar"
            });
            var i = [{
                name: "profile",
                icon: "alliance",
                contentString: "Profile",
                clickMessage: "1-pbxv-g",
                hoverText: "Alliance Profile"
            }, {
                name: "members",
                icon: "member_list",
                contentString: "Members",
                clickMessage: ")q1Eomu(",
                hoverText: "Members"
            }, {
                name: "reports",
                icon: "reports",
                contentString: "Reports",
                clickMessage: "4-PupHg4",
                hoverText: "Alliance Report"
            }, {
                name: "diplomacy",
                icon: "diplomacy",
                contentString: "Diplomacy",
                clickMessage: "a4mM8Jww",
                hoverText: "Diplomacy Relatioship"
            }, {
                name: "invitations",
                icon: "invites",
                contentString: "Invitations",
                clickMessage: "FrFbTGa1",
                hoverText: "Invitations"
            }, {
                name: "rankings",
                icon: "alliance_ranklist",
                contentString: "Ranking",
                clickMessage: "qXcHrBVE",
                hoverText: "Ranking"
            }];
            for (var e = 0; e < i.length; e++) {
                var t = i[e],
                    a;
                a = this.tabbar.createSubview(this.tabbar, {
                    styles: "tab",
                    icon: t.icon,
                    name: t.name,
                    clickMessage: t.clickMessage,
                    data: t.data || null,
                    hoverText: translate(t.hoverText)
                }, r.TabButton);
                this.toolbarControls.push(a)
            }
            this.tabbar.clearfix();
            this.tabbar.draw()
        };
        e.prototype.addAlliance = function () {
            var t, e, i, a, s, n;
            this.container = this.createSubview(this.content, {
                name: "allianceContainer",
                styles: "allianceContainer",
                tag: "currentView"
            });
            t = this.createSubview(this.container, {
                name: "allianceProfile",
                styles: "profile"
            }, r.Profile);
            e = this.createSubview(this.container, {
                hidden: true,
                name: "allianceMembers",
                styles: "members"
            }, r.Members);
            i = this.createSubview(this.container, {
                hidden: true,
                name: "allianceReports",
                styles: "reports"
            }, r.Reports);
            a = this.createSubview(this.container, {
                hidden: true,
                name: "allianceDiplomacy",
                styles: "diplomacy"
            }, r.Diplomacy);
            s = this.createSubview(this.container, {
                hidden: true,
                name: "allianceInvitations",
                styles: "invitations"
            }, r.Invitations);
            n = this.createSubview(this.container, {
                hidden: true,
                name: "allianceRankings",
                styles: "rankings",
                template: "ranking"
            }, r.Rankings, null, false);
            this._addSections(t, e, i, a, s, n)
        };
        e.prototype.addInvitationManager = function () {
            this.allianceInvitationManager = this.createSubview(this.content, {
                name: "allianceInvitationManager",
                hidden: false,
                styles: "manager"
            }, r.InvitationManager.View);
            this.addClass("shorty");
            this._addSections(this.allianceInvitationManager)
        };
        e.prototype._addSections = function () {
            for (var t = 0; t < arguments.length; t++) {
                var e = arguments[t];
                this.sections.push(e)
            }
        };
        return e
    }(n.Window);
    d.BuildingList = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addOption("group", "HabitatBuildingList");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var t = this.habitat.habitatBuildingUpgrades;
            if (t.length > 0) {
                this.createSubview(this, {
                    styles: "title wood-hl",
                    content: translate("Running Building Upgrades")
                });
                this.createSubview(this, {
                    styles: "buildingUpgrade",
                    upgrades: t,
                    buildings: this.habitat.habitatBuildings,
                    showImage: true,
                    clickMessage: "rkg0%f3x"
                }, L.UpgradeTable, null, false);
                this.clearfix();
                this.createSubview(this, {
                    styles: "wood-hl lastUpgradeMessage",
                    content: translate("Last upgrade done %@", t[t.length - 1].getCompletionDate())
                });
                this.createSubview(this, {
                    styles: "frame-hr"
                })
            }
            this.createSubview(this, {
                styles: "title wood-hl",
                content: translate("Habitat Buildings")
            });
            this.createSubview(this, {
                buildings: this.habitat.habitatBuildings,
                upgrades: this.habitat.habitatBuildingUpgrades,
                build: true,
                habitat: this.habitat,
                showNames: true,
                clickMessage: "rkg0%f3x",
                styles: "fixedBuildingList"
            }, L.Table, null, false)
        };
        t.prototype.dataUpdate = function (e, t) {
            this.setOptions(t);
            this.deleteAllSubviews();
            this.create()
        };
        return t
    }(e);
    d.DataSource = function (a) {
        utils.__extends(e, a);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.modelUpdate = function () {
            this.setData(t.habitate)
        };
        e.prototype.upgradeBuilding = function (t, e, a) {
            i.request("HabitatAction/upgradeBuilding", {
                habitatID: t,
                primaryKey: e.toString(),
                paymentGranted: a
            }, this.triggerModelUpdate, this)
        };
        e.prototype.finishBuilding = function (t) {
            i.request("HabitatAction/finishBuildingUpgrade", {
                id: t.toString()
            }, this.triggerModelUpdate, this)
        };
        e.prototype.speedupBuilding = function (t) {
            i.request("HabitatAction/speedupBuildingUpgrade", {
                id: t.toString()
            }, this.triggerModelUpdate, this)
        };
        e.prototype.speedUpUnit = function (t) {
            i.request("HabitatAction/speedupBuildUnit", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.finishUnit = function (t) {
            i.request("HabitatAction/finishBuildUnit", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.changeHabitatName = function (e, t) {
            t = i.stripHTML(t);
            i.request("HabitatAction/changeHabitatName", {
                habitatID: e,
                name: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.recruit = function (t, e, a, s) {
            var n = {
                habitatID: t,
                primaryKey: e,
                paymentGranted: s,
                orderAmount: a
            };
            i.request("HabitatAction/buildUnit", n, this.triggerModelUpdate, this)
        };
        e.prototype.executeMission = function (t, e) {
            i.request("HabitatAction/executeMission", {
                habitatID: t,
                primaryKey: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.executeAllMissions = function (t, e) {
            i.request("HabitatAction/executeMissions", {
                habitatID: t,
                primaryKeys: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.speedupMission = function (t, e) {
            i.request("HabitatAction/speedupMission", {
                habitatID: t,
                primaryKey: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.speedupAllMissions = function (t, e) {
            i.request("HabitatAction/speedupMission", {
                habitatID: t,
                primaryKeys: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.rememberMission = function (i, t, e) {
            if (i) {
                return z.DataSource.prototype.addMission(t, e)
            } else {
                return z.DataSource.prototype.removeMission(t, e)
            }
        };
        e.prototype.getMissionsForHabitat = function (t) {
            return z.DataSource.prototype.getMissionArray(t)
        };
        e.prototype.executeMultipleMissions = function (e, i) {
            var t = {};
            t[e] = i;
            z.DataSource.prototype.executeAllMissionsForHabitats.call(this, t)
        };
        e.prototype.executeResearch = function (t, e) {
            i.request("HabitatAction/researchKnowledge", {
                habitatID: t,
                primaryKey: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.speedupResearch = function (t, e) {
            i.request("HabitatAction/speedupKnowledgeResearch", {
                habitatID: t,
                primaryKey: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.finishResearch = function (t, e) {
            i.request("HabitatAction/finishKnowledgeResearch", {
                habitatID: t,
                primaryKey: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.tradeResources = function (t, e, a, s) {
            var n = "{" + $.param(s).replace(/&/g, "; ") + ";}";
            var r = "{" + $.param(a).replace(/&/g, "; ") + ";}";
            var o = {
                habitatID: t,
                wantedResourceID: e,
                resourceDictionary: r,
                unitDictionary: n
            };
            i.request("MarketAction/tradeResources", o, this.triggerModelUpdate, this)
        };
        e.prototype.recallTroops = function (t, e, a) {
            var s = "{" + $.param(a).replace(/&/g, "; ") + ";}";
            var n = {
                sourceHabitatID: t,
                destinationHabitatID: e,
                transitType: v.TRANSIT_DEFENSE,
                unitDictionary: s
            };
            i.request("TransitAction/startTransit", n, this.triggerModelUpdate, this)
        };
        e.prototype.recallAllTroops = function (t) {
            var e = {
                sourceHabitatID: t
            };
            i.request("TransitAction/returnAllUnits", e, this.triggerModelUpdate, this)
        };
        e.prototype.sendResources = function (a, s, n, t, e) {
            t = "{" + $.param(t).replace(/&/g, "; ") + ";}";
            e = "{" + $.param(e).replace(/&/g, "; ") + ";}";
            i.request("TransitAction/startTransit", {
                sourceHabitatID: a,
                destinationHabitatID: s,
                transitType: n,
                unitDictionary: t,
                resourceDictionary: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.defendHabitat = function (e, a, s, t) {
            t = "{" + $.param(t).replace(/&/g, "; ") + ";}";
            i.request("TransitAction/startTransit", {
                sourceHabitatID: e,
                destinationHabitatID: a,
                transitType: s,
                unitDictionary: t
            }, this.triggerModelUpdate, this)
        };
        return e
    }(m);
    d.DetailView = function (a) {
        utils.__extends(i, e);

        function i(e, t) {
            i.__super__.constructor.apply(this, arguments);
            this.addRequired("building");
            this.addRequired("habitat");
            this.addOption("group", "HabitatDetailView");
            this.addOption("isPreview", false);
            this.setOptions(t);
            this.buildingName = this.building.identifier.split("/")[0]
        }
        i.prototype.create = function () {
            this.toolbar = new Ge(this.controller, {
                parent: this
            });
            this.headContainer = this.createSubview(this, {
                styles: "buildingImg"
            }, w);
            this.createBuilding();
            var t = this.findStorageForBuilding(this.buildingName);
            if (!t) {
                return
            }
            this.saveState();
            this.headContainer = this.createSubview(this, {
                styles: "buildingImg habitatStorageBuildingElement"
            }, w);
            this.building = this.findStorageForBuilding(this.buildingName);
            this.buildingName = this.building.identifier.split("/")[0];
            this.createBuilding();
            this.restoreState()
        };
        i.prototype.saveState = function () {
            this._savedContainer = this.headContaine;
            this._savedBuilding = this.building;
            this._savedBuildingName = this.buildingName
        };
        i.prototype.restoreState = function () {
            this.headContainer = this._savedContainer;
            this.building = this._savedBuilding;
            this.buildingName = this._savedBuildingName;
            this._savedBuilding = undefined;
            this._savedBuildingName = undefined;
            this._savedContainer = undefined
        };
        i.prototype.createBuilding = function () {
            this.addNameAndImage();
            var t = this.determineUpgrades(this.building.primaryKey, []);
            this.addNextLevel(t);
            this.addUpgrades(t);
            this.addDescription();
            this.headContainer.clearfix();
            if (this.building.storeResources) {
                this.addPeople()
            }
            if (utils.dict.size(this.building.generateResources) > 0) {
                this.addGenerateResources()
            }
            if (this.building.modifier !== null) {
                this.addModifier()
            }
            if (this.building.marketDistance) {
                this.addMarketDistance()
            }
            if (this.buildingName === "Wall") {
                this.addBattleValues()
            }
            if (this.building.missions && this.building.missions.length) {
                this.addMissions()
            }
            if (this.building.knowledges && this.building.knowledges.length) {
                this.addKnowledges()
            }
            if (this.building.marketRates !== null) {
                this.addMarketRates(this.buildingName)
            }
            this.recruitTable = null;
            if (this.building.units && Object.keys(this.building.units).length) {
                this.addRecruiting()
            }
            if (this.building.functions !== null) {
                this.addFunctions()
            }
        };
        i.prototype.findStorageForBuilding = function (i) {
            var t = this.habitat.habitatBuildings;
            for (var a in t) {
                var e = t[a].building,
                    s = e.identifier.split("/")[0];
                if (wi[i] === s) {
                    return e
                }
            }
            return null
        };
        i.prototype.addNameAndImage = function () {
            var t = this.notify("rvHW39mY", this, {
                imageName: this.buildingName,
                imageCategory: "buildings"
            });
            this.createSubview(this.headContainer, {
                title: translate(this.buildingName),
                detail: translate("Level") + " " + this.building.level
            }, I);
            this.buildingImageContainer = this.createSubview(this.headContainer, {
                content: t,
                data: this.buildingName,
                styles: "currentLevelImage"
            })
        };
        i.prototype.addDescription = function () {
            this.createSubview(this.headContainer, {
                styles: "buildingDescription",
                content: "<span>" + this.building.getDescription() + "</span>"
            })
        };
        i.prototype.getNextUpgradeForID = function (e) {
            for (var t = 0; t < this.habitat.habitatBuildingUpgrades.length; t++) {
                if (this.habitat.habitatBuildingUpgrades[t].buildingTarget.upgradeOf == e) {
                    return this.habitat.habitatBuildingUpgrades[t]
                }
            }
            return null
        };
        i.prototype.determineUpgrades = function (i, t) {
            var e = this.getNextUpgradeForID(i);
            if (e) {
                t.push(e);
                this.determineUpgrades(e.buildingTarget.primaryKey, t)
            }
            return t
        };
        i.prototype.addNextLevel = function (e) {
            var i = this.building;
            for (var t = 0; t < e.length; t++) {
                if (e[t].buildingTarget.primaryKey > i.primaryKey) {
                    i = e[t].buildingTarget
                }
            }
            this.createSubview(this.buildingImageContainer, {
                name: "habitatNextLevelPreviewElement",
                styles: "habitatNextLevelPreviewElement",
                building: i,
                habitat: this.habitat
            }, d.NextLevelPreviewElement)
        };
        i.prototype.addUpgrades = function (t) {
            this.createSubview(this, {
                styles: "buildingUpgrade habitatNextLevelPreviewElement external",
                upgrades: t,
                buildings: this.habitat.habitatBuildings,
                showImage: true,
                noClickMessage: true,
                useElementContainer: true
            }, L.UpgradeTable, null, false)
        };
        i.prototype.addPeople = function () {
            for (var e = 0; e < this.building.storeResources.length; e++) {
                var i = this.building.storeResources[e];
                this.peopleDisplay = this.createSubview(this.headContainer, {
                    styles: "peopleDisplay"
                });
                this.createSubview(this.peopleDisplay, {
                    styles: "icon",
                    content: this.notify("rvHW39mY", this, {
                        imageName: i.toString(),
                        imageCategory: "resources"
                    })
                });
                this.peopleContainer = this.createSubview(this.peopleDisplay, {
                    styles: "peopleContainer"
                });
                this.createSubview(this.peopleContainer, {
                    styles: "resourceName",
                    element: "span",
                    content: translate(he[i])
                });
                this.createSubview(this.peopleContainer, {
                    styles: "amount",
                    element: "span",
                    content: t.habitate[this.controller.name].stats.resources[i] + " / " + this.building.storeAmount
                });
                this.peopleDisplay.clearfix()
            }
        };
        i.prototype.addGenerateResources = function () {
            this.generateResources = this.createSubview(this.headContainer, {
                styles: "generateResources"
            });
            var t = this;
            $.each(t.building.generateResources, function (e, a) {
                t.createSubview(t.generateResources, {
                    styles: "icon",
                    content: t.notify("rvHW39mY", t, {
                        imageName: e,
                        imageCategory: "resources"
                    })
                });
                t.valueContainer = t.createSubview(t.generateResources, {
                    styles: "valueContainer"
                });
                t.createSubview(t.valueContainer, {
                    styles: "resourceName",
                    element: "span",
                    content: translate(he[e])
                });
                var i = t.habitat.habitatResources[e].generateAmount;
                t.createSubview(t.valueContainer, {
                    styles: "amount",
                    element: "span",
                    content: i + " / h"
                })
            })
        };
        i.prototype.addModifier = function () {
            for (var t in this.building.modifier) {
                this.createSubview(this.headContainer, {
                    styles: "modifierInfo",
                    content: "<span>" + translate("Modifier") + ": </span><span class='modInfoText'>" + translate(this.building.modifier[t].identifier) + "</span>"
                })
            }
        };
        i.prototype.addMarketDistance = function () {
            this.createSubview(this.headContainer, {
                styles: "modifierInfo",
                content: "<span>" + translate("Distance to market") + ": </span><span class='modInfoText'>" + translate("%d fields", this.building.marketDistance) + "</span>"
            })
        };
        i.prototype.addBattleValues = function () {
            this.createSubview(this, {
                name: "habitatBattleValueElement",
                styles: "habitatBattleValueElement",
                building: this.building
            }, d.BattleValueElement)
        };
        i.prototype.addMissions = function () {
            this.createSubview(this, {
                name: "missionContainer",
                styles: "missionContainer",
                habitat: this.habitat,
                building: this.building,
                preselectedMissions: _.storeLocal.getJSON(_.storeLocal.createKey("m", this.habitat.id)),
                clickMessage: null,
                checkbox: true
            }, z.HabitatList)
        };
        i.prototype.addKnowledges = function () {
            this.createSubview(this, {
                name: "knowledgeContainer",
                styles: "knowledgeContainer",
                habitat: this.habitat,
                building: this.building
            }, Le.HabitatList)
        };
        i.prototype.addMarketRates = function (t) {
            this.createSubview(this, {
                building: this.building,
                itemClickMessage: "Lc2cSnAE",
                styles: "tradableItems " + t
            }, oi);
            this.clearfix()
        };
        i.prototype.addRecruiting = function () {
            if (this.habitat.habitatUnitOrders.length !== 0) {
                this.createSubview(this, {
                    habitat: this.habitat,
                    unitOrders: this.habitat.habitatUnitOrders,
                    buttonClickMessage: "upM8yCA)",
                    styles: "pendingUnits",
                    useContainers: true
                }, b.RecruitOrderTable)
            }
            var t = this.createContainer({
                styles: "recruitUnits"
            });
            t.createSubview(t, {
                habitat: this.habitat,
                units: this.building.units,
                inputFields: true,
                amountOnly: true,
                maxButtonClickMessage: "rbmpbo3v",
                inputChangeMessage: "OKZN3p9O",
                recruitButtonClickMessage: "nJyLJ65E",
                imageClickMessage: "qeuhDHxS",
                sessionPrefix: "habitat"
            }, b.RecruitTable)
        };
        i.prototype.addFunctions = function () {
            for (var e in this.building.functions) {
                if (this.building.functions[e] == "Treasure Chest") {
                    this.goldSection = this.createSubview(this, {
                        name: "buyGoldButton",
                        styles: "buyGoldButton",
                        icon: je.GOLD.toString(),
                        iconCategory: "resources",
                        content: translate("Gold"),
                        detail: t.gold,
                        clickMessage: "kZbiWxRm"
                    }, k)
                }
                if (this.building.functions[e] == "Rename Habitat") {
                    this.changeNameArea = this.createSubview(this, {
                        name: "castleName",
                        edit: false,
                        habitat: this.habitat,
                        buttonText: translate("Edit")
                    }, d.ChangeName)
                }
            }
        };
        return i
    }(e);
    d.OverviewEntry = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            e.styles = (e.styles || "") + (" castleListItem " + this.styles);
            this.addRequired("habitat");
            this.addOption("sourceHabitat", null);
            this.addOption("selectable", false);
            this.addOption("selectClickMessage", null);
            this.addOption("resourceFilter", []);
            this.addOption("unitFilter", []);
            this.addOption("infoAreaMessage", null);
            this.addOption("useContainers", true);
            this.addOption("showPoints", true);
            this.addOption("hoverInMessage", null);
            this.addOption("hoverOutMessage", null);
            this.addOption("actionClickMessage", null);
            this.addOption("displayActions", false);
            this.addOption("useBasicActions", false);
            this.addOption("freeCastle", false);
            this.addOption("centerIcon", false);
            this.addOption("titleTruncation", false);
            this.setOptions(e);
            if (this.selectable === true && this.selectClickMessage === null) {
                this.selectClickMessage = this.clickMessage
            } else if (this.displayActions) {
                this.actionClickMessage = this.clickMessage;
                this.clickMessage = null
            }
            if (this.useContainers) {
                this.containerClickMessage = this.clickMessage;
                this.clickMessage = null
            }
            this.checkbox = null;
            this.hovers = false
        }
        t.prototype.hoverIn = function (e) {
            var t = e.data;
            t.hovers = true;
            t.notify(t.hoverInMessage, t);
            e.preventDefault();
            return false
        };
        t.prototype.hoverOut = function (e) {
            var t = e.data;
            t.hovers = false;
            t.notify(t.hoverOutMessage, t);
            e.preventDefault();
            return false
        };
        t.prototype.attachToDOM = function (i) {
            t.__super__.attachToDOM.apply(this, arguments);
            if (!this.hoverInMessage) {
                return
            }
            var e = $("#" + this.id);
            e.on("mouseenter", this, this.hoverIn);
            e.on("mouseleave", this, this.hoverOut)
        };
        t.prototype.create = function () {
            var t;
            var c;
            if (this.useContainers) {
                t = this.createSubview(this, {
                    name: "habitatContainer",
                    styles: "habitatContainer",
                    data: this.habitat.id,
                    clickMessage: this.containerClickMessage,
                    propagateClicks: false
                }, w)
            } else {
                t = this
            }
            var s = this.habitat.isHabitatAttacked(),
                i = "buttonCastle",
                n = null,
                r = s ? "reportIcons" : "icons",
                e = null,
                o;
            if (this.centerIcon) {
                n = ")-VQldtr";
                i = "centerHabitat"
            }
            if (s) {
                i = "AttackWarning"
            }
            if (this.showPoints) {
                e = translate("%d Points", this.habitat.points)
            }
            if (this.sourceHabitat) {
                e = "<span class='points'>" + e + "</span>";
                if (this.sourceHabitat) {
                    var a;
                    if (this.habitat.distanceToSource) {
                        a = this.habitat.distanceToSource
                    } else {
                        a = this.habitat.distanceTo(this.sourceHabitat.mapX, this.sourceHabitat.mapY)
                    }
                    e += "<span class='fields'>" + translate("%d fields", a) + "</span>"
                }
            }
            var l = this.titleTruncation ? utils.dynamicTitle(this.habitat.name, this.titleTruncation) : this.habitat.name;
            o = this.createSubview(t, {
                title: l,
                detail: e,
                icon: this.notify("rvHW39mY", this, {
                    imageName: i,
                    imageCategory: r
                }),
                iconClickMessage: n,
                data: this.habitat
            }, I);
            var u = this.habitat.getColorClass();
            t.createSubview(t, {
                habitat: this.habitat,
                name: "castleOverviewTable",
                styles: "castleOverviewTable resources",
                resourceColors: u,
                showNames: false,
                clickMessage: null,
                generate: true,
                negativePeople: true,
                filterArray: this.resourceFilter
            }, P.Table);
            t.createSubview(t, {
                name: "castleOverviewTable",
                styles: "castleOverviewTable units",
                units: this.habitat.stats.units.own,
                showNames: false,
                clickMessage: null,
                filterArray: this.unitFilter
            }, b.Table, null, false);
            if (this.infoAreaMessage !== null) {
                if (this.notify(this.infoAreaMessage, this, {
                    habitat: this.habitat,
                    parent: t
                }) === false) {
                    this.selectable = false
                }
            }
            if (this.selectable === true) {
                var h = !! this.selectClickMessage;
                this.checkbox = t.createSubview(t, {
                    styles: "castleOverviewCheckbox",
                    clickMessage: this.selectClickMessage,
                    fireClickMessage: h,
                    data: this.habitat.id
                }, O.Checkbox)
            } else if (this.displayActions) {
                this.renderActions(t);
                t.styleArray.splice(t.styleArray.indexOf("clickable"), 1)
            }
            this.clearfix()
        };
        t.prototype.renderActions = function (a) {
            var s = a.createSubview(a, {
                styles: "actions"
            });
            var t = [];
            if (!this.freeCastle) {
                t.push({
                    action: "sendDefense",
                    hover: "Defend Habitat",
                    icon: "transitDefenseWhite"
                });
                t.push({
                    action: "sendResources",
                    hover: "Send Resources",
                    icon: "transportWhite"
                })
            }
            if (!this.useBasicActions || this.freeCastle) {
                t.push({
                    action: "attack",
                    hover: "Attack Habitat",
                    icon: "transitAttackWhite"
                });
                t.push({
                    action: "sendSpy",
                    hover: "Send Spy",
                    icon: "transitSpyWhite"
                })
            }
            for (var e = 0; e < t.length; e++) {
                var i = t[e];
                s.createSubview(s, {
                    clickMessage: this.actionClickMessage,
                    data: {
                        action: i.action,
                        habitatID: this.habitat.id
                    },
                    content: this.notify("rvHW39mY", this, {
                        imageName: i.icon,
                        imageCategory: "icons"
                    }),
                    hover: translate(i.hover)
                }, l)
            }
        };
        t.prototype.select = function (t) {
            if (this.checkbox === null) {
                return
            }
            this.checkbox.check();
            if (typeof t != "undefined") {
                var e = this.findSubviewByName("habitatContainer");
                e.createSubview(e, {
                    content: t
                })
            }
        };
        t.prototype.greyOut = function () {
            this.setOptions({
                selectable: false,
                clickMessage: null,
                styles: this.styles + " disabledHabitatOverview"
            });
            this.containerClickMessage = this.clickMessage;
            if (this.selectable === true && this.selectClickMessage === null) {
                this.selectClickMessage = this.clickMessage
            }
            this.deleteAllSubviews();
            this.create();
            this.draw()
        };
        return t
    }(e);
    d.TransitList = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("transits");
            this.setOptions(e)
        }
        t.prototype.dataUpdate = function (e, t) {
            if (this.table && t) {
                if (t.habitat) {
                    t = {
                        transits: t.habitat.habitatTransits
                    }
                }
                this.transits = t.transits;
                this._update()
            }
        };
        t.prototype.create = function () {
            this.deleteSubviewByField("group", "HabitatTransit");
            this.titleText = this.createSubview(this, {
                styles: "wood-hl title",
                hidden: true,
                content: translate("Transits")
            });
            this.noTransits = this.createSubview(this, {
                content: translate("no transits"),
                hidden: true,
                styles: "title wood-hl"
            });
            this.table = this.createSubview(this, {
                rowClass: d.TransitRow,
                name: "HabitatTransitList",
                group: "HabitatTransit"
            }, G);
            this._update()
        };
        t.prototype._update = function () {
            if (this.transits.length > 0) {
                this.noTransits.hide();
                this.titleText.show();
                this.table.dataUpdate(null, this._sort(this.transits))
            } else {
                this.noTransits.show();
                this.titleText.hide();
                this.table.hide()
            }
        };
        t.prototype._sort = function (t) {
            return t.sort(function (t, e) {
                return t.destinationETA - e.destinationETA
            })
        };
        return t
    }(e);
    d.TransitRow = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.model = e;
            this.styles += " transitrow clickable";
            this.clickMessage = "JLA4)vG_"
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            var e = this.model.getIconData();
            this.createSubview(this, {
                styles: "icon",
                content: this.notify("rvHW39mY", this, e)
            });
            if (e.syncIconName) {
                this.createSubview(this, {
                    content: this.getImage(e.syncIconName, e.imageCategory),
                    clickMessage: "EmxE78NQ",
                    data: this.model
                }, l)
            }
            this.createSubview(this, {
                styles: "names",
                content: this.model.getTitle()
            });
            this.createSubview(this, {
                time: utils.date.setCountDownTime(this.model.destinationETA),
                showText: true,
                runningTimer: true,
                caption: this.model.formattedETA,
                styles: "timeleft",
                divider: " &mdash; "
            }, K)
        };
        return t
    }(w);
    d.TransitDetail = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("model");
            this.setOptions(e);
            this.styleArray.push("transitDetail")
        }

        function i(e) {
            var i = 0;
            for (var t = 0; t < e.length; t++) {
                var a = e[t];
                if (a.count > 0) {
                    i += a.count
                }
            }
            return i
        }
        t.prototype.create = function () {
            this.subview = [];
            if (this.model.destinationHabitat) {
                this.addHabitat({
                    type: "target",
                    habitat: this.model.destinationHabitat
                })
            }
            if (this.model.sourceHabitat) {
                this.addHabitat({
                    type: "source",
                    habitat: this.model.sourceHabitat
                })
            }
            if (this.model.resources && utils.dict.size(this.model.resources) > 0) {
                this.addResources()
            }
            if (this.model.units && this.model.units.length) {
                var t = i(this.model.units);
                if (t > 0) {
                    this.addUnits()
                }
            }
        };
        t.prototype.addHabitat = function (i) {
            var e = this.createContainer({
                styles: "habitat " + i.type
            }),
                t = i.habitat,
                a = null,
                s = null,
                n = null,
                o, l;
            o = i.type === "target" ? "Target habitat" : "Source habitat";
            if (t.id !== this.controller.view.habitat.id) {
                a = "fy%m)6d("
            }
            if (t.player) {
                s = "TfueoDRt"
            }
            if (t.player && t.player.hasAlliance()) {
                n = "CDwdD6%i"
            }
            l = r.Controller.findTransitRelation(t.player || {});
            this.createSubview(e, {
                title: translate(o),
                icon: this.notify("rvHW39mY", this, {
                    imageName: l,
                    imageCategory: "diplomacy"
                })
            }, I);
            this.habitatSection(e, {
                icon: "buttonCastle",
                type: i.type,
                text: utils.sanitize(t.name) + " (" + (t.points || "0") + ")",
                action: a,
                data: {
                    habitat: t
                }
            });
            if (t.player) {
                this.habitatSection(e, {
                    icon: "buttonPlayer",
                    text: utils.sanitize(t.player.nick) + " (" + (t.player.points || "0") + ")",
                    action: s,
                    data: {
                        playerID: t.player.id
                    }
                })
            } else {
                this.habitatSection(e, {
                    icon: "buttonPlayer",
                    text: translate("Outlaw") + " " + t.id
                })
            } if (t.player && t.player.hasAlliance()) {
                this.habitatSection(e, {
                    icon: "buttonAlliance",
                    text: utils.sanitize(t.player.alliance.name) + " (" + (t.player.alliance.points || "0") + ")",
                    action: n,
                    data: {
                        alliance: t.player.alliance
                    }
                })
            } else {
                this.habitatSection(e, {
                    icon: "buttonAlliance",
                    text: translate("No Alliance")
                })
            } if (i.type === "target") {
                this.habitatSection(e, {
                    icon: "transport",
                    text: this.model.formattedETA,
                    action: null,
                    styles: "eta"
                });
                this.addCountdown(e, this.model.destinationETA)
            }
        };
        t.prototype.addCountdown = function (t, e) {
            this.createSubview(t, {
                styles: "timeDivider",
                content: " &ndash; "
            });
            this.createSubview(t, {
                time: utils.date.setCountDownTime(e),
                showText: true,
                runningTimer: true,
                styles: "timeleft"
            }, K)
        };
        t.prototype.habitatSection = function (s, t) {
            var a = "habitatSection",
                i = {
                    imageName: "",
                    imageCategory: "icons"
                }, e;
            if (t.styles) {
                a += " " + t.styles
            }
            if (t.action) {
                a += " clickable"
            }
            e = this.createSubview(s, {
                styles: a,
                clickMessage: t.action || null,
                data: t.data || {}
            });
            if (t.icon) {
                i.imageName = t.icon;
                if (t.type === "target") {
                    i = this.model.getIconData()
                }
                e.createSubview(e, {
                    styles: "icon",
                    content: this.notify("rvHW39mY", this, {
                        imageName: i.imageName,
                        imageCategory: i.imageCategory
                    })
                })
            }
            e.createSubview(e, {
                styles: "detail",
                content: t.text
            })
        };
        t.prototype.addResources = function () {
            var t = this.createContainer({
                styles: "resources"
            }),
                e = this.model;
            this.createSubview(t, {
                title: translate("Resources")
            }, I);
            this.createSubview(t, {
                resources: e.resources
            }, P.Table)
        };
        t.prototype.addUnits = function () {
            var e = this.createContainer({
                styles: "units"
            }),
                i = this.model;
            this.createSubview(e, {
                title: translate("Transit units")
            }, I);
            for (var t = 0; t < i.units.length; t++) {
                var a = i.units[t];
                if (a.count > 0) {
                    this.createSubview(e, {
                        unit: a
                    }, d.TransitUnitElement)
                }
            }
        };
        return t
    }(e);
    d.TransitUnitElement = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("unit");
            this.setOptions(e);
            this.styleArray.push("unitElement")
        }
        t.prototype.create = function () {
            this.createSubview(this, {
                styles: "icon",
                content: this.notify("rvHW39mY", this, {
                    imageName: this.unit.primaryKey.toString(),
                    imageCategory: "units"
                })
            });
            this.createSubview(this, {
                content: this.unit.count,
                styles: "count"
            })
        };
        return t
    }(e);
    d.UnitList = function (a) {
        utils.__extends(i, e);

        function i(e, t) {
            i.__super__.constructor.apply(this, arguments);
            this.addRequired("habitatID");
            this.addOption("group", "HabitatUnitList");
            this.setOptions(t);
            this.styleArray.push("unitList")
        }
        i.prototype.create = function () {
            var d, s, c, h;
            var i = t.habitate[this.habitatID];
            var e;
            var n = {};
            n = i.getAttackingUnits();
            if (utils.dict.size(n) > 0) {
                e = this.createContainer({
                    data: {
                        habitat: i,
                        ownExternalTroops: false,
                        title: "Offending troops"
                    },
                    clickMessage: "C5ywrQ4I"
                });
                e.createSubview(e, {
                    title: translate("Offending troops")
                }, I);
                e.createSubview(e, {
                    name: "offendingUnitsTable",
                    styles: "",
                    units: n,
                    ownExternalTroops: false,
                    habitat: i
                }, b.Table)
            }
            var l = {};
            l = i.getAllDefendingUnits();
            if (utils.dict.size(l) > 0) {
                e = this.createContainer({
                    clickMessage: "C5ywrQ4I",
                    data: {
                        habitat: i,
                        ownExternalTroops: false,
                        title: "Defending troops"
                    }
                });
                e.createSubview(e, {
                    title: translate("Defending troops")
                }, I);
                e.createSubview(e, {
                    name: "ownUnitsTable",
                    styles: "",
                    units: l,
                    ownExternalTroops: false,
                    habitat: i
                }, b.Table)
            }
            var u = {};
            u = i.getExternDefendingUnits();
            if (utils.dict.size(u) > 0) {
                e = this.createContainer({
                    data: {
                        habitat: i,
                        ownExternalTroops: true,
                        title: "Outbound defending troops"
                    },
                    clickMessage: "C5ywrQ4I"
                });
                e.createSubview(e, {
                    title: translate("Outbound defending troops")
                }, I);
                e.createSubview(e, {
                    name: "outboubndDefendingUnitsTable",
                    styles: "",
                    units: u,
                    habitat: i
                }, b.Table)
            }
            var r = {};
            r = i.getExternAttackingUnits();
            if (utils.dict.size(r) > 0) {
                e = this.createContainer({
                    data: {
                        habitat: i,
                        ownExternalTroops: true,
                        title: "Outbound attacking troops"
                    },
                    clickMessage: "C5ywrQ4I"
                });
                e.createSubview(e, {
                    title: translate("Outbound attacking troops")
                }, I);
                e.createSubview(e, {
                    name: "outboubndAttackingUnitsTable",
                    styles: "",
                    units: r,
                    habitat: i
                }, b.Table)
            }
            if (i.habitatMissions.length > 0) {
                for (s = 0; s < i.habitatMissions.length; s++) {
                    var a = i.habitatMissions[s],
                        o;
                    o = new Te.HoverView(this.controller, {
                        missionPK: a.mission.primaryKey
                    });
                    o.create();
                    e = this.createContainer({
                        name: "missionList",
                        styles: "mission",
                        data: a.mission.unitConsumptions
                    });
                    e.createSubview(e, {
                        runningTimer: true,
                        time: Math.floor((a.complete - (new Date - W)) / 1e3)
                    }, K);
                    e.createSubview(e, {
                        title: translate(a.mission.identifier)
                    }, I);
                    e.createSubview(e, {
                        units: a.mission.unitConsumptions,
                        habitat: i,
                        styles: "missionUnits"
                    }, b.Table);
                    e.createSubview(e, {
                        hoverView: o,
                        content: this.notify("rvHW39mY", this, {
                            imageName: a.mission.identifier,
                            imageCategory: "missions"
                        }),
                        styles: "missionIcon"
                    }, N)
                }
            }
        };
        return i
    }(e);
    d.SingleHabitatUnitList = function (a) {
        utils.__extends(i, e);

        function i(e, t) {
            i.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addRequired("ownExternalTroops");
            this.addRequired("title");
            this.addOption("battleTypeFilter", []);
            this.addOption("group", "SingleHabitatUnitList");
            this.setOptions(t);
            this.styleArray.push("unitList details")
        }
        i.prototype.create = function () {
            var s;
            var m = [];
            var p = [];
            var _, S;
            var y = false;
            var h;
            var u, a;
            var i;
            var n = [];
            var e;
            if (this.ownExternalTroops) {
                for (e = 0; e < this.habitat.externalHabitatUnits.length; e++) {
                    if (this.habitat.externalHabitatUnits[e].battleType == C.ATTACKER) {
                        p[e] = this.habitat.externalHabitatUnits[e]
                    } else {
                        m[e] = this.habitat.externalHabitatUnits[e]
                    }
                }
                if (this.title == "Outbound attacking troops") {
                    s = p
                } else {
                    s = m
                }
            } else {
                s = this.habitat.habitatUnits
            }
            s.sort(function (t, e) {
                if (t.battleType < e.battleType) {
                    return -1
                } else {
                    return +1
                }
            });
            if (this.battleTypeFilter.length > 0) {
                for (e = 0; e < s.length; e++) {
                    if (this.battleTypeFilter.indexOf(s[e].battleType) != -1) {
                        n.push(s[e])
                    }
                }
                s = n;
                n = []
            }
            for (e = 0; e < s.length; e++) {
                if (typeof s[e] != "undefined") {
                    n[e] = s[e]
                }
            }
            if (s.length > 0 && s[0].battleType == C.OWN_HABITAT) {
                u = n.shift()
            }
            a = n;
            if (typeof u != "undefined") {
                i = this.createContainer();
                var w = getUnitsForUnitTable(u.units);
                this.title = "Defending troops";
                i.createSubview(i, {
                    title: translate(this.title)
                }, I);
                this.castleLink(i, u.sourceHabitat);
                i.createSubview(i, {
                    name: "ownUnitsTable",
                    styles: "clickable",
                    units: w,
                    clickMessage: null,
                    imageClickMessage: "qeuhDHxS",
                    habitat: this.habitat
                }, b.Table)
            }
            if (typeof a === "undefined") {
                return
            }
            a.sort(function (t, e) {
                if (t.sourceHabitat.name < e.sourceHabitat.name) {
                    return -1
                } else {
                    return +1
                }
            });
            for (e = 0; e < a.length; e++) {
                var r;
                if (this.ownExternalTroops) {
                    r = a[e].habitat
                } else {
                    r = a[e].sourceHabitat
                }
                i = this.createContainer();
                i.createSubview(i, {
                    name: "foreignUnits",
                    icon: this.notify("rvHW39mY", this, {
                        imageName: "centerHabitat",
                        imageCategory: "icons"
                    }),
                    title: utils.sanitize(r.name) || translate("Renegade") + " " + r.id,
                    clickData: {
                        habitat: r
                    },
                    titleClickMessage: "MS1VHGhp"
                }, I);
                if (a[e].battleType === C.EXTERNAL_UNITS_TO_DEFENSE) {
                    var v = this.habitat._getBundledUnits([a[e]], [C.EXTERNAL_UNITS_TO_DEFENSE]);
                    this.unitTable = i.createSubview(i, {
                        name: "foreignDefenseUnits",
                        styles: "recallUnits",
                        units: v,
                        inputFields: true,
                        clickMessage: null,
                        imageClickMessage: "qeuhDHxS",
                        habitat: this.habitat
                    }, b.Table)
                }
                if (a[e].battleType === C.ATTACKER) {
                    if (this.ownExternalTroops) {
                        y = true
                    }
                    var g = this.habitat._getBundledUnits([a[e]], [C.ATTACKER]);
                    this.unitTable = i.createSubview(i, {
                        name: "foreignAttackUnits",
                        styles: "recallUnits",
                        showNames: true,
                        inputFields: y,
                        units: g,
                        clickMessage: null,
                        imageClickMessage: "qeuhDHxS",
                        habitat: this.habitat,
                        finalClearfix: false
                    }, b.Table);
                    var d = 0,
                        c = t.conquestPointDictionary,
                        f = a[e].habitat.id;
                    if (c && c.hasOwnProperty(f)) {
                        d = c[f]
                    }
                    if (d > 0) {
                        var o = this.createSubview(this.unitTable, {
                            styles: "resourceElement silver"
                        });
                        o.createSubview(o, {
                            styles: "icon",
                            content: this.notify("rvHW39mY", this, {
                                imageName: "6",
                                imageCategory: "resources"
                            })
                        });
                        o.createSubview(o, {
                            styles: "amount",
                            content: d
                        })
                    }
                    this.unitTable.clearfix();
                    if (a[e].habitat.nextBattleDate) {
                        this.createSubview(i, {
                            content: translate("Next battle") + " " + utils.date.formatDateTime(a[e].habitat.nextBattleDate),
                            styles: "nextBattleDate"
                        })
                    }
                }
                i.clearfix();
                if (this.ownExternalTroops || a[e].battleType != C.ATTACKER) {
                    h = this.ownExternalTroops ? "Recall troops" : "Send troops home";
                    i.createSubview(i, {
                        content: translate(h),
                        hover: translate(h),
                        data: {
                            message: h,
                            table: this.unitTable,
                            habitatUnit: a[e]
                        },
                        clickMessage: "Yi1bK25T"
                    }, l)
                }
            }
        };
        i.prototype.castleLink = function (e, i) {
            var t = e.createSubview(e, {
                styles: "habitatLink clickable",
                clickMessage: "MS1VHGhp",
                data: {
                    habitat: i
                }
            });
            t.createSubview(t, {
                content: this.notify("rvHW39mY", this, {
                    imageName: "centerHabitat",
                    imageCategory: "icons"
                }),
                styles: "icon"
            });
            t.createSubview(t, {
                content: utils.sanitize(i.name),
                styles: "name"
            });
            t.clearfix()
        };
        i.prototype.updateValues = function (t) {
            this.dataUpdate(null, {
                habitat: t,
                ownExternalTroops: this.ownExternalTroops,
                title: this.title
            })
        };
        return i
    }(e);
    ui = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("transit");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var t;
            var e;
            if (this.transit.sourceHabitat !== null) {
                this.transitSource = this.createSubview(this, {
                    name: "transitSource",
                    content: translate("Source habitat")
                });
                this.createSubview(this.transitSource, {
                    content: utils.sanitize(this.transit.sourceHabitat.name),
                    icon: "buttonCastle",
                    iconCategory: "icons"
                }, k);
                this.createSubview(this.transitSource, {
                    content: utils.sanitize(this.transit.sourceHabitat.player.nick),
                    icon: "buttonPlayer",
                    iconCategory: "icons"
                }, k);
                if (this.transit.sourceHabitat.player.alliance !== null) {
                    e = utils.sanitize(this.transit.sourceHabitat.player.alliance.name)
                } else {
                    e = translate("No Alliance")
                }
                this.createSubview(this.transitSource, {
                    content: e,
                    icon: "buttonAlliance",
                    iconCategory: "icons"
                }, k)
            }
            if (this.transit.destinationHabitat !== null) {
                this.transitDestination = this.createSubview(this, {
                    name: "transitDestination",
                    content: translate("Target habitat")
                });
                this.transitDestinationHabitat = this.createSubview(this.transitDestination, {
                    content: utils.sanitize(this.transit.destinationHabitat.name),
                    icon: getTransitIcon(this.transit),
                    iconCategory: "icons"
                }, k);
                this.createSubview(this.transitDestinationHabitat, {
                    time: utils.date.setCountDownTime(this.transit.destinationETA),
                    runningTimer: true,
                    formatFunction: utils.date.secToTimeStr
                }, K);
                this.createSubview(this.transitDestinationHabitat, {
                    time: this.transit.destinationETA,
                    runningTimer: true,
                    formatFunction: utils.date.formatDateTime
                }, K);
                this.createSubview(this.transitDestination, {
                    content: utils.sanitize(this.transit.destinationHabitat.player.nick),
                    icon: "buttonPlayer",
                    iconCategory: "icons"
                }, k);
                if (this.transit.destinationHabitat.player.alliance !== null) {
                    e = utils.sanitize(this.transit.destinationHabitat.player.alliance.name)
                } else {
                    e = translate("No Alliance")
                }
                this.createSubview(this.transitDestination, {
                    content: e,
                    icon: "buttonAlliance",
                    iconCategory: "icons"
                }, k)
            }
            if (this.transit.units !== null) {
                this.transitUnits = this.createSubview(this, {
                    name: "transitUnits",
                    content: translate("Transit units")
                });
                for (t = 0; t < this.transit.units.length; t++) {
                    if (this.transit.units[t].count > 0) {
                        this.createSubview(this.transitUnits, {
                            content: translate(this.transit.units[t].identifier) + " <div>" + this.transit.units[t].count + "</div>",
                            icon: this.transit.units[t].primaryKey.toString(),
                            iconCategory: "units"
                        }, k)
                    }
                }
            }
            if (utils.dict.size(this.transit.resources) > 0) {
                this.transitResources = this.createSubview(this, {
                    name: "transitResources",
                    content: translate("Transit resources")
                });
                for (t in this.transit.resources) {
                    this.createSubview(this.transitResources, {
                        content: translate(he[t]) + " <div>" + this.transit.resources[t] + "</div>",
                        icon: t.toString(),
                        iconCategory: "resources"
                    }, k)
                }
            }
        };
        return t
    }(e);
    getTransitIcon = function (t) {
        switch (t.transitType) {
        case v.DEFENSE:
            return "defense";
        case v.TRANSIT_DEFENSE:
            return "transitDefense";
        case v.ATTACKER:
            return "attack";
        case v.TRANSIT_ATTACKER:
            return "transitAttack";
        case v.TRANSPORT:
            return "transport";
        case v.TRANSIT_TRANSPORT:
            return "transitTransport";
        case v.SPY:
            return "transitSpy";
        case v.TRANSIT_SPY:
            return "transitSpyReturn"
        }
    };
    getUnitsForUnitTable = function (e) {
        var i = {};
        for (var t = 0; t < e.length; t++) {
            if (e[t].count > 0) {
                i[e[t].primaryKey] = e[t].count
            }
        }
        return i
    };
    d.View = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addOption("headline", null);
            this.setOptions(e);
            this.drawStartMessage = "3&)LVFWO";
            this.drawEndMessage = "%Jigj%eU"
        }
        t.prototype.dataUpdate = function (e, t) {
            if (t && t.habitat) {
                this.habitat = t.habitat
            }
        };
        t.prototype.create = function () {
            var e = [],
                n, i;
            this.createToolbar(this);
            this.createHeadlineButtons(this.headline);
            e.push({
                graphic: "headlineButton_Pasteboard",
                action: "copyCastleLink",
                hover: translate("Copy castle link"),
                name: "",
                hidden: false
            });
            e.push({
                graphic: "headlineButton_Map",
                action: "markCastle",
                hover: translate("mark castle"),
                name: "",
                hidden: false
            });
            e.push({
                graphic: "headlineButton_CenterCastle",
                action: "centerCastle",
                hover: translate("Map"),
                name: "",
                hidden: false
            });
            e.push({
                graphic: "headlineButton_Recall",
                action: "recallUnits",
                hover: translate("Send troops home"),
                name: "recallAllUnitsButton",
                hidden: true,
                message: "XbG7ydc4"
            });
            e.push({
                graphic: "headlineButton_pageRight",
                action: "nextHabitat",
                hover: null,
                name: "nextHabitat",
                group: "habitatPagination",
                styles: "paginate next",
                message: "_uJtOCPq"
            });
            e.push({
                graphic: "headlineButton_pageLeft",
                action: "previousHabitat",
                hover: null,
                name: "prevHabitat",
                group: "habitatPagination",
                styles: "paginate prev",
                message: "yKa)r(dN"
            });
            for (var s = 0; s < e.length; s++) {
                var t = e[s],
                    l = "headerButton";
                if (t.styles) {
                    l += " " + t.styles
                }
                this.createSubview(this.headline.buttons, {
                    graphic: t.graphic,
                    hover: t.hover,
                    clickMessage: t.message || "AAeX&RO7",
                    styles: l,
                    data: {
                        action: t.action
                    },
                    name: t.name,
                    group: t.group || null,
                    hidden: t.hidden
                }, Z)
            }
            this.toolbar.clearfix();
            var r = this.createContainer();
            r.styles += " sceneContainer";
            for (var u in this.habitat.habitatBuildings) {
                i = null;
                for (var h in c) {
                    var o = c[h];
                    if (o.primaryKey === +u) {
                        i = o
                    }
                }
                if (i === null) {
                    continue
                }
                var a = i.identifier.split("/")[0];
                a = a.replace(" ", "").toLowerCase();
                if (a.indexOf("store") === -1) {
                    n = {
                        parent: r.wrapper,
                        styles: a,
                        element: "a",
                        cssid: a,
                        level: i.level,
                        name: "content",
                        primaryKey: i.primaryKey
                    };
                    this.addSubview(new d.Image(this.controller, n))
                }
            }
        };
        t.prototype.animate = function (i) {
            var t = document.querySelector("#" + this.id + " .animation");
            if (!t) {
                return
            }
            var e = document.createElement("img");
            e.src = i;
            t.innerHTML = "";
            t.appendChild(e)
        };
        return t
    }(e);
    d.Image = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("cssid");
            this.addRequired("level");
            this.addRequired("primaryKey");
            this.setOptions(e);
            this.clickMessage = "3)mX3VMQ"
        }
        t.prototype.compileHTML = function (e) {
            e = t.__super__.compileHTML.apply(this, arguments);
            var i = this.notify("-COpLdYc", this, {
                name: this.cssid,
                level: this.level
            });
            img = "<img src='" + i + "'+ draggable='false' id='" + this.primaryKey + "'>";
            $(e).append(img);
            return e
        };
        return t
    }(e);
    d.NextLevelPreviewElement = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("building");
            this.addRequired("habitat");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this._createPreview(this.building)
        };
        t.prototype._createPreview = function (s) {
            var n, t, h, e, a, i;
            if (!s.upgradeTo) {
                return
            }
            n = s.upgradeTo[0];
            t = c[n];
            h = this.createSubview(this, {
                styles: "nextLevelPreviewBlock"
            });
            var r = {};
            r[n - 1] = s;
            var o = true;
            if (t.requiredKnowledges && t.requiredKnowledges.length) {
                for (e = 0, a = t.requiredKnowledges.length; e < a; e++) {
                    i = t.requiredKnowledges[e];
                    if (!i.alreadyResearched(this.habitat)) {
                        o = false
                    }
                }
            }
            var d = {
                parent: this,
                buildings: r,
                habitat: this.habitat,
                build: true,
                levelString: true,
                nextLevel: true,
                showImage: true,
                styles: "",
                useElementContainer: false,
                requiredResearchDone: o
            };
            this.addSubview(new L.Table(this.controller, d));
            if (!t.requiredKnowledges || t.requiredKnowledges.length === 0) {
                return
            }
            for (e = 0, a = t.requiredKnowledges.length; e < a; e++) {
                var l = "#000",
                    u = "";
                i = t.requiredKnowledges[e];
                this.createSubview(this, {
                    styles: "requiredKnowledgesIcon",
                    content: this.notify("rvHW39mY", this, {
                        imageName: i.identifier,
                        imageCategory: "knowledges"
                    })
                });
                if (!i.alreadyResearched(this.habitat)) {
                    l = "#B23116";
                    u = translate("Required knowledge") + ":"
                }
                this.createSubview(this, {
                    styles: "requiredKnowledges",
                    content: "<span>" + u + " </span><span class='knowledgeInfoText' style='color:" + l + ";'>" + translate(i.identifier) + "</span>"
                })
            }
        };
        return t
    }(e);
    d.BattleValueElement = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("building");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            if (this.building.battleValues.length === 0) {
                return
            }
            var r = this.createContainer(),
                o = this.createSubview(r, {
                    name: "battleValueContainer",
                    styles: "battleValueContainer"
                });
            for (var t in this.building.battleValues) {
                currentBattleValue = this.building.battleValues[t];
                var a = this.createSubview(o, {
                    name: "battleValueListRow",
                    styles: "battleValueListRow"
                });
                var s = [{
                    icon: this.notify("rvHW39mY", this, {
                        imageName: t,
                        imageCategory: "icons"
                    }),
                    text: translate(t),
                    name: "corps"
                }, {
                    icon: this.notify("rvHW39mY", this, {
                        imageName: "attack",
                        imageCategory: "icons"
                    }),
                    text: currentBattleValue.offense,
                    name: "offense"
                }, {
                    icon: this.notify("rvHW39mY", this, {
                        imageName: "defense",
                        imageCategory: "icons"
                    }),
                    text: currentBattleValue.defense,
                    name: "defense"
                }];
                for (var e = 0; e < s.length; e++) {
                    var i = s[e],
                        n = this.createSubview(a, {
                            styles: "cols " + i.name
                        });
                    this.createSubview(n, {
                        content: i.icon,
                        styles: "icon"
                    });
                    this.createSubview(n, {
                        content: i.text,
                        styles: "val"
                    })
                }
                a.clearfix()
            }
        };
        return t
    }(e);
    d.ChangeName = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addOption("edit", false);
            this.addOption("buttonText", "");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            this.changeNameContainer = this.createSubview(this, {
                name: "changeNameContainer",
                styles: "changeNameContainer"
            });
            if (this.edit) {
                this.editableField = this.createSubview(this.changeNameContainer, {
                    name: "editableField",
                    maxLength: u.habitatNameLengthMax || u.nameMaximumLength,
                    caption: "Change Name",
                    currentValue: this.habitat.name
                }, O.Input);
                this.createSubview(this.changeNameContainer, {
                    content: translate("Save"),
                    hover: translate("Save"),
                    clickMessage: "JOU&l(YW"
                }, l);
                this.createSubview(this.changeNameContainer, {
                    name: "editButton",
                    content: this.buttonText,
                    hover: this.buttonText,
                    clickMessage: "dbjlf(u&"
                }, l)
            } else {
                this.createSubview(this.changeNameContainer, {
                    name: "castleName",
                    content: utils.sanitize(this.habitat.name),
                    styles: "castleName"
                });
                this.createSubview(this.changeNameContainer, {
                    name: "editButton",
                    content: this.notify("rvHW39mY", this, {
                        imageName: "edit",
                        imageCategory: "icons"
                    }),
                    hover: this.buttonText,
                    clickMessage: "pST5GLvU",
                    styles: "editCastleName"
                }, l)
            }
        };
        return t
    }(w);
    d.ViewController = function (s) {
        utils.__extends(e, n.Controller);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.setOptions(t);
            this.initialDataUpdateComplete = false;
            this.animationTimerID = null;
            this.actionState = "";
            this.assignDialogShown = false;
            this.currentTab = null
        }
        var i = ["visitCastle", "buildingList", "unitList", "sendResources", "transports", "sendDefense"];
        e.prototype.cleanUp = function () {
            if (this.animationTimerID) {
                this.stopAnimation()
            }
            e.__super__.cleanUp.apply(this, arguments)
        };
        e.prototype.notifyProxy = function (e, a, s, n) {
            var t, i;
            if (this.controller.tutorialController && this.controller.tutorialController.isActive()) {
                t = this.controller.checkTutorialMessages(e);
                if (t === true) {
                    return
                }
            }
            if (this[e]) {
                i = this[e](a, s, n)
            }
            if (t && t.callback) {
                t.callback.apply(this.tutorialController, t.args)
            }
            return i
        };
        e.prototype["0scd3paU"] = function () {
            var n = !this.currentTab || this.currentTab === "visitCastle" ? 1 : 2,
                r = this.viewStack.length <= n,
                e;
            var i = this.view.findSubviewByField("tag", "currentView");
            if (i && i.name === "marketView") {
                this.clearSessionStorage()
            }
            this.notify("0scd3paU", this, {
                force: r
            });
            if (S) {
                var a = this.controller.tutorialController.getCurrentStep(),
                    t = null;
                if (a.name === "backFromArsenal") {
                    t = "backFromArsenal"
                } else if (a.name === "backFromTavern") {
                    t = "backFromTavern"
                }
                if (t) {
                    e = function () {
                        this.notify("cAIus3w2", t)
                    };
                    setTimeout(e.bind(this), 400)
                }
            }
            var s = this.view.headline.buttons.findSubviewByName("recallAllUnitsButton");
            if (s) {
                s.hide()
            }
        };
        e.prototype["SZNDbKyD"] = function () {
            var t = this.view.findSubviewByField("tag", "currentView");
            if (t && t.name === "habitatView") {
                this.notify("Z8kGMFyM", this)
            }
            this._paginationState()
        };
        e.prototype["CU)Puzfu"] = function () {
            this._manageMultiMissionButton()
        };
        e.prototype["aBdTswLK"] = function () {
            this.currentTab = null;
            this.notify("aBdTswLK", this, e.__super__, arguments)
        };
        e.prototype["AAeX&RO7"] = function (e, r) {
            var t = e.data.action,
                s = this.view.habitat.id,
                a = false;
            a = ["sendDefense", "sendResources"].indexOf(t) === -1 && this.currentTab && this.currentTab === t;
            if (a && (typeof e.tutorialForce === "undefined" || e.tutorialForce !== true)) {
                return
            }
            if (i.indexOf(t) !== -1) {
                this.currentTab = t
            }
            if (typeof S !== "undefined" && S) {
                if (this.currentTab === "buildingList") {
                    var n = function () {
                        this.notify("cAIus3w2", "buildingListTab")
                    };
                    setTimeout(n.bind(this), 500)
                } else {
                    return
                }
            }
            this.notify("AAeX&RO7", this, {
                action: t,
                habitatID: s,
                data: e.data
            })
        };
        e.prototype.dataUpdate = function (a, e) {
            var y, i;
            if (typeof e == "undefined" || e === null || !e[this.name] || this.editting) {
                return
            }
            if (e && e[this.name]) {
                this.view.habitat = e[this.name];
                this.view.dataUpdate(a, {
                    habitat: e[this.name]
                });
                var d = this.view.findSubviewByName("marketView");
                if (d) {
                    this.draw();
                    d.updateDurations()
                }
            }
            if (this.initialDataUpdateComplete === true) {
                var u = this.view.findSubviewByName("resourceHeaderTable");
                if (u !== null) {
                    i = e[this.name];
                    var b = i.getColorClass();
                    y = {
                        habitat: i,
                        resourceColors: b
                    };
                    u.dataUpdate(a, y);
                    u.draw()
                }
                var r = this.view.findSubviewByField("group", "HabitatBuildingList");
                if (r !== null) {
                    for (i in e) {
                        if (e[i].id == this.name) {
                            r.dataUpdate(a, {
                                habitat: e[i]
                            });
                            r.draw()
                        }
                    }
                }
                var f = utils.sanitize(t.habitate[this.name].name) + " (" + t.habitate[this.name].points + ")";
                this.view.headline.title.content = f;
                $("#" + this.view.headline.id + " div.title").text(f);
                var s = this.view.findSubviewByField("group", "HabitatDetailView");
                if (s) {
                    var _ = s.building.identifier.split("/")[0];
                    s.dataUpdate(a, {
                        habitat: e[this.name],
                        building: this._findBuildingInHabitatByName(e[this.name], _)
                    });
                    s.draw()
                }
                var l = this.view.findSubviewByField("group", "HabitatUnitList");
                if (l !== null) {
                    var v = this.name;
                    l.dataUpdate(null, v);
                    l.draw()
                }
                var n = this.view.findSubviewByField("group", "SingleHabitatUnitList");
                if (n !== null) {
                    if (e[this.name].externalHabitatUnits.length === 0 && e[this.name].habitatUnits.length <= 1) {
                        if (this.view.findSubviewByField("tag", "currentView").id == n.id) {
                            this["0scd3paU"]()
                        }
                    } else {
                        n.updateValues(e[this.name]);
                        n.draw()
                    }
                }
                var h = this.view.findSubviewByField("group", "habitatTransitList");
                if (h !== null) {
                    h.dataUpdate(null, {
                        transits: t.habitate[this.name].habitatTransits
                    });
                    h.draw()
                }
                var c = this.view.findSubviewByField("tag", "currentView");
                var g = t.habitate[this.name].habitatTransits;
                var p = false;
                if (c !== null && c.model) {
                    for (var o = 0; o < g.length; o++) {
                        if (g[o].generatedTransitId == c.model.generatedTransitId) {
                            p = true
                        }
                    }
                    if (!p) {
                        this["0scd3paU"]()
                    }
                }
                this._manageMultiMissionButton();
                return
            }
            for (i in e) {
                if (e[i].id === this.name) {
                    var w = this.view.findSubviewByName("headline");
                    w.title.content = utils.sanitize(e[i].name) + " (" + e[i].points + ")";
                    var m = this.view.habitatView;
                    m.dataUpdate(a, {
                        habitat: e[i]
                    });
                    m.draw();
                    this.initialDataUpdateComplete = true
                }
            }
        };
        e.prototype._findBuildingInHabitatByName = function (t, i) {
            for (var e in t.habitatBuildings) {
                if (t.habitatBuildings[e].building.untranslatedIdentifier === i) {
                    return t.habitatBuildings[e].building
                }
            }
            return null
        };
        e.prototype.showSubviewFromAction = function (t, n) {
            var a = this.view.findSubviewByField("tag", "currentView"),
                e = true;
            if (a && a.name === "marketView") {
                this.clearSessionStorage()
            }
            this.currentTab = t;
            this.actionSource = n;
            this.reset();
            this.view.createCastleScene();
            this.view.draw();
            if (t === "visitCastle") {
                this.currentTab = null
            } else if (t === "buildingList") {
                this["b2G)FlDn"]()
            } else if (t === "unitList") {
                this["PbBiqg-w"]()
            } else if (t === "missions") {
                var i;
                for (var r in this.view.habitat.habitatBuildings) {
                    var s = this.view.habitat.habitatBuildings[r];
                    if (s.identifier.indexOf("Tavern") !== -1) {
                        i = s;
                        break
                    }
                }
                this["rkg0%f3x"]({
                    buildingName: i.identifier.split("/")[0],
                    buildingPrimaryKey: i.primaryKey,
                    group: "BuildingElement"
                })
            } else if (t === "sendResources") {
                e = this["Nv1SRq%h"]();
                e = false
            } else if (t === "sendDefense") {
                this["y4v5LjlU"]();
                e = false
            } else if (t === "transports") {
                this["SwZN8dIg"]()
            }
            this.actionSource = null;
            return e
        };
        e.prototype["3)mX3VMQ"] = function (i, n) {
            if (i.name == "content") {
                var e = c[i.primaryKey];
                if (e.identifier && e.identifier.indexOf("Lumberjack") !== -1) {
                    var s = utils.bind(function () {
                        this.notify("cAIus3w2", "viewLumberjack")
                    }, this);
                    setTimeout(s, 500)
                }
                this.currentSubViewBuildingID = i.primaryKey;
                this.showNextViewOfClass(d.DetailView, {
                    building: e,
                    habitat: t.habitate[this.name]
                });
                var a = e.identifier.split("/")[0];
                this.notify("ha_wIcAy", this, {
                    msg: a,
                    link: a,
                    category: "building"
                })
            }
        };
        e.prototype._speedupMessage = function (s, n, r, l, i) {
            var a = translate("Gold");
            var u = o.getValueOf(s);
            var h = $.sprintf(u, translate(l), i, a, t.gold, a);
            var e = this;
            utils.dialog.confirm(this, h, a, function () {
                if (t.gold < i) {
                    e.notify("Vjkw%oMN", e, {
                        costs: i
                    })
                } else {
                    e.datasource[r](e.name, n)
                }
            })
        };
        e.prototype["_uJtOCPq"] = function (e) {
            var t = this._getPaginationInfo();
            if (!t || !t.next) {
                return
            }
            this._performPagination(t.next)
        };
        e.prototype["yKa)r(dN"] = function (e) {
            var t = this._getPaginationInfo();
            if (!t || !t.prev) {
                return
            }
            this._performPagination(t.prev)
        };
        e.prototype._performPagination = function (a) {
            var e = this.currentTab;
            this.controller.removeWindowFromSession(this.name);
            this.view.habitat = a;
            this.name = a.id;
            this.controller.addWindowToSession(this);
            this.reset();
            this.view.addTabbar();
            this.view.createCastleScene();
            this.dataUpdate(null, t.habitate);
            this.draw();
            if (e && ["visitCastle", "sendResources", "sendDefense"].indexOf(e) === -1) {
                this.currentTab = null;
                this.showSubviewFromAction(e, "headlinePaginator");
                var i = this.view.findSubviewByName("habitatView");
                i.tag = "stackedView_" + i.id;
                i.hide()
            } else {
                this.currentTab = "visitCastle"
            }
        };
        e.prototype._getPaginationInfo = function () {
            var e = t.getSortedHabitate(),
                i = this.view.habitat,
                a = e.indexOf(i),
                s = e.length,
                r, n;
            if (s <= 1) {
                return false
            }
            nextHab = this._checkPaginationhabitat(e, a, "next");
            n = this._checkPaginationhabitat(e, a, "prev");
            return {
                total: s,
                current: i,
                next: nextHab,
                prev: n
            }
        };
        e.prototype._checkPaginationhabitat = function (e, i, a) {
            var s = a === "next" ? i + 1 : i - 1;
            var t = e[s];
            if (!t) {
                return null
            }
            var n = this.controller.subcontroller.filter(function (e) {
                return e.name == t.id
            });
            if (n.length !== 0) {
                return this._checkPaginationhabitat(e, s, a)
            }
            return t
        };
        e.prototype._paginationState = function () {
            var a = this.view.headline,
                t = this._getPaginationInfo(),
                e = a.findSubviewByField("name", "nextHabitat"),
                i = a.findSubviewByField("name", "prevHabitat");
            if (!t) {
                e.hide();
                i.hide();
                return
            }
            if (t.prev) {
                i.show()
            } else {
                i.hide()
            } if (t.next) {
                e.show()
            } else {
                e.hide()
            }
        };
        e.prototype["I17Omkrn"] = function (t, e) {
            this.showNextViewOfClass(Te.DetailView, {
                data: t.data
            })
        };
        e.prototype["z&iOKe3K"] = function (t, i) {
            this.datasource.executeMission(this.name, t.data);
            var e = function () {
                this.notify("cAIus3w2", "performMission")
            };
            setTimeout(e.bind(this), 700)
        };
        e.prototype["LUv0UDdp"] = function (t, a) {
            var e = E[t.data].identifier;
            var i = E[t.data].buildSpeedupCost;
            this._speedupMessage("Mission time reduction for %@ costs %d %@. You have %d %@.", t.data, "speedupMission", e, i)
        };
        e.prototype["3UXJnxW7"] = function (h, d) {
            var l = h.data;
            var p = {};
            var a = [];
            var e = 0;
            var i;
            var s = this;
            for (var r = 0; r < l.length; r++) {
                i = l[r];
                if (i.durationFactor == 1) {
                    a.push(translate(i.mission.identifier));
                    e = e + i.mission.buildSpeedupCost
                }
            }
            a = a.join(",");
            var n = translate("Gold");
            var u = o.getValueOf("Mission time reduction for %@ costs %d %@. You have %d %@.");
            var c = $.sprintf(u, a, e, n, t.gold, n);
            utils.dialog.confirm(this, c, n, function () {
                if (t.gold < e) {
                    s.notify("Vjkw%oMN", s, {
                        costs: e
                    })
                } else {
                    s.datasource.speedupAllMissions(s.name, "")
                }
            })
        };
        e.prototype["OjgeedYc"] = function (h) {
            var t = this.view.findSubviewByName("missionContainer"),
                a = t.habitat,
                u = t.building.missions,
                l = t.preselectedMissions,
                r = this._findSelectedMissions(t),
                s = a.getSortedMissions();
            var n = [];
            for (var i = 0, o = s.length; i < o; i++) {
                var e = s[i];
                if ( !! ~r.indexOf(e.primaryKey) && e.executable) {
                    n.push(e.primaryKey)
                }
            }
            this.datasource.executeMultipleMissions(a.id, n)
        };
        e.prototype._findSelectedMissions = function (e) {
            var i = [];
            for (var t = 0, s = e.checkboxes.length; t < s; t++) {
                var a = e.checkboxes[t];
                if (a.checked) {
                    i.push(a.data.item.primaryKey)
                }
            }
            return i
        };
        e.prototype["5rqSDESh"] = function (e) {
            var n = e.data.habitatID;
            var i = e.data.item;
            var a = this.name;
            var r = t.habitate[a];
            this._manageMultiMissionButton();
            var o = this.datasource.rememberMission(e.checked, n, i);
            var l = r.getSortedMissions(o);
            var s = this.view.findSubviewByName("missionContainer");
            if (s) {
                s.updateMissionCheckboxes(l)
            }
            this.notify("5rqSDESh", this, {
                habitatId: a,
                mission: i
            })
        };
        e.prototype._manageMultiMissionButton = function () {
            if (!this.view) {
                return
            }
            var t = this.view.findSubviewByName("missionContainer");
            if (t && t.executeSelectedButton) {
                if (this._countSelectedMissions(t) > 1) {
                    t.executeSelectedButton.show()
                } else {
                    t.executeSelectedButton.hide()
                }
            }
        };
        e.prototype._countSelectedMissions = function (e) {
            var i = 0;
            for (var t = 0, a = e.checkboxes.length; t < a; t++) {
                var s = e.checkboxes[t];
                i += s.checked ? 1 : 0
            }
            return i
        };
        e.prototype.refreshMissionsForHabitat = function (l) {
            var n = this.datasource.getMissionsForHabitat(l);
            var i = this.view.findSubviewByName("missionContainer");
            if (!i) return;
            var t, a, s, r, e, o;
            for (t = 0, a = i.checkboxes.length; t < a; t++) {
                e = i.checkboxes[t];
                e.uncheck();
                e.liveUpdate()
            }
            for (s = 0, r = n.length; s < r; s++) {
                o = n[s];
                for (t = 0, a = i.checkboxes.length; t < a; t++) {
                    e = i.checkboxes[t];
                    if (e.data.item.primaryKey !== o) continue;
                    e.check();
                    e.liveUpdate()
                }
            }
        };
        e.prototype["j-y2uo6r"] = function (t, e) {
            this.showNextViewOfClass(Pe.DetailView, {
                data: t.data,
                habitat: t.parent.habitat
            })
        };
        e.prototype["87ldsMFP"] = function (t, e) {
            if (t && t.styles && t.styles.indexOf("disabled") !== -1) {
                return
            }
            this.datasource.executeResearch(this.name, t.data)
        };
        e.prototype["%KS)scz("] = function (t, a) {
            var e = A[t.data].identifier;
            var i = A[t.data].buildSpeedupCost;
            this._speedupMessage("Research time reduction for %@ costs %d %@. You have %d %@.", t.data, "speedupResearch", e, i)
        };
        e.prototype["023BARhk"] = function (t, a) {
            var e = A[t.data].identifier;
            var i = A[t.data].buildSpeedupCost;
            this._speedupMessage("Finishing the research (%@) instantly costs %d %@. You have %d %@.", t.data, "finishResearch", e, i)
        };
        e.prototype["-COpLdYc"] = function (i, e) {
            var t = this.notify("7v%5T22p", this);
            if (t !== null) {
                return t.getBuildingImage(e)
            }
            return null
        };
        e.prototype["kmph1YdR"] = function (e, t) {
            this.view.findSubviewByName("habitatNextLevelPreviewElement").dataUpdate("", t)
        };
        e.prototype["Gpk8A7Tb"] = function (t) {
            this.showNextViewOfClass(ui, {
                transit: t.data
            })
        };
        e.prototype["MS1VHGhp"] = function (a) {
            var e = a.data.habitat,
                i = "createForeignHabitatWindow";
            if (e.player && e.player.id == t.id) {
                i = "createHabitatWindow";
                e.player = t
            }
            this.controller[i](e)
        };
        e.prototype["C5ywrQ4I"] = function (t) {
            var e = [],
                i = "defending";
            if (t.data.title.indexOf("Offending") != -1) {
                i = "offending";
                e.push(2)
            }
            if (t.data.title.indexOf("Defending") != -1) {
                e.push(0);
                e.push(1)
            }
            this.showNextViewOfClass(d.SingleHabitatUnitList, {
                habitat: t.data.habitat,
                ownExternalTroops: t.data.ownExternalTroops,
                title: t.data.title,
                battleTypeFilter: e
            });
            if (i === "defending" && t.data.ownExternalTroops === false && t.data.habitat.habitatUnits.length > 1) {
                var a = this.view.headline.buttons.findSubviewByName("recallAllUnitsButton");
                if (a) {
                    a.show()
                }
            }
        };
        e.prototype["Yi1bK25T"] = function (i) {
            var e = i.data.table.getAllFieldValues();
            var a = {};
            for (var t = 0; t < e.length; t++) {
                if (e[t].value > 0) {
                    a[e[t].id] = e[t].value
                }
            }
            var s = i.data.habitatUnit.sourceHabitat.id;
            var n = i.data.habitatUnit.habitat.id;
            if (utils.dict.size(a) === 0) {
                utils.dialog.alert(this, translate("No untis were assigned."), translate("Units"), function () {});
                return
            }
            var r = function () {
                this.datasource.recallTroops(n, s, a)
            }.bind(this);
            var o = translate("Send troops home"),
                l = translate("global.confirm");
            utils.dialog.confirm(this, l, o, r)
        };
        e.prototype["XbG7ydc4"] = function (a) {
            var t, e = translate("Recall troops"),
                i = translate("Do you really want to send all troops home?");
            t = function () {
                this.datasource.recallAllTroops(this.view.habitat.id)
            };
            utils.dialog.confirm(this, i, e, t.bind(this))
        };
        e.prototype["Lnoqxcc7"] = function (e, i) {
            if (e.group != "Element") {
                return
            }
            if (e.data.origin == "building") {
                this.showNextViewOfClass(d.DetailView, {
                    building: e.data,
                    habitat: t.habitate[this.name]
                })
            }
            if (e.data.origin == "units") {
                alert(e.data.primaryKey)
            }
            if (e.data.origin == "knowledge") {
                this.showNextViewOfClass(Pe.DetailView, {
                    data: e.data.primaryKey,
                    habitat: t.habitate[this.name]
                })
            }
        };
        e.prototype["dfVcBLI3"] = function (e, i) {
            this.showNextViewOfClass(Pe.DetailView, {
                data: e.data.primaryKey,
                habitat: t.habitate[this.name]
            })
        };
        e.prototype["LzV6hM3N"] = function (e, t) {
            if (t.volumeAmount) {
                t.buildResources[a.PEOPLE] = t.volumeAmount - c[t.upgradeOf].volumeAmount
            } else {
                t.buildResources[a.PEOPLE] = 0
            }
            return [{
                resources: t.buildResources,
                time: t.buildDuration
            }]
        };
        e.prototype.stopAnimation = function () {
            if (this.animationTimerID !== null) {
                window.clearInterval(this.animationTimerID);
                this.notify("-Ra(cF3D", this)
            }
        };
        e.prototype["%Jigj%eU"] = function (i) {
            this.stopAnimation();
            var a = this.notify("dTqORssj");
            if (!a) return;
            var t = this.notify("7v%5T22p", this);
            if (t === null) {
                return
            }
            var e = t.getAnimation(t.getRandomAnimationName());
            this.animationTimerID = window.setInterval(function () {
                i.animate(t.nextAnimationFrame(e.name), e.name)
            }, e.speed);
            $("#" + i.id).find(".sceneContainer .frame-content").append($("<div class='animation " + e.name + "'>").append(i.animate(t.nextAnimationFrame(e.name))));
            this._manageMultiMissionButton();
            this._paginationState()
        };
        e.prototype["b2G)FlDn"] = function (i) {
            var e = this.actionSource === "headlinePaginator" ? "simple" : true;
            this.showNextViewOfClass(d.BuildingList, {
                showBack: false,
                habitat: t.habitate[this.name],
                name: "buildingList",
                styles: "buildingList"
            }, e)
        };
        e.prototype["PbBiqg-w"] = function (e) {
            var t = this.actionSource === "headlinePaginator" ? "simple" : true;
            this.showNextViewOfClass(d.UnitList, {
                showBack: false,
                habitatID: this.name
            }, t)
        };
        e.prototype["pST5GLvU"] = function (s) {
            this.editting = true;
            var e = this.view.findSubviewByName("castleName");
            var i = e.parent;
            var a = {
                parent: i,
                name: "changeNameSection",
                buttonText: translate("Cancel"),
                habitat: t.habitate[this.name],
                edit: "true"
            };
            this.changeNameSection = new d.ChangeName(this, a);
            this.view.content.replaceSubviewByName("castleName", this.changeNameSection);
            this.changeNameSection.create();
            this.view.content.draw()
        };
        e.prototype["dbjlf(u&"] = function (s) {
            var e = this.view.findSubviewByName("changeNameSection");
            var i = e.parent;
            var a = {
                parent: i,
                name: "castleName",
                buttonText: translate("Edit"),
                habitat: t.habitate[this.name],
                edit: false
            };
            this.playerName = new d.ChangeName(this, a);
            this.view.content.replaceSubviewByName("changeNameSection", this.playerName);
            this.playerName.create();
            this.view.content.draw();
            this.editting = false
        };
        e.prototype["JOU&l(YW"] = function (i) {
            var e = this.view.findSubviewByName("editableField").getValue(),
                a = u.habitatNameLengthMin || u.nameMinimumLength,
                s = u.habitatNameLengthMax || u.nameMaximumLength;
            if (e.length > s) {
                utils.dialog.alert(this, translate("The name is too long"), translate("Error"), function () {});
                this.view.findSubviewByName("editableField").setValue(t.nick);
                return
            } else if (e.length < a) {
                utils.dialog.alert(this, translate("The name is too short"), translate("Error"), function () {});
                this.view.findSubviewByName("editableField").setValue(t.nick);
                return
            } else if (t.habitate[this.name].name === e) {
                this.editting = false;
                this["dbjlf(u&"](i);
                return
            } else {
                this.datasource.changeHabitatName(this.name, e);
                this.editting = false
            }
        };
        e.prototype["rkg0%f3x"] = function (e) {
            if (e.group != "BuildingElement") {
                return
            }
            if (S) {
                var i = null;
                if (e.buildingName === "Arsenal") {
                    i = "openArsenal"
                } else if (e.buildingName === "Tavern") {
                    i = "openTavern"
                } else {
                    return
                } if (i) {
                    var a = function () {
                        this.notify("cAIus3w2", i)
                    };
                    setTimeout(a.bind(this), 500)
                }
            }
            this.showNextViewOfClass(d.DetailView, {
                building: c[e.buildingPrimaryKey],
                habitat: t.habitate[this.name]
            })
        };
        e.prototype["SVNznI8l"] = function (l) {
            var s = l.data.upgrade;
            var e = s.buildingTarget;
            var a = o.getValueOf("Gold");
            var n, r;
            var i = this;
            if (s.isSpeededup() || s.isHalfDurationReached() === true) {
                n = o.getValueOf("Finishing building %@ level %d instantly costs %d %@. You have %d %@.");
                r = $.sprintf(n, translate(e.identifier.split("/")[0]), e.level, e.buildSpeedupCost, a, t.gold, a);
                utils.dialog.confirm(this, r, a, function () {
                    if (t.gold < e.buildSpeedupCost) {
                        i.notify("Vjkw%oMN", i, {
                            costs: e.buildSpeedupCost
                        })
                    } else {
                        i.datasource.finishBuilding(s.id);
                        i.notify("ha_wIcAy", i, {
                            msg: "finishBuilding"
                        })
                    }
                })
            } else {
                n = o.getValueOf("Build time reduction for %@ level %d costs %d %@. You have %d %@.");
                r = $.sprintf(n, translate(e.identifier.split("/")[0]), e.level, e.buildSpeedupCost, a, t.gold, a);
                utils.dialog.confirm(this, r, a, function () {
                    if (t.gold < e.buildSpeedupCost) {
                        i.notify("Vjkw%oMN", i, {
                            costs: e.buildSpeedupCost
                        })
                    } else {
                        i.datasource.speedupBuilding(s.id);
                        i.notify("ha_wIcAy", i, {
                            msg: "speedupBuilding"
                        })
                    }
                })
            }
        };
        e.prototype["VpY2KZTw"] = function (s) {
            if (s.node() && s.node().hasClass("disabled")) {
                return
            }
            var l = this.view.findSubviewByName("buildingList");
            var i, e;
            var a = this;
            if (l === null) {
                i = t.habitate[this.name];
                e = c[s.data.upgradeTo]
            } else {
                i = l.habitat;
                e = c[s.data.upgradeTo]
            } if (S) {
                var n = null;
                if (e && e.identifier.indexOf("Lumberjack") !== -1) {
                    n = "upgradeLumberjack"
                } else if (e && e.identifier.indexOf("Wood Store") !== -1) {
                    n = "upgradeStore"
                } else {
                    return
                } if (n) {
                    var h = function () {
                        this.notify("cAIus3w2", n)
                    };
                    setTimeout(h.bind(this), 500)
                }
            }
            if (i.habitatBuildingUpgrades.length >= u.maxItemsInBuildingList) {
                var r = o.getValueOf("Gold");
                var d = $.sprintf(o.getValueOf("Your building upgrade queue is full. An additional slot costs %d %@\nYou have %d %@"), c[e.upgradeTo].buildSpeedupCost, r, t.gold, r);
                utils.dialog.confirm(this, d, r, function () {
                    if (t.gold < c[e.upgradeTo].buildSpeedupCost) {
                        a.notify("Vjkw%oMN", a, {
                            costs: c[e.upgradeTo].buildSpeedupCost
                        })
                    } else {
                        a.datasource.upgradeBuilding(i.id, c[e.upgradeTo].primaryKey, true);
                        a.notify("ha_wIcAy", a, {
                            msg: "buildBuilding"
                        })
                    }
                })
            } else {
                this.datasource.upgradeBuilding(i.id, c[e.upgradeTo].primaryKey, true);
                this.notify("ha_wIcAy", this, {
                    msg: "buildBuilding"
                })
            }
        };
        e.prototype["zUYBaQVj"] = function (t) {
            var e = t.parent.parent.building;
            var i = e.primaryKey + 1;
            var a = t.parent.parent.habitat;
            if (e.upgradeTo.length > 0) {
                this.showNextViewOfClass(d.DetailView, {
                    building: c[i],
                    habitat: a,
                    isPreview: true
                })
            }
        };
        e.prototype[")(ADVQlf"] = function (t) {
            var e = this.view.findSubviewByField("tag", "currentView");
            var i = t.parent.getInputInfo();
            var a = e.getMaxTransportCapacity();
            var s = i.value;
            if (a < i.value) {
                s = a
            }
            t.overrideInputValue(s);
            e.updateResourcesCapicity()
        };
        e.prototype["cUtxnz5W"] = function (t) {
            return this[")(ADVQlf"](t)
        };
        e.prototype["urEb4YbM"] = function (a) {
            var e = this.view.findSubviewByField("tag", "currentView");
            var i = t.habitate[this.name];
            e.updateTroopDurations(i)
        };
        e.prototype["iX-qOWYz"] = function (t) {
            return this["urEb4YbM"](t)
        };
        e.prototype["Lc2cSnAE"] = function (e) {
            var i = e.data;
            this.showNextViewOfClass(hi.View, {
                habitat: t.habitate[this.name],
                marketRate: i,
                building: e.parent.parent.parent.building,
                name: "marketView"
            })
        };
        e.prototype["pXDKHMVd"] = function (e) {
            var t = this.view.findSubviewByField("tag", "currentView");
            t.updateDurations()
        };
        e.prototype["0YYZ86wN"] = function (t) {
            return this["pXDKHMVd"](t)
        };
        e.prototype["LlaR3waZ"] = function (t, h) {
            var e = this.view.findSubviewByField("tag", "currentView");
            var s = t.parent.parent;
            var n = t.parent;
            var u = e.getMaxTransportCapacity();
            var r = s.filterArray.filter(function (t) {
                return t !== n.resourceID
            });
            r.push(n.resourceID);
            var a = t.parent.getInputInfo();
            var o = e.marketRate;
            var i = this.adjustResourceAmountToMarketRate(o, a);
            t.overrideInputValue(i);
            var l = s.respectMaxTransportCapacity(u, r);
            if (l === 0) {
                this["kzLxj4Vx"](t)
            }
            a = t.parent.getInputInfo();
            i = this.adjustResourceAmountToMarketRate(o, a);
            t.overrideInputValue(i);
            e.updateDurations()
        };
        e.prototype["FkmtgzzI"] = function (t) {
            return this["LlaR3waZ"](t)
        };
        e.prototype.adjustResourceAmountToMarketRate = function (e, t) {
            return Math.floor(t.value / e.rates[t.id]) * e.rates[t.id]
        };
        e.prototype["kzLxj4Vx"] = function (i) {
            if (this.assignDialogShown === false) {
                this.assignDialogShown = true;
                var t = translate("Please assign more transport units or reduce the amount of resources.");
                var e = this;
                utils.dialog.alert(this, t, translate("Transport"), function () {
                    e.assignDialogShown = false
                })
            }
        };
        e.prototype["S9FpjbCK"] = function (s) {
            var t = this.view.findSubviewByField("tag", "currentView");
            var a = t.validate(true),
                e = translate("Available market resources");
            if (!this._validateTable(t.unitTable)) {
                utils.dialog.alert(this, translate("Please assign more transport units or reduce the amount of resources."), e);
                return
            } else if (!this._validateTable(t.resourceTable)) {
                utils.dialog.alert(this, translate("no resources selected"), e);
                return
            }
            if (a.valid === true) {
                var i = t.getFormDataForXHRAction();
                this.datasource.tradeResources(this.name, t.marketRate.resourceID, i.resources, i.units);
                this.notify("ha_wIcAy", this, {
                    msg: "tradeResource",
                    data: t.marketRate.resourceID
                });
                this["0scd3paU"]()
            }
        };
        e.prototype._validateTable = function (s) {
            var i = s.getAllFieldValues(),
                a = 0;
            for (var t = 0, n = i.length; t < n; t++) {
                var e = i[t];
                if (e && e.value) {
                    a += e.value
                }
            }
            return a > 0
        };
        e.prototype._fillCartEqually = function (i, s) {
            var n = i.fillCapa;
            var t = i.resources;
            var e = i.equalFillMax;
            var a = 0;
            var r = t.filter(function (t) {
                return t.amount === 0
            });
            t = t.filter(function (t) {
                return t.amount !== 0
            });
            e = e + Math.floor(n / t.length);
            t.forEach(function (t) {
                var i = this.adjustResourceAmountToMarketRate(s, {
                    id: t.id,
                    value: e
                });
                t.value += t.amount;
                if (t.amount >= i) t.value = i;
                if (t.amount < i) a += i - t.amount;
                t.underfill = i - t.value;
                t.amount -= t.value
            }, this);
            r.forEach(function (e, i) {
                t.push(e)
            });
            return {
                resources: t,
                fillCapa: a,
                equalFillMax: e
            }
        };
        e.prototype["I1%KdUSg"] = function (y, p) {
            var a = this.view.findSubviewByField("tag", "currentView");
            var f = a.validate(true);
            var s = a.resourceTable;
            var d = s.resources;
            var e = s.getAllFieldValues();
            var c = e.length;
            var o = a.getMaxTransportCapacity();
            var r = a.marketRate;
            var h = translate("Available market resources");
            var t, n;
            if (o === 0) {
                utils.dialog.alert(this, translate("Please assign more transport units or reduce the amount of resources."), h);
                return
            }
            for (t = 0; t < e.length; t++) {
                var l = e[t].id;
                e[t].amount = Math.floor(d[l].amount);
                e[t].amount = this.adjustResourceAmountToMarketRate(r, {
                    id: l,
                    value: e[t].amount
                })
            }
            var i = this._fillCartEqually({
                resources: e,
                equalFillMax: 0,
                fillCapa: o
            }, r);
            if (i.fillCapa > 0 && c > 1) {
                i = this._fillCartEqually(i, r)
            }
            for (t = 0; t < i.resources.length; t++) {
                for (n = 0; n < s.subviews.length; n++) {
                    var u = s.subviews[n].resourceID;
                    if (u !== i.resources[t].id) {
                        continue
                    }
                    s.subviews[n].inputField.overrideInputValue(i.resources[t].value)
                }
            }
            a.updateDurations()
        };
        e.prototype["OKZN3p9O"] = function (t) {
            if (typeof S !== "undefined" && S) {
                if (t && t.data && t.data > 0 && y[t.parent.unitID].identifier === "Spearman") {
                    this.notify("cAIus3w2", "recruitUnitSelection")
                }
            }
        };
        e.prototype["rbmpbo3v"] = function (t) {
            this["OKZN3p9O"](t)
        };
        e.prototype["nJyLJ65E"] = function (r) {
            var s = t.habitate[this.name];
            var e = y[r.parent.unitID];
            var i = parseInt(r.parent.getInputInfo().value, 10),
                l = _.storeSession.createKey("habitat", s.id, e.primaryKey);
            var a = this;
            if (i <= 0) {
                return
            }
            if (typeof S !== "undefined" && S) {
                if (e.identifier === "Spearman") {
                    this.notify("cAIus3w2", "recruitUnitExecution")
                } else {
                    return
                }
            }
            if (s.habitatUnitOrders.length >= u.maxItemsInRecruitingList) {
                var n = o.getValueOf("Gold");
                var h = $.sprintf(o.getValueOf("Your unit order queue is full. An additional slot costs %d %@\nYou have %d %@"), e.buildSpeedupCost * i, n, t.gold, n);
                utils.dialog.confirm(this, h, n, function () {
                    if (t.gold < i) {
                        a.notify("Vjkw%oMN", a, {
                            costs: e.buildSpeedupCost * i
                        })
                    } else {
                        _.storeSession.removeItem(l);
                        a.datasource.recruit(s.id, e.primaryKey, i, true);
                        a.notify("ha_wIcAy", a, {
                            msg: "recruitUnit",
                            data: e.primaryKey
                        })
                    }
                })
            } else {
                _.storeSession.removeItem(l);
                this.datasource.recruit(s.id, e.primaryKey, i, false);
                this.notify("ha_wIcAy", this, {
                    msg: "recruitUnit",
                    data: e.primaryKey
                })
            }
        };
        e.prototype["upM8yCA)"] = function (l) {
            var e = l.data;
            var i = translate("Gold");
            var n, r;
            var a = this;
            var s = e.unit.buildSpeedupCost * e.orderAmount;
            if (e.isHalfDurationReached() === true || e.isSpeededup() === true) {
                n = o.getValueOf("Finishing recruiting %d x %@ instantly costs %d %@. You have %d %@.");
                r = $.sprintf(n, e.orderAmount, o.getValueOf(e.unit.identifier), s, i, t.gold, i);
                utils.dialog.confirm(this, r, i, function () {
                    if (t.gold < s) {
                        a.notify("Vjkw%oMN", a, {
                            costs: s
                        })
                    } else {
                        a.datasource.finishUnit(e.id)
                    }
                })
            } else {
                n = o.getValueOf("Reducing recruition time for %d x %@ costs %d %@. You have %d %@.");
                r = $.sprintf(n, e.orderAmount, o.getValueOf(e.unit.identifier), s, i, t.gold, i);
                utils.dialog.confirm(this, r, i, function () {
                    if (t.gold < s) {
                        a.notify("Vjkw%oMN", a, {
                            costs: s
                        })
                    } else {
                        a.datasource.speedUpUnit(e.id)
                    }
                })
            }
        };
        e.prototype["KZ39F9(&"] = function (e) {
            var t = e.parent.parent.habitat;
            this.notify("1mA0BwR5", this, {
                x: +t.mapX,
                y: +t.mapY
            })
        };
        e.prototype["Nv1SRq%h"] = function (e) {
            if (utils.dict.size(t.habitate) === 1) {
                return
            }
            this.notify("BRH1gaaU", {
                foreignHabitat: this.view.habitat,
                exclusionIDs: [this.name],
                action: "sendResources"
            })
        };
        e.prototype["y4v5LjlU"] = function (e) {
            if (utils.dict.size(t.habitate) === 1) {
                return
            }
            this.notify("BRH1gaaU", {
                foreignHabitat: this.view.habitat,
                exclusionIDs: [this.name],
                action: "sendDefense"
            })
        };
        e.prototype.isSomethingEntered = function (t) {
            var e = false;
            for (var i in t) {
                if (t[i] !== 0) {
                    e = true
                }
            }
            return e
        };
        e.prototype["gEOWQs1z"] = function (r) {
            var t = this.view.findSubviewByField("tag", "currentView");
            var s = this;
            if (t === null || t.group != "SendStuffView") {
                return
            }
            var e = t.resourceTable.getInputValues();
            var i = t.unitTable.getInputValues();
            var a = t.validate();
            if (a.capa > a.maxCapa) {
                this.assignDialogShown = true;
                var n = translate("Please assign more transport units or reduce the amount of resources.");
                utils.dialog.alert(this, n, translate("Transport"), function () {
                    s.assignDialogShown = false
                });
                return
            }
            if (this.isSomethingEntered(e) === false) {
                utils.dialog.alert(this, translate("no resources selected"), translate("Send Resources"), function () {});
                return
            }
            if (this.isSomethingEntered(i) === false) {
                utils.dialog.alert(this, translate("No untis were assigned."), translate("Send Resources"), function () {});
                return
            }
            this.datasource.sendResources(this.selectedSourceHabitatID, this.view.habitat.id, v.TRANSPORT, i, e);
            this["0scd3paU"]()
        };
        e.prototype["x2S3grE0"] = function (i) {
            var t = this.view.findSubviewByField("tag", "currentView");
            if (t === null || t.group != "SendStuffView") {
                return
            }
            var e = t.unitTable.getInputValues();
            if (this.isSomethingEntered(e) === false) {
                utils.dialog.alert(this, translate("No untis were assigned."), translate("Defend Habitat"), function () {});
                return
            }
            this.datasource.defendHabitat(this.selectedSourceHabitatID, this.view.habitat.id, v.DEFENSE, e);
            this["0scd3paU"]()
        };
        e.prototype["qeuhDHxS"] = function (e) {
            var i = y[e.parent.unitID];
            this.showNextViewOfClass(d.UnitView, {
                unit: i,
                habitat: t.habitate[this.name]
            })
        };
        e.prototype["L0wl2qRL"] = function (t, i) {
            var e = this.notify("eYyq%qI6", this, t.data);
            this.notify("J0N%It)p", this, e)
        };
        e.prototype["SwZN8dIg"] = function (i) {
            var e = this.actionSource === "headlinePaginator" ? "simple" : true;
            this.showNextViewOfClass(d.TransitList, {
                showBack: false,
                transits: t.habitate[this.name].habitatTransits,
                styles: "transitList",
                group: "habitatTransitList"
            }, e)
        };
        e.prototype["JLA4)vG_"] = function (t) {
            this.showNextViewOfClass(d.TransitDetail, {
                model: t.model
            })
        };
        e.prototype["fy%m)6d("] = function (t) {
            var e = t.data.habitat;
            this.notify("qsh7)BXL", this, e)
        };
        e.prototype["TfueoDRt"] = function (t) {
            this.notify("CcFE9soE", this, t.data.playerID)
        };
        e.prototype["CDwdD6%i"] = function (t) {
            var e = t.data.alliance;
            this.notify("43M&Wxm4", this, e)
        };
        e.prototype["kZbiWxRm"] = function (t) {
            this.notify("kZbiWxRm", this)
        };
        e.prototype["82_(qMdC"] = function (e) {
            this.notify("GRRiDN-v", this, {
                start: this.view.habitat,
                end: t.habitate[e.name]
            })
        };
        e.prototype["3yT4U8Jh"] = function (t) {
            this.notify("sMs0EI2k", this)
        };
        e.prototype["EmxE78NQ"] = function (t) {
            var e = t.data;
            var i = t.data.destinationHabitat;
            var a = t.data.destinationETA;
            this.notify("BRH1gaaU", {
                action: e.transitType === v.DEFENSE ? "syncDefense" : "syncAttack",
                foreignHabitat: i,
                exclusionIDs: [this.name],
                destinationETA: a,
                syncTransit: e
            })
        };
        return e
    }(n.Controller);
    d.Window = function (i) {
        utils.__extends(e, n.Window);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addOption("drawn", false);
            this.addOption("foreign", false);
            this.addOption("showCastleScene", true);
            this.addOption("toolbarControls", []);
            this.setOptions(t);
            this.create()
        }
        e.prototype.draw = function () {
            e.__super__.draw.apply(this, arguments);
            var t = Se("habitat-" + this.habitat.id);
            if (this.controller.currentTab) {
                t.clear();
                t.$bar.find(".tab." + this.controller.currentTab).addClass("active")
            }
        };
        e.prototype.create = function () {
            var s;
            this.habitat = t.habitate[this.habitat.id];
            if (this.showCastleScene) {
                this.createCastleScene()
            } else {
                this.habitatView = this.content.createSubview(this.content, {
                    name: "miniView",
                    tag: "currentHabitat",
                    habitat: this.habitat,
                    headline: this.headline
                }, d.MiniView)
            }
            var e = this.createSubview(this.contentContainer, {
                name: "resourceHeaderTableContainer",
                styles: "resourceHeaderTableContainer fixedWindowBar",
                clickMessage: null
            }, $e);
            var i = this.habitat.getColorClass();
            this.resourceTable = this.createSubview(e, {
                name: "resourceHeaderTable",
                styles: "resourceHeaderTable",
                resourceColors: i,
                showNames: false,
                clickMessage: null,
                habitat: this.habitat,
                generate: true,
                negativePeople: true,
                filterArray: [a.WOOD, a.STONE, a.ORE, a.PEOPLE, a.COPPER, a.SILVER]
            }, P.Table);
            this.resourceTable.clearfix();
            this.addTabbar()
        };
        e.prototype.createCastleScene = function () {
            this.habitatView = this.content.createSubview(this.content, {
                name: "habitatView",
                tag: "currentView",
                styles: "habitatView contentCurrentView",
                habitat: this.habitat,
                headline: this.headline
            }, d.View)
        };
        e.prototype.addTabbar = function () {
            this.subviews[0].deleteSubviewByField("name", "habitatTabBar");
            var s = utils.dict.size(t.habitate) > 1,
                n = "tabbar habitat-" + this.habitat.id,
                i;
            if (!s) {
                n += " singleCastle"
            }
            this.tabbar = this.createSubview(this.subviews[0], {
                styles: n,
                name: "habitatTabBar"
            });
            i = [{
                name: "castle",
                icon: "castle",
                action: "visitCastle",
                hoverText: "Castle"
            }, {
                name: "buildings",
                icon: "buildings",
                action: "buildingList",
                hoverText: "Habitat Buildings"
            }, {
                name: "troops",
                icon: "troops",
                action: "unitList",
                hoverText: "Troop overview"
            }, {
                name: "transists",
                icon: "trade",
                action: "transports",
                hoverText: "Transits"
            }];
            for (var a = 0; a < i.length; a++) {
                var e = i[a],
                    r;
                r = this.tabbar.createSubview(this.tabbar, {
                    styles: "tab",
                    icon: e.icon,
                    name: e.name,
                    clickMessage: "AAeX&RO7",
                    data: {
                        action: e.action
                    },
                    hoverText: translate(e.hoverText)
                }, d.TabButton);
                this.toolbarControls.push(r)
            }
            if (s) {
                this._addSpecialTabs()
            }
            this.tabbar.clearfix();
            this.tabbar.draw()
        };
        e.prototype._addSpecialTabs = function () {
            var t = this.tabbar.createSubview(this.tabbar, {
                styles: "specials"
            });
            t.createSubview(t, {
                content: this.getIcon("transitDefenseWhite"),
                clickMessage: "AAeX&RO7",
                data: {
                    action: "sendDefense"
                },
                hover: translate("Defend Habitat")
            }, l);
            t.createSubview(t, {
                content: this.getIcon("transportWhite"),
                clickMessage: "AAeX&RO7",
                data: {
                    action: "sendResources"
                },
                hover: translate("Send Resources")
            }, l)
        };
        return e
    }(n.Window);
    d.TabButton = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("icon");
            this.addOption("hoverText");
            this.setOptions(e);
            this.styleArray.push(this.data.action)
        }
        t.prototype.create = function () {
            var t = this.notify("rvHW39mY", this, {
                imageName: this.icon + "_active",
                imageCategory: "tabs"
            }),
                e = this.notify("rvHW39mY", this, {
                    imageName: this.icon + "_active",
                    imageCategory: "tabs"
                }),
                i = $(t).attr("src"),
                a = $(e).attr("src");
            this.attributes = {
                "data-default": i,
                "data-active": a
            };
            this.createSubview(this, {
                styles: "tab-content",
                content: t,
                lazyHoverClass: p.TabHover,
                lazyHoverOptions: {
                    name: this.hoverText
                }
            }, N)
        };
        return t
    }(e);
    Pe.DetailView = function (s) {
        utils.__extends(i, e);

        function i(e, t) {
            i.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.setOptions(t)
        }
        i.prototype.create = function () {
            this.deleteAllSubviews();
            if (this.data == null) {
                return
            }
            var p = this.habitat.id;
            var t = null;
            for (var s in A) {
                if (A[s].primaryKey == this.data) {
                    t = A[s]
                }
            }
            var i;
            i = {
                parent: this,
                name: "knowledgeHeader",
                styles: "knowledgeHeader",
                content: this.createKnowledgeHeader(t)
            };
            this.addSubview(new e(this.controller, i));
            i = {
                parent: this,
                name: "knowledgeDescription",
                styles: "knowledgeDescription",
                content: "<span>" + t.getDescription() + "</span>"
            };
            this.addSubview(new e(this.controller, i));
            if (t.requiredKnowledges != null) {
                for (s = 0; s < t.requiredKnowledges.length > 0; s++) {
                    var d = A[t.requiredKnowledges[s]].identifier;
                    var n = $("<div class='container'>");
                    n.append(this.notify("rvHW39mY", this, {
                        imageName: d,
                        imageCategory: "knowledges"
                    }));
                    n.append('<div class="featureName">' + o.getValueOf("Required knowledge") + ":  </div>");
                    n.append('<div class="buildingLevel"> ' + o.getValueOf(d) + "</div>");
                    var u;
                    if (this.isKnowledgeResearched(t, p)) {
                        u = "knowledgeEnablesBlock"
                    } else {
                        u = "knowledgeEnablesBlock red"
                    }
                    i = {
                        parent: this,
                        name: "missionHeader",
                        styles: u,
                        content: n,
                        data: A[t.requiredKnowledges[s]],
                        clickMessage: "dfVcBLI3"
                    };
                    this.addSubview(new e(this.controller, i))
                }
            }
            i = {
                parent: this,
                name: "knowledgeCosts",
                styles: "knowledgeCosts",
                content: o.getValueOf("Cost") + ":"
            };
            var h = new e(this.controller, i);
            this.addSubview(h);
            if (t.volumeAmount != null && t.volumeAmount != 0) {
                t.buildResources[a.PEOPLE] = t.volumeAmount
            }
            h.createSubview(h, {
                name: "knowledgeResourcesTable",
                styles: "knowledgeResourcesTable",
                resources: t.buildResources,
                time: t.buildDuration
            }, P.Table);
            var r = t.getEnabled();
            if (r.enables.length > 0) {
                i = {
                    parent: this,
                    name: "knowledgeEnablesBlock",
                    styles: "knowledgeEnablesBlock",
                    content: o.getValueOf("Enables") + ":"
                };
                var c = new e(this.controller, i);
                this.addSubview(c);
                i = {
                    parent: c,
                    name: "enabledFeatures",
                    styles: "enabledFeatures",
                    enabledFeatures: r.enables,
                    knowledge: t
                };
                c.addSubview(new Ie(this.controller, i))
            }
            if (r.bonus.length > 0) {
                i = {
                    parent: this,
                    name: "knowledgeBonusBlock",
                    styles: "knowledgeEnablesBlock",
                    content: o.getValueOf("Modifies") + ":"
                };
                var l = new e(this.controller, i);
                this.addSubview(l);
                i = {
                    parent: l,
                    name: "enabledFeatures",
                    styles: "enabledFeatures",
                    enabledFeatures: r.bonus,
                    knowledge: t
                };
                l.addSubview(new Ie(this.controller, i))
            }
        };
        i.prototype.createKnowledgeHeader = function (i) {
            var e = i.identifier.split("/")[0];
            var a = this.notify("rvHW39mY", this, {
                imageName: e,
                imageCategory: "knowledges"
            });
            var t = $("<div>");
            t.append(a);
            t.append("<div class='knowledgeName'>" + o.getValueOf(e) + "</div>");
            return t
        };
        i.prototype.getKnowledgeResources = function (i) {
            var e = i.identifier.split("/")[0];
            var a = this.notify("rvHW39mY", this, {
                imageName: e,
                imageCategory: "knowledges"
            });
            var t = $("<div>");
            t.append(a);
            t.append("<div class='knowledgeName'>" + e + "</div>");
            return t
        };
        i.prototype.isKnowledgeResearched = function (i, a) {
            var s;
            var e = false;
            $.each(t.habitate[a].habitatKnowledges, function (a, t) {
                if (t != null && t.primaryKey === i.primaryKey) {
                    e = true
                }
            });
            return e
        };
        return i
    }(e);
    Ie = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("enabledFeatures", null);
            this.addOption("knowledge", null);
            this.setOptions(e);
            this.create()
        }
        t.prototype.create = function () {
            var t = this.enabledFeatures;
            if (t.length > 0) {
                for (var e = 0; e < t.length; e++) {
                    switch (t[e].origin) {
                    case "building":
                        this.createBuilding(t[e]);
                        break;
                    case "units":
                        this.createUnit(t[e]);
                        break;
                    case "modifier":
                        this.createModifier(t[e]);
                        break;
                    case "knowledge":
                        this.createKnowledge(t[e]);
                        break
                    }
                }
            }
        };
        t.prototype.createBuilding = function (t) {
            var a;
            var s = t.identifier.split("/")[0];
            var i = $("<div>");
            i.append(this.notify("rvHW39mY", this, {
                imageName: s,
                imageCategory: "buildings"
            }));
            i.append('<div class="featureName">' + o.getValueOf(s) + '</div><div class="buildingLevel">' + o.getValueOf("Level") + " " + t.level + "</div>");
            a = {
                parent: this,
                name: "missionHeader",
                styles: "knowledgeEnablesBlock enabledElement",
                content: i,
                data: t,
                clickMessage: "Lnoqxcc7"
            };
            this.addSubview(new e(this.controller, a))
        };
        t.prototype.createUnit = function (t) {
            var a;
            var s = t.primaryKey + "";
            var i = $("<div>");
            i.append(this.notify("rvHW39mY", this, {
                imageName: s,
                imageCategory: "units"
            }));
            i.append('<div class="featureName">' + o.getValueOf(t.identifier) + "</div>");
            a = {
                parent: this,
                name: "missionHeader",
                styles: "knowledgeEnablesBlock enabledElement",
                content: i,
                data: t,
                clickMessage: "Lnoqxcc7"
            };
            this.addSubview(new e(this.controller, a))
        };
        t.prototype.createModifier = function (i) {
            var a;
            var t = $("<div>");
            t.append(this.notify("rvHW39mY", this, {
                imageName: be[i.primaryKey].type + "",
                imageCategory: "modifiers"
            }));
            t.append('<div class="featureName">' + o.getValueOf(i.identifier) + "</div>");
            a = {
                parent: this,
                name: "missionHeader",
                styles: "knowledgeEnablesBlock",
                content: t
            };
            this.addSubview(new e(this.controller, a))
        };
        t.prototype.createKnowledge = function (t) {
            var a;
            var i = $("<div>");
            i.append(this.notify("rvHW39mY", this, {
                imageName: t.identifier,
                imageCategory: "knowledges"
            }));
            i.append('<div class="featureName">' + o.getValueOf(t.identifier) + "</div>");
            a = {
                parent: this,
                name: "missionHeader",
                styles: "knowledgeEnablesBlock enabledElement",
                content: i,
                data: t,
                clickMessage: "Lnoqxcc7"
            };
            this.addSubview(new e(this.controller, a))
        };
        return t
    }(e);
    hi.View = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addRequired("marketRate");
            this.addRequired("building");
            this.setOptions(e);
            this.styleArray.push("marketView")
        }
        t.prototype.create = function () {
            var e;
            var r = translate(he[this.marketRate.resourceID]);
            var i = this.createContainer({
                styles: "unitContainer"
            });
            i.createSubview(i, {
                title: translate("Transport units")
            }, I);
            e = {
                name: "marketUnitTable",
                units: this.habitat.stats.units.own,
                recruit: false,
                inputFields: true,
                maxButtonClickMessage: "0YYZ86wN",
                inputChangeMessage: "pXDKHMVd",
                sessionPrefix: "marketUnit_" + this.marketRate.resourceID,
                habitat: this.habitat
            };
            this.unitTable = i.createSubview(i, e, b.Table);
            this.durationContainer = this.createContainer({
                styles: "durationContainer"
            });
            this.transDuration = this.durationContainer.createSubview(this.durationContainer, {
                showIcon: true,
                showText: true,
                caption: translate("Transport duration"),
                formatFunction: utils.date.secToTimeStr,
                styles: "durationElement duration"
            }, K);
            this.durationContainer.clearfix();
            this.transETA = this.durationContainer.createSubview(this.durationContainer, {
                showIcon: true,
                showText: true,
                caption: translate("Destination ETA"),
                formatFunction: utils.date.formatDateTime,
                styles: "durationElement eta"
            }, K);
            this.notify("_V6%tK-F", this);
            this.durationContainer.clearfix();
            this.transKapa = this.durationContainer.createSubview(this.durationContainer, {
                showIcon: true,
                showText: true,
                showColors: true,
                caption: translate("Transport capacity"),
                capacity: 0,
                maxCapacity: 0,
                styles: "durationElement capacity",
                capacityButton: true
            }, vi);
            var o = "resourceContainer";
            if (["Wood", "Stone", "Ore"].indexOf(r) !== -1) {
                o += " marketResources"
            }
            var s = this.createContainer({
                styles: o
            });
            s.createSubview(s, {
                title: translate("Offered resources")
            }, I);
            var n = [a.WOOD, a.STONE, a.ORE];
            var u = this.marketRate.resourceID.toString();
            if (n.indexOf(u) !== -1) {
                n.splice(n.indexOf(u), 1)
            }
            this.resourceTable = s.createSubview(s, {
                name: "marketResourceTable",
                habitat: this.habitat,
                resourceColors: this.habitat.getColorClass(),
                clickMessage: null,
                filterArray: n,
                inputFields: true,
                maxButtonClickMessage: "FkmtgzzI",
                inputChangeMessage: "LlaR3waZ",
                rates: this.marketRate,
                sessionPrefix: "marketResource_" + this.marketRate.resourceID
            }, P.Table);
            var t = this.createContainer({
                styles: "typeContainer"
            });
            e = {
                title: r
            };
            this.createSubview(t, e, I);
            t.createSubview(t, {
                content: this.notify("rvHW39mY", this, {
                    imageName: "transportWhite",
                    imageCategory: "icons"
                }),
                hover: translate("Barter %@", r),
                clickMessage: "S9FpjbCK"
            }, l);
            this.wantedResource = t.createSubview(t, {
                resourceName: null,
                resourceID: this.marketRate.resourceID,
                amount: 0,
                style: "requiredResource"
            }, P.Element)
        };
        t.prototype.validate = function (u) {
            var o = this.unitTable.getSelectedUnits();
            var l = this.unitTable.getAllFieldValues();
            var e = this.resourceTable.getAllFieldValues();
            var n;
            var r = 0;
            var t, i;
            for (t = 0; t < e.length; t++) {
                n = this.marketRate.rates[e[t].id];
                e[t].value = Math.floor(e[t].value / n) * n;
                r = r + e[t].value / n
            }
            var a = 0,
                s = 0;
            for (t = 0; t < o.length; t++) {
                for (i = 0; i < l.length; i++) {
                    if (o[t].primaryKey == parseInt(l[i].id, 10)) {
                        a += o[t].storeAmount * l[i].value
                    }
                }
            }
            for (t = 0; t < e.length; t++) {
                s += e[t].value
            }
            if (u && s > a) {
                this.notify("kzLxj4Vx", this, {
                    capacity: s,
                    maxCapacity: a
                });
                return {
                    valid: false,
                    capa: s,
                    maxCapa: a,
                    amount: r
                }
            }
            return {
                valid: true,
                capa: s,
                maxCapa: a,
                amount: r
            }
        };
        t.prototype.getFormDataForXHRAction = function () {
            var i = this.unitTable.getAllFieldValues();
            var e = this.resourceTable.getAllFieldValues();
            var a = {}, s = {}, t;
            for (t = 0; t < i.length; t++) {
                a[i[t].id] = i[t].value
            }
            for (t = 0; t < e.length; t++) {
                if (parseInt(e[t].value, 10) !== 0) {
                    s[e[t].id] = e[t].value
                }
            }
            return {
                units: a,
                resources: s
            }
        };
        t.prototype.updateDurations = function () {
            var i = this.unitTable.getSelectedUnits();
            var t = this.habitat.getSlowestHabitatUnit(i) * this.building.marketDistance;
            this.transDuration.dataUpdate(null, {
                time: t
            });
            var a = t > 0 ? (new Date).getTime() : 0;
            this.transETA.dataUpdate(null, {
                time: t * 1e3 + a
            });
            var e = this.validate(true);
            this.transKapa.dataUpdate(null, {
                capacity: e.capa,
                maxCapacity: e.maxCapa
            });
            this.wantedResource.dataUpdate(null, {
                amount: e.amount
            });
            this.durationContainer.draw();
            this.wantedResource.draw()
        };
        t.prototype.getMaxTransportCapacity = function () {
            var t = this.validate(false);
            return t.maxCapa
        };
        t.prototype.timeEvent = function () {
            this.updateDurations()
        };
        return t
    }(e);
    ni = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("rates");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var t;
            this.createSubview(this, {
                content: translate("Available market resources"),
                styles: "title"
            });
            for (var e in this.rates) {
                t = this.createSubview(this, {
                    styles: "resources"
                });
                t.createSubview(t, {
                    resourceID: e,
                    styles: "resourceIcons"
                }, P.Element);
                t.createSubview(t, {
                    content: "1 : " + this.rates[e],
                    styles: "resourceAmount"
                })
            }
            this.clearfix()
        };
        return t
    }(R);
    oi = function (i) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("building");
            this.addOption("itemClickMessage", null);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var t;
            if (typeof this.building.marketRates == "undefined" || this.building.marketRates === null) {
                return
            }
            for (var i = 0; i < this.building.marketRates.length; i++) {
                t = this.building.marketRates[i];
                var e = this.createSubview(this, {
                    styles: "marketListItem"
                }, w);
                e.createSubview(e, {
                    resourceID: t.resourceID,
                    resourceName: null,
                    styles: "resource"
                }, P.Element);
                var a = new ni(this.controller, {
                    rates: t.rates,
                    styles: "tradeHover"
                });
                a.create();
                e.createSubview(e, {
                    content: this.notify("rvHW39mY", this, {
                        imageName: "change",
                        imageCategory: "icons"
                    }),
                    hoverView: a,
                    clickMessage: this.itemClickMessage,
                    data: t
                }, l)
            }
        };
        return t
    }(e);
    d.KeepCapacityItem = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("icon", "");
            this.addOption("max", "");
            this.addOption("currentVolume", "");
            this.setOptions(e);
            this.styleArray.push("keepCapacityItem")
        }

        function i(t, e) {
            return t + " / " + e
        }
        t.prototype.create = function () {
            this.createSubview(this, {
                content: this.icon,
                styles: "icon"
            });
            this.createSubview(this, {
                content: i(this.currentVolume, this.max),
                styles: "text"
            })
        };
        return t
    }(e);
    d.MiniController = function (i) {
        utils.__extends(e, n.Controller);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.setOptions(t);
            this.animationTimerID = null;
            this.actionState = ""
        }
        e.prototype.dataUpdate = function (e, i) {
            if (t.habitate[this.habitat.id]) {
                this.habitat = t.habitate[this.habitat.id];
                this.view.resourceTable.dataUpdate(e, {
                    resourceColors: this.habitat.getColorClass(),
                    habitat: this.habitat
                })
            }
            var a = this.habitat.name;
            this.view.headline.title.content = a;
            this.view.dataUpdate(e, i[this.habitat.id]);
            this.draw()
        };
        e.prototype["AAeX&RO7"] = function (t, i) {
            var e = this.habitat.id;
            this.notify("AAeX&RO7", this, {
                action: t.data.action,
                habitatID: e,
                data: t.data
            })
        };
        e.prototype["Yoqka19h"] = function (t, i) {
            var e = this.habitat;
            this.notify("Yoqka19h", this, {
                action: t.data.action,
                habitat: e,
                data: t.data
            })
        };
        e.prototype["zkXilX_h"] = function () {
            for (var s in t.habitate) {
                var a = t.habitate[s];
                for (var i = 0; i < a.habitatTransits.length; i++) {
                    var e = a.habitatTransits[i];
                    if (e.destinationHabitat !== null && e.destinationHabitat.id == this.habitat.id || e.sourceHabitat !== null && e.sourceHabitat.id == this.habitat.id) {
                        return true
                    }
                }
            }
            return false
        };
        e.prototype["vkycgQL)"] = function (t, e) {
            return this.notify("vkycgQL)", t, e)
        };
        return e
    }(n.Controller);
    d.MiniView = function (a) {
        utils.__extends(i, e);

        function i(e, t) {
            i.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addOption("headline", null);
            this.setOptions(t)
        }
        i.prototype.create = function () {
            var r;
            this.createToolbar(this);
            this.createHeadlineButtons(this.headline);
            this.toolbar.clearfix();
            var e = [],
                i, a;
            e.push({
                content: this.notify("rvHW39mY", this, {
                    imageName: "buttonCastleWhite",
                    imageCategory: "icons"
                }),
                action: "visitCastle",
                hover: translate("Castle")
            });
            e.push({
                content: this.notify("rvHW39mY", this, {
                    imageName: "buttonBuildingsWhite",
                    imageCategory: "icons"
                }),
                action: "buildingList",
                hover: translate("Habitat Buildings")
            });
            e.push({
                content: this.notify("rvHW39mY", this, {
                    imageName: "buttonTroopsWhite",
                    imageCategory: "icons"
                }),
                action: "unitList",
                hover: translate("Troop overview")
            });
            if (utils.dict.size(t.habitate) > 1) {
                i = "";
                a = "sendResources"
            } else {
                i = "disabled";
                a = ""
            }
            e.push({
                content: this.notify("rvHW39mY", this, {
                    imageName: "transportWhite",
                    imageCategory: "icons"
                }),
                action: a,
                hover: translate("Send Resources"),
                styles: i
            });
            if (utils.dict.size(t.habitate) > 1) {
                i = "";
                a = "sendDefense"
            } else {
                i = "disabled";
                a = ""
            }
            e.push({
                content: this.notify("rvHW39mY", this, {
                    imageName: "transitDefenseWhite",
                    imageCategory: "icons"
                }),
                action: a,
                hover: translate("Defend Habitat"),
                styles: i
            });
            e.push({
                content: this.notify("rvHW39mY", this, {
                    imageName: "pasteBoardCastleWhite",
                    imageCategory: "icons"
                }),
                action: "copyCastleLink",
                hover: translate("Copy castle link")
            });
            e.push({
                content: this.notify("rvHW39mY", this, {
                    imageName: "buttonMapWhite",
                    imageCategory: "icons"
                }),
                action: "markCastle",
                hover: translate("mark castle")
            });
            if (typeof this.habitat.habitatTransits != "undefined" && this.habitat.habitatTransits.length > 0 || this.notify("zkXilX_h", this)) {
                i = "";
                a = "transports"
            } else {
                i = "disabled";
                a = ""
            }
            e.push({
                content: this.notify("rvHW39mY", this, {
                    imageName: "tradeWhite",
                    imageCategory: "icons"
                }),
                action: a,
                styles: i,
                hover: translate("Transits")
            });
            e.push({
                content: this.notify("rvHW39mY", this, {
                    imageName: "centerHabitatWhite",
                    imageCategory: "icons"
                }),
                action: "centerCastle",
                hover: translate("Map")
            });
            for (var s = 0; s < e.length; s++) {
                this.createSubview(this, {
                    content: e[s].content,
                    hover: e[s].hover,
                    clickMessage: "AAeX&RO7",
                    styles: e[s].styles,
                    data: {
                        action: e[s].action
                    }
                }, l)
            }
            var n = this.notify("vkycgQL)", this, this.habitat.creationDate);
            if (n !== "") {
                this.createSubview(this, {
                    content: translate("Castle is protected by newbie protection until %@.", n),
                    styles: "title wood-hl vacation"
                })
            }
            if (t.isOnVacation && t.isOnVacation.toString() !== "false") {
                this.createSubview(this, {
                    content: translate("Player is on vacation."),
                    styles: "title wood-hl vacation"
                })
            }
        };
        return i
    }(e);
    d.UnitView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("unit");
            this.addRequired("habitat");
            this.addOption("group", "UnitView");
            this.setOptions(e);
            this.styleArray.push("unitDetail")
        }
        t.prototype.create = function () {
            this.descriptionContainer = this.createContainer({
                styles: "descriptionContainer"
            }), this.detailContainer = this.createContainer({
                styles: "detailContainer"
            });
            if (this.habitat !== null) {
                this.unitMod = this.unit.applyAllModifiers(this.habitat)
            } else {
                this.unitMod = this.unit
            }
            this.createSubview(this.descriptionContainer, {
                title: translate(this.unitMod.identifier)
            }, I);
            hoverView = new b.HoverView(this.controller, {
                unit: this.unit,
                habitat: this.habitat
            });
            hoverView.create();
            this.createSubview(this.descriptionContainer, {
                styles: "image",
                content: this.notify("rvHW39mY", this, {
                    imageCategory: "unitsLarge",
                    imageName: this.unit.primaryKey.toString()
                }),
                hoverView: hoverView
            }, N);
            this.createSubview(this.descriptionContainer, {
                styles: "description",
                content: translate("BKServerUnit-" + this.unit.primaryKey)
            });
            this.createValues()
        };
        t.prototype.createValues = function () {
            this.createSubview(this.detailContainer, {
                title: translate("Values")
            }, I);
            this.createTitles();
            this.createDetails();
            this.detailContainer.clearfix();
            if (this.unit.battleValues) {
                this.createBattleValues()
            }
        };
        t.prototype.createTitles = function () {
            var t = this.detailContainer.createSubview(this.detailContainer, {
                styles: "titles"
            });
            this.createSubview(t, {
                content: translate("Speed")
            });
            this.createSubview(t, {
                content: translate("Transport capacity")
            });
            this.createSubview(t, {
                content: translate("Corps")
            })
        };
        t.prototype.createDetails = function () {
            var e = this.detailContainer.createSubview(this.detailContainer, {
                styles: "details"
            });
            this.createSubview(e, {
                content: $.sprintf(o.getValueOf("%0.1f minutes per field"), this.unitMod.secondsPerField / 60)
            });
            this.createSubview(e, {
                content: this.unitMod.storeAmount
            });
            var t = this.createSubview(e, {
                styles: "corps"
            });
            t.createSubview(t, {
                content: this.notify("rvHW39mY", this, {
                    imageCategory: "icons",
                    imageName: this.unit.corps
                })
            });
            t.createSubview(t, {
                content: translate(this.unitMod.corps)
            })
        };
        t.prototype.createBattleValues = function () {
            var r, e;
            var n = this.createSubview(this.detailContainer, {
                styles: "battleValueList"
            }),
                t, a, s;
            for (var i in this.unitMod.battleValues) {
                e = this.unitMod.battleValues[i];
                t = this.createSubview(n, {
                    styles: "row"
                });
                t.createSubview(t, {
                    styles: "categoryIcon",
                    content: this.notify("rvHW39mY", this, {
                        imageCategory: "icons",
                        imageName: i
                    })
                });
                t.createSubview(t, {
                    styles: "name",
                    content: translate(i)
                });
                a = t.createSubview(t, {
                    styles: "attackRow"
                });
                this.createImageWithValue(a, "attack", e.offense);
                s = t.createSubview(t, {
                    styles: "defenceRow"
                });
                this.createImageWithValue(s, "defense", e.defense);
                t.clearfix()
            }
        };
        t.prototype.createImageWithValue = function (t, e, i) {
            t.createSubview(t, {
                content: this.notify("rvHW39mY", this, {
                    imageCategory: "icons",
                    imageName: e
                })
            });
            t.createSubview(t, {
                content: i
            })
        };
        return t
    }(e);
    D.ActionController = function (s) {
        "use strict";
        utils.__extends(e, s);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addOption("exclusionIDs", []);
            this.addOption("miniController", null);
            this.addOption("syncTransit", null);
            this.setOptions(t);
            this.updateCache = [];
            this.listItemsWithTimers = {}
        }

        function i(t) {
            var e = false;
            for (var i in t) {
                if (t[i] !== 0) {
                    e = true
                }
            }
            return e
        }
        e.prototype.dataUpdate = function (t, e) {
            if (!this.initialDataupdateDone) {
                this.initialDataupdateDone = true;
                this.notify("_f3L_ht_", this.view);
                window.setTimeout(function () {
                    if (this.view) {
                        this.view.dataUpdate.call(this.view, t, e);
                        this.notify("VY71NNds", this.view);
                        this.notify("BRfyQ)_c", this.view.castleList);
                        this.notify("_V6%tK-F", this.view.castleList)
                    }
                }.bind(this), 500)
            } else {
                this.notify("_f3L_ht_", this.view);
                window.setTimeout(function () {
                    this.notify("VY71NNds", this.view)
                }.bind(this), 500);
                this.deltaUpdate(t, e)
            }
        };
        e.prototype.deltaUpdate = function (t, e) {
            this.view.castleList.deltaUpdate(t, e)
        };
        e.prototype["nsK5jgWj"] = function () {
            e.__super__["nsK5jgWj"].apply(this, arguments);
            this.view.rebuildResourceHeader()
        };
        e.prototype["aBdTswLK"] = function () {
            this.closeMiniWindow();
            this.clearSessionStorage();
            this.notify("sMs0EI2k", this);
            this.notify("BRfyQ)_c", this.view.castleList);
            e.__super__["aBdTswLK"].apply(this, arguments)
        };
        e.prototype.closeMiniWindow = function () {
            if (!this.miniController) {
                return
            }
            this.notify("IvTCew1X", this.miniController);
            this.miniController = null
        };
        e.prototype["&-QE2RMM"] = function (t, e, i) {
            this.datasource.prepareData(t, e, i);
            this.datasource.publishDeltaUpdate()
        };
        e.prototype["urEb4YbM"] = function (n, l) {
            var i = t.habitate[l.habitatID],
                r = l.unitInfos,
                a = l.resourceInfos;
            var o = this._calculateDuration(i, r, a);
            var p = this._calculateArrivalTime(o);
            var e = this._calculateCapacity(r, a);
            if (e) {
                var s = e.max;
                for (var u = 0, d = a.length; u < d; u++) {
                    var c = a[u];
                    var h = c.value;
                    if (s < h) {
                        c.value = s
                    }
                    s -= h;
                    if (s < 0) {
                        s = 0
                    }
                }
                if (e.used > e.max) {
                    e.used = e.max
                }
                n.updateResourceTable(a, i.id)
            }
            if (typeof S !== "undefined" && S) {
                if (r.length > 0) {
                    this.notify("cAIus3w2", "attackInfo")
                }
            }
            if (o === 0) {
                n.hideActions(i.id);
                this.view.castleList.removeTimerForEntry(i.id)
            } else {
                n.updateCapacity(i.id, o, p, e, this.datasource.destinationETA);
                this.view.castleList.addTimerForEntry(i.id)
            }
        };
        e.prototype["M57F1C)j"] = function (h, n) {
            var l = t.habitate[n.habitatID],
                e = n.unitInfos,
                r = n.resourceInfos,
                o = this.view.action,
                i, a;
            var u = this._calculateDuration(l, e, r);
            var s = this._calculateCapacity(e, r);
            if (s && s.used > s.max) {
                i = translate("Please assign more transport units or reduce the amount of resources.");
                a = translate("Transport");
                utils.dialog.alert(this, i, a);
                return
            }
            if (o === "sendSpy") {
                e = []
            }
            if (o !== "sendSpy" && e.length === 0) {
                i = translate("No untis were assigned.");
                a = translate("Attack Habitat");
                utils.dialog.alert(this, i, a);
                return
            }
            this["_actions_" + o]({
                source: l,
                target: this.habitat,
                units: e,
                resources: r,
                duration: u,
                capacity: s,
                transitID: this.syncTransit ? this.syncTransit.id : null
            })
        };
        e.prototype._actions_attack = function (t) {
            this._checkNightTimeAndExcecute(function () {
                this.datasource.attackForeignHabitat(t.source.id, t.target.id, v.ATTACKER, t.units, t.resources);
                this.notify("ha_wIcAy", this, {
                    msg: "attack",
                    data: null
                });
                if (typeof S !== "undefined" && S) {
                    this.notify("cAIus3w2", "attackExecution")
                }
            }.bind(this), "Attack Habitat", t)
        };
        e.prototype._actions_sendSpy = function (t) {
            var n = t.resources[0].value,
                e, s;
            if (!t.resources || !i(t.resources)) {
                e = translate("no resources selected");
                s = translate("Send Resources");
                utils.dialog.alert(this, e, s);
                return
            }
            if (n > t.source.stats.resources[a.COPPER]) {
                e = translate("Not enough resources available.");
                s = translate("Send Resources");
                utils.dialog.alert(this, e, s);
                return
            }
            this.datasource.sendSpy(t.source.id, t.target.id, v.SPY, t.resources[0].value);
            this.notify("ha_wIcAy", this, {
                msg: "spy",
                data: null
            })
        };
        e.prototype._actions_sendDefense = function (t) {
            this.datasource.defendHabitat(t.source.id, t.target.id, v.DEFENSE, t.units)
        };
        e.prototype._actions_sendResources = function (t) {
            if (!t.resources || !i(t.resources)) {
                text = translate("no resources selected");
                title = translate("Send Resources");
                utils.dialog.alert(this, text, title);
                return
            }
            this.datasource.sendResources(t.source.id, t.target.id, v.TRANSPORT, t.units, t.resources)
        };
        e.prototype._actions_syncAttack = function (t) {
            this._checkNightTimeAndExcecute(function () {
                this.datasource.syncTransit(t.transitID, t.source.id, t.units, t.resources);
                this.notify("ha_wIcAy", this, {
                    msg: "attack",
                    data: null
                })
            }.bind(this), "Attack Habitat", t)
        };
        e.prototype._actions_syncDefense = function (t) {
            this._checkNightTimeAndExcecute(function () {
                this.datasource.syncTransit(t.transitID, t.source.id, t.units, t.resources)
            }.bind(this), "Defend Habitat", t)
        };
        e.prototype._checkNightTimeAndExcecute = function (t, e, i) {
            if (D.dayNightIcon(i.duration) === "nightIcon") {
                var a = translate("Nighttime attack warning"),
                    s = translate(e),
                    n = function () {};
                utils.dialog.confirm(this, a, s, t, n);
                return
            }
            t()
        };
        e.prototype["CncQVCpR"] = function (e, t) {
            this.view.cancelNextClickMessage();
            this.notify("createHabitatWindow", t.habitat)
        };
        e.prototype["82_(qMdC"] = function (i, e) {
            this.notify("GRRiDN-v", this, {
                start: this.habitat,
                end: t.habitate[e.habitatID]
            })
        };
        e.prototype["3yT4U8Jh"] = function () {
            this.notify("sMs0EI2k", this)
        };
        e.prototype._calculateDuration = function (t, i, r) {
            var a = this.habitat;
            var s = utils.Map.distanceToHabitat(a.mapX, a.mapY, t.mapX, t.mapY);
            if (this.view.action === "sendSpy") {
                var o = r[0];
                return this._calculateSpyDuration(s, o)
            }
            var n = [];
            for (var e = 0, l = i.length; e < l; e++) {
                var u = i[e];
                n.push(y[u.id])
            }
            return t.getSlowestHabitatUnit(n) * s
        };
        e.prototype._calculateSpyDuration = function (e, i) {
            var t = u.spyAttackSecondsPerField * e;
            if (i === 0) {
                t = 0
            }
            return t
        };
        e.prototype._calculateArrivalTime = function (t) {
            return t * 1e3 + Date.now()
        };
        e.prototype._calculateCapacity = function (i, s) {
            var n = 0,
                r = 0,
                a = [];
            if (i.length === 0) {
                return null
            }
            for (var t = 0, e = i.length; t < e; t++) {
                var o = i[t];
                a.push(y[o.id])
            }
            for (t = 0; t < a.length; t++) {
                for (e = 0; e < i.length; e++) {
                    if (a[t].primaryKey === +i[e].id) {
                        n += a[t].storeAmount * i[e].value
                    }
                }
            }
            for (t = 0, e = s.length; t < e; t++) {
                var l = s[t];
                r += l.value
            }
            return {
                max: n,
                used: r
            }
        };
        return e
    }(n.Controller);
    D.Controller = function (a) {
        utils.__extends(e, n.Controller);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.setOptions(t);
            this.playerData = null;
            this.actionState = null;
            this.selectedSourceHabitatID = null;
            this.assignDialogShown = false
        }
        e.prototype.notifyProxy = function (e, a, s, n) {
            var t, i;
            if (S) {
                t = this.controller.checkTutorialMessages(e);
                if (t === true) {
                    return
                }
            }
            if (this[e]) {
                i = this[e](a, s, n)
            }
            if (t && t.callback) {
                t.callback.apply(this.tutorialController, t.args)
            }
            return i
        };
        e.prototype.add = function () {
            e.__super__.add.apply(this, arguments);
            if (this.habitat.player) {
                this.notify("_f3L_ht_", this.view)
            }
        };
        e.prototype["aBdTswLK"] = function () {
            this.notify("sMs0EI2k", this);
            this.notify("aBdTswLK", this, e.__super__, arguments)
        };
        e.prototype["HTnWZGse"] = function () {
            e.__super__["HTnWZGse"].apply(this, arguments);
            this._heightForState()
        };
        e.prototype._heightForState = function () {
            var t = 245,
                a = this.view,
                e = a.buttonList,
                i = e.player && !e.player.alliance;
            if (this.actionState === "sendMessage") {
                t = 360
            } else if (this.actionState === "transports") {
                t = 480
            } else if (e.freeCastle) {
                t = 150
            } else if (e.onVacation !== false) {
                t = 310;
                if (i) {
                    t = 265
                }
            } else if (e.newbieProtectedUntil !== "") {
                t = 320;
                if (i) {
                    t = 270
                }
            } else if (i) {
                t = 200
            }
            if (this.view.height !== t) {
                this.view.height = t;
                this.view.liveUpdate()
            }
        };
        e.prototype["0scd3paU"] = function () {
            e.__super__["0scd3paU"].apply(this, arguments);
            if (this.actionState === "sendMessage" || this.actionState === "transports") {
                this.actionState = null
            } else if (this.actionState === "viewTransitDetail") {
                this.actionState = "transports"
            }
            this._heightForState()
        };
        e.prototype["Yoqka19h"] = function (t) {
            t.data = t.data || {};
            t.data.habitat = t.data.habitat || this.habitat;
            this.notify("Yoqka19h", this, t.data)
        };
        e.prototype.savePlayerInfo = function (t) {
            this.playerData = t;
            this._dataSaveCallback()
        };
        e.prototype.dataUpdate = function (a, t) {
            if (t === null) {
                return
            }
            var s = this.view.findSubviewByField("name", "foreignHabitatExternalOverview");
            if (s !== null) {
                s.dataUpdate(a, t)
            }
            var e = this.view.findSubviewByField("tag", "currentView");
            var n = this.filterTransits(this.habitat);
            var r = false;
            if (e !== null && e.model) {
                for (var i = 0; i < n.length; i++) {
                    if (n[i].generatedTransitId == e.model.generatedTransitId) {
                        r = true
                    }
                }
                if (!r) {
                    this.slideOut()
                }
            }
            if (this.playerData === null && this.habitat.player) {
                this.notify("_f3L_ht_", this.view);
                this.datasource.loadPlayerInfo(this.habitat.player.id, this);
                return
            } else if (!this.dataSaved && !this.habitat.player) {
                this._dataSaveCallback()
            }
            if (!this.actionState || this.actionState === "sendMessage") {
                this.view.dataUpdate(a, t)
            }
        };
        e.prototype._dataSaveCallback = function () {
            this.dataSaved = true;
            if (!this.view) return;
            this.view.reset();
            this.view.create();
            this.view.draw();
            if (this.actionState) {
                var t = this.actionState;
                this.actionState = null;
                this.performAction(t)
            }
        };
        var i = {
            sendMessage: true,
            transports: true
        };
        e.prototype.useMiniWindowForAction = function (e) {
            var t = false;
            if (i[e]) {
                t = true
            }
            return t
        };
        e.prototype.performAction = function (t) {
            if (t === "sendMessage") {
                this["wgwjcACY"]();
                return true
            } else if (t === "transports") {
                this["%St1qgKH"]();
                return true
            }
            return false
        };
        e.prototype["7IbvB3EY"] = function (e) {
            this.actionState = "player";
            var t = this.view.habitat.player;
            if (!t) {
                return
            }
            this.notify("CcFE9soE", this, t)
        };
        e.prototype["wgwjcACY"] = function (e) {
            if (this.actionState === "sendMessage") {
                return
            }
            this.actionState = "sendMessage";
            var t = this.view.habitat.player;
            if (typeof t === "undefined" || !this.dataSaved) {
                return
            }
            this._heightForState();
            this.notify("Tf6iX-sR", this, t)
        };
        e.prototype["AhB5UK7v"] = function (e) {
            var t = this.view.findSubviewByName("submit");
            if (!t) return;
            if (t.styleArray.indexOf("disabled") === -1) t.styleArray.push("disabled");
            t.draw()
        };
        e.prototype["POUKlbut"] = function (e) {
            var t = this.view.findSubviewByName("submit");
            if (!t) return;
            if (t.styleArray.indexOf("disabled") > -1) t.styleArray.splice(t.styleArray.indexOf("disabled"), 1);
            t.draw()
        };
        e.prototype["AhB5UK7v"] = function (e) {
            var t = this.view.findSubviewByName("submit");
            if (!t) return;
            if (t.styleArray.indexOf("disabled") === -1) t.styleArray.push("disabled");
            t.draw()
        };
        e.prototype["POUKlbut"] = function (e) {
            var t = this.view.findSubviewByName("submit");
            if (!t) return;
            if (t.styleArray.indexOf("disabled") > -1) t.styleArray.splice(t.styleArray.indexOf("disabled"), 1);
            t.draw()
        };
        e.prototype["6ofnhGey"] = function (t) {
            this.notify("6ofnhGey", this)
        };
        e.prototype["zkXilX_h"] = function () {
            for (var s in t.habitate) {
                var a = t.habitate[s];
                for (var i = 0; i < a.habitatTransits.length; i++) {
                    var e = a.habitatTransits[i];
                    if (e.destinationHabitat && +e.destinationHabitat.id == +this.habitat.id || e.sourceHabitat && +e.sourceHabitat.id === +this.habitat.id) {
                        return true
                    }
                }
            }
            return false
        };
        e.prototype.filterTransits = function () {
            var a = [];
            for (var n in t.habitate) {
                var s = t.habitate[n];
                for (var i = 0; i < s.habitatTransits.length; i++) {
                    var e = s.habitatTransits[i];
                    if (e.destinationHabitat && +e.destinationHabitat.id === +this.habitat.id || e.sourceHabitat && +e.sourceHabitat.id === +this.habitat.id) {
                        a.push(e)
                    }
                }
            }
            return a
        };
        e.prototype["%St1qgKH"] = function (t) {
            if (this.actionState === "transports") {
                return
            }
            this.actionState = "transports";
            if (!this.dataSaved) {
                return
            }
            this._heightForState();
            this.showNextViewOfClass(D.ExternalOverview, {
                habitat: this.habitat,
                name: "foreignHabitatExternalOverview"
            })
        };
        e.prototype["C5ywrQ4I"] = function (t) {
            var e = [];
            this.actionState = "viewTransitDetail";
            if (t.data.title.indexOf("Offending") !== -1) {
                e.push(2)
            }
            if (t.data.title.indexOf("Defending") !== -1) {
                e.push(0);
                e.push(1)
            }
            this.showNextViewOfClass(D.SingleForeignHabitatUnitList, {
                habitat: t.data.habitat,
                ownExternalTroops: t.data.ownExternalTroops,
                title: t.data.title,
                battleTypeFilter: e
            })
        };
        e.prototype["Yi1bK25T"] = function (i) {
            var e = i.data.table.getAllFieldValues();
            var a = {};
            for (var t = 0; t < e.length; t++) {
                if (e[t].value > 0) {
                    a[e[t].id] = e[t].value
                }
            }
            var s = i.data.habitatUnit.sourceHabitat.id;
            var n = i.data.habitatUnit.habitat.id;
            if (utils.dict.size(a) === 0) {
                utils.dialog.alert(this, translate("No untis were assigned."), translate("Units"), function () {});
                return
            }
            this.datasource.recallTroops(n, s, a);
            this["0scd3paU"]()
        };
        e.prototype["MS1VHGhp"] = function (a) {
            var e = a.data.habitat,
                i = "createForeignHabitatWindow";
            if (e.player && e.player.id == t.id) {
                i = "createHabitatWindow";
                e.player = t
            }
            this.controller[i](e)
        };
        e.prototype["JLA4)vG_"] = function (t) {
            this.actionState = "viewTransitDetail";
            this.showNextViewOfClass(d.TransitDetail, {
                model: t.model
            })
        };
        e.prototype["fy%m)6d("] = function (t) {
            var e = t.data.habitat;
            this.notify("qsh7)BXL", this, e)
        };
        e.prototype["TfueoDRt"] = function (t) {
            this.notify("CcFE9soE", this, t.data.playerID)
        };
        e.prototype["CDwdD6%i"] = function (t) {
            var e = t.data.alliance;
            this.notify("43M&Wxm4", this, e)
        };
        e.prototype["LfCRNSS9"] = function (e) {
            var t = this.view.habitat.player;
            this.datasource.sendAllianceInvite(t.id)
        };
        e.prototype["c)QH3F1g"] = function (e) {
            var t = this.view.habitat.player;
            this.datasource.cancelAllianceInvite(t.id)
        };
        e.prototype["cFO-Ea0U"] = function (t) {
            if (typeof S !== "undefined" && S && t.data.action !== "attack") {
                return
            }
            if (t.data.action === "transports") {
                this["%St1qgKH"]();
                return
            } else if (t.data.action === "attack") {
                var e = function () {
                    this.notify("cAIus3w2", "attackFreeCastle")
                };
                setTimeout(e.bind(this), 800)
            } else if (t.data.action === "lastRaid") {
                this.notify("xg1xV7cY", t.data);
                return
            }
            this.notify("BRH1gaaU", t.data)
        };
        e.prototype["dXvOAAue"] = function (e) {
            var t = this.view.findSubviewByName("ForeignPlayer").alliance;
            this.controller.createForeignAllianceWindow(t)
        };
        e.prototype[")(ADVQlf"] = function (e) {
            var t = this.view.findSubviewByField("tag", "currentView");
            if (t === null) {
                return
            }
            var i = e.parent.getInputInfo();
            var a = t.getMaxTransportCapacity();
            var s = i.value;
            if (a < i.value) {
                s = a
            }
            e.overrideInputValue(s);
            t.updateResourcesCapicity();
            t.updateTroopDurations(this.habitat)
        };
        e.prototype["cUtxnz5W"] = function (t) {
            return this[")(ADVQlf"](t)
        };
        e.prototype["urEb4YbM"] = function (e) {
            var t = this.view.findSubviewByField("tag", "currentView");
            if (t === null) {
                return
            }
            t.updateResourcesCapicity();
            t.updateTroopDurations(this.habitat)
        };
        e.prototype["iX-qOWYz"] = function (t) {
            return this["urEb4YbM"](t)
        };
        e.prototype["ygjAXw(K"] = function (t, i) {
            var e = this.notify("eYyq%qI6", this, t.data);
            this.notify("J0N%It)p", this, e)
        };
        e.prototype["xhjW7E37"] = function (e) {
            var t = this.view.findSubviewByField("tag", "currentView");
            t.paste(this.notify("xhjW7E37", this))
        };
        e.prototype["kzLxj4Vx"] = function (i) {
            if (this.assignDialogShown === false) {
                this.assignDialogShown = true;
                var t = translate("Please assign more transport units or reduce the amount of resources.");
                var e = this;
                utils.dialog.alert(this, t, translate("Transport"), function () {
                    e.assignDialogShown = false
                })
            }
        };
        e.prototype["82_(qMdC"] = function (e) {
            this.notify("GRRiDN-v", this, {
                start: this.habitat,
                end: t.habitate[e.name]
            })
        };
        e.prototype["3yT4U8Jh"] = function (t) {
            this.notify("sMs0EI2k", this)
        };
        e.prototype["vkycgQL)"] = function (t, e) {
            return this.notify("vkycgQL)", t, e)
        };
        e.prototype[")-VQldtr"] = function (t) {
            this.notify("1mA0BwR5", this, {
                x: +t.data.mapX,
                y: +t.data.mapY
            })
        };
        e.prototype["a-0&ZL8y"] = function (t) {
            return this.notify("a-0&ZL8y", this)
        };
        e.prototype["EmxE78NQ"] = function (t) {
            d.ViewController.prototype["EmxE78NQ"].apply(this, arguments)
        };
        return e
    }(n.Controller);
    D.LastRaidController = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.setOptions(e);
            this.attackExecuted = false
        }
        t.prototype.dataUpdate = function (e, i) {
            t.__super__.dataUpdate.apply(this, arguments);
            if (this.attackExecuted) {
                this.attackExecuted = false;
                this.notify("RSc(i0yD", this);
                this["aBdTswLK"](this)
            }
        };
        t.prototype["aBdTswLK"] = function (e, i) {
            this.notify("sMs0EI2k", this);
            t.__super__["aBdTswLK"].apply(this, arguments)
        };
        t.prototype["g&muECi3"] = function (t) {
            this.view.cancelNextClickMessage();
            this.notify("1YZFdYsA", this, null)
        };
        t.prototype.updateSourceHabitat = function (t) {
            this.view.lastRaid = t;
            this.view.dataUpdate()
        };
        t.prototype["ADrgAE&w"] = function (n, i) {
            var e = this.view.lastRaid,
                t = i.habitat,
                a = t.name ? t.name : translate("Renegade") + " " + t.id,
                s = this.view.habitat;
            utils.dialog.confirm(this, translate("Do you really want to attack castle %@ with last formation?", a), translate("Attack with last formation"), function () {
                this.attackExecuted = true;
                this.datasource.attackForeignHabitat(e.sourceHabID, s.id, v.ATTACKER, e.units)
            }.bind(this), function () {})
        };
        t.prototype["Yoqka19h"] = function (t, e) {
            this.view.cancelNextClickMessage();
            return this.notify("Yoqka19h", t, e)
        };
        t.prototype["AAeX&RO7"] = function (t, e) {
            this.view.cancelNextClickMessage();
            return this.notify("AAeX&RO7", t, e)
        };
        t.prototype["GRRiDN-v"] = function (e, t) {
            return this.notify("GRRiDN-v", this, t)
        };
        return t
    }(n.Controller);
    D.DataSource = function (n) {
        "use strict";
        utils.__extends(e, n);

        function e(t) {
            e.__super__.constructor.apply(this, arguments);
            this.foreignHabitat = null;
            this.action = null;
            this.sortType = null;
            this.sortDirection = null;
            this.value = null
        }

        function s(e) {
            var i = {};
            for (var t = 0, s = e.length; t < s; t++) {
                var a = e[t];
                i[a.id] = a.value
            }
            return i
        }

        function r(t) {
            var e = {
                attack: "Attack Habitat",
                sendDefense: "Defend Habitat",
                sendResources: "Send Resources",
                sendSpy: "Send Spy",
                syncAttack: "Synchronize battle",
                syncDefense: "Synchronize battle"
            };
            return translate(e[t])
        }

        function o(t, e) {
            var i = {
                attack: "transitAttackWhite",
                sendDefense: "transitDefenseWhite",
                sendResources: "transportWhite",
                sendSpy: "transitSpyWhite"
            };
            return e.getImageSrc(i[t], "icons")
        }
        e.prototype.attackForeignHabitat = function (e, n, r, a, t) {
            var o = "{" + $.param(s(a)).replace(/&/g, "; ") + ";}";
            if (t && t.length) {
                t = "{" + $.param(s(t)).replace(/&/g, "; ") + ";}"
            } else {
                t = "{}"
            }
            i.request("TransitAction/startTransit", {
                sourceHabitatID: e,
                destinationHabitatID: n,
                transitType: r,
                unitDictionary: o,
                resourceDictionary: t
            }, this.triggerModelUpdate, this, 5e3, this.displayError);
            this.notify("ddBiE8_C", this, {
                sourceHabID: e,
                units: a
            })
        };
        e.prototype.sendResources = function (a, n, r, t, e) {
            t = "{" + $.param(s(t)).replace(/&/g, "; ") + ";}";
            e = "{" + $.param(s(e)).replace(/&/g, "; ") + ";}";
            i.request("TransitAction/startTransit", {
                sourceHabitatID: a,
                destinationHabitatID: n,
                transitType: r,
                unitDictionary: t,
                resourceDictionary: e
            }, this.triggerModelUpdate, this)
        };
        e.prototype.sendSpy = function (t, e, s, a) {
            i.request("SpyAction/startSpyingTransit", {
                sourceHabitatID: t,
                destinationHabitatID: e,
                copperAmount: a
            }, this.triggerModelUpdate, this)
        };
        e.prototype.defendHabitat = function (e, a, n, t) {
            t = "{" + $.param(s(t)).replace(/&/g, "; ") + ";}";
            i.request("TransitAction/startTransit", {
                sourceHabitatID: e,
                destinationHabitatID: a,
                transitType: n,
                unitDictionary: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.syncTransit = function (a, n, e, t) {
            e = "{" + $.param(s(e)).replace(/&/g, "; ") + ";}";
            if (t.length) {
                t = "{" + $.param(s(t)).replace(/&/g, "; ") + ";}"
            }
            i.request("TransitAction/synchronizeTransit", {
                transitID: a,
                sourceHabitatID: n,
                unitDictionary: e,
                resourceDictionary: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.sendAllianceInvite = function (t) {
            i.request("AllianceAction/sendInvitation", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.cancelAllianceInvite = function (t) {
            i.request("AllianceAction/cancelInvitation", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.modelUpdate = function () {
            if (this.foreignHabitat && this.action) {
                this.prepareData(this.sortType, this.value, this.sortDirection)
            }
            this.publishUpdate()
        };
        e.prototype.sendMessageToPlayer = function (t, e, a) {
            i.request("DiscussionAction/createDiscussion", {
                receivingPlayerArray: t,
                subject: e,
                content: a
            }, this.triggerModelUpdate, this)
        };
        e.prototype.loadPlayerInfo = function (e, t) {
            function a(e) {
                t.savePlayerInfo(e.Player);
                t.notify("VY71NNds", t.view)
            }
            i.request("ProfileAction/playerInformation", {
                id: e
            }, a, this)
        };
        e.prototype.habitatInfo = function (t, e) {
            if (!t || !e) {
                return
            }
            i.request("HabitatAction/habitatInformation", {
                id: t
            }, e, this)
        };
        e.prototype.recallTroops = function (t, e, a) {
            var s = "{" + $.param(a).replace(/&/g, "; ") + ";}";
            var n = {
                sourceHabitatID: t,
                destinationHabitatID: e,
                transitType: v.TRANSIT_DEFENSE,
                unitDictionary: s
            };
            i.request("TransitAction/startTransit", n, this.triggerModelUpdate, this)
        };
        e.prototype.setForeignHabitat = function (t) {
            this.foreignHabitat = t
        };
        e.prototype.setAction = function (t) {
            this.action = t
        };
        e.prototype.setSyncData = function (t) {
            this.destinationETA = t
        };
        e.prototype.getResourceFilterForAction = function (i, s) {
            s = s || this.foreignHabitat;
            var e = [];
            if (i === "attack" || i === "syncAttack") {
                e = [a.SILVER]
            } else if (i === "sendSpy") {
                e = [a.COPPER]
            } else if (i === "sendResources") {
                e = [a.WOOD, a.STONE, a.ORE];
                if (u.transportNobleMetal && s && t.habitate[s.id]) {
                    e.push(a.SILVER);
                    e.push(a.COPPER)
                }
            }
            return e
        };
        e.prototype.getUnitFilterForAction = function (i, t) {
            t = t || this.foreignHabitat;
            var e = null;
            if (i === "sendSpy") {
                e = []
            }
            return e
        };
        e.prototype.prepareData = function (i, a, s) {
            var n = t.getSortedHabitate(i, a, s, this.foreignHabitat),
                e = [];
            this.sortType = i;
            this.value = a;
            this.sortDirection = s;
            n.forEach(function (t) {
                var s = "id" + utils.uniqueID(),
                    i = t.distanceToSource ? i = t.distanceToSource : i = t.distanceTo(this.foreignHabitat.mapX, this.foreignHabitat.mapY),
                    a = {
                        htmlID: s,
                        name: t.name || translate("Renegade") + " " + t.id,
                        points: translate("%d Points", t.points),
                        distance: translate("%d fields", i),
                        icon: this.getImageSrc("buttonCastle", "icons"),
                        showUnits: this.action !== "sendSpy" ? true : false,
                        showResources: this.action !== "sendDefense" && this.action !== "syncDefense" ? true : false,
                        habitatUnits: F.DataSource.prototype.prepareUnits.call(this, t.stats.units.own, true, s),
                        habitatResources: F.DataSource.prototype.prepareResources.call(this, t.stats.resources, true, this.getResourceFilterForAction(this.action), t.id),
                        action: this.action,
                        actionText: r(this.action),
                        actionIcon: o(this.action, this),
                        duration: 0,
                        durationIcon: this.getImageSrc("duration", "icons"),
                        arrivalTime: utils.date.formatDateTime(new Date),
                        capacity: "0 / 0",
                        capacityIcon: this.getImageSrc("capacity", "icons"),
                        id: t.id,
                        showDelay: this.actions === "syncAttack" || this.action === "syncDefense",
                        hideButton: false
                    };
                if (this.action === "syncAttack" || this.action === "syncDefense") {
                    a = this._addSyncInfosForTemplate(a)
                }
                e.push(a)
            }, this);
            e = e.filter(function (t) {
                if (t.id === this.foreignHabitat.id) {
                    return false
                }
                return true
            }, this);
            this.__data = e;
            return e
        };
        e.prototype._addSyncInfosForTemplate = function (e) {
            var i = t.habitate[e.id].getSyncableUnits(this.foreignHabitat, this.destinationETA);
            if (i.length === 0) {
                e.hideButton = true
            }
            for (var a = 0, r = e.habitatUnits.length; a < r; a++) {
                var s = e.habitatUnits[a];
                s.maxInput.disabled = true;
                for (var n = 0, o = i.length; n < o; n++) {
                    if (+s.unitID === +i[n].primaryKey) {
                        s.maxInput.disabled = false
                    }
                }
            }
            return e
        };
        e.prototype.prepareTargetResources = function () {
            var i = [];
            for (var e in this.foreignHabitat.stats.resources) {
                if (e === a.PEOPLE) {
                    continue
                }
                var s = t.habitate[this.foreignHabitat.id].habitatResources[e];
                var r = Math.floor(s.amount);
                var o = s.storeAmount;
                var n = t.habitate[this.foreignHabitat.id].getColorClass()[e];
                i.push({
                    resourceID: e,
                    url: this.getImageSrc(e, "resources"),
                    amount: r,
                    amountColor: n,
                    showMax: true,
                    max: o,
                    maxColor: n
                })
            }
            return i
        };
        return e
    }(m);
    D.Window = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.setOptions(e);
            this.create()
        }
        t.prototype.create = function () {
            this.createBaseView()
        };
        t.prototype.createBaseView = function () {
            var i = false,
                t = null,
                e = "",
                a = "",
                s = false;
            if (this.controller && this.controller.playerData) {
                a = this._checkProtectionTime()
            }
            if (typeof this.habitat.player === "undefined" || !this.habitat.player) {
                i = true;
                e = translate("Renegade") + " " + this.habitat.id;
                t = {
                    nick: translate("Outlaw") + " " + this.habitat.id,
                    points: this.habitat.points,
                    alliance: null
                }
            } else {
                e = this.habitat.name;
                t = this.habitat.player
            } if (this.habitat.player && (this.habitat.player.isOnVacation === true || this.habitat.player.isOnVacation === "true")) {
                s = true
            }
            this.headline.title.content = utils.sanitize(e) + " (" + this.habitat.points + ")";
            this.addHeadlineControls();
            this.buttonList = this.content.createSubview(this.content, {
                tag: "currentView",
                styles: "contentCurrentView",
                name: "foreignHabitatButtonList",
                headline: this.headline,
                player: t,
                habitat: this.habitat,
                freeCastle: i,
                newbieProtectedUntil: a,
                onVacation: s
            }, D.View)
        };
        t.prototype.addHeadlineControls = function () {
            if (!this.headline) {
                return
            }
            var t = [];
            this.headline.buttons.deleteSubviewByField("group", "headlineControls");
            t.push({
                graphic: "headlineButton_Pasteboard",
                action: "copyCastleLink",
                hover: translate("Copy castle link")
            });
            t.push({
                graphic: "headlineButton_Map",
                action: "markCastle",
                hover: translate("mark castle")
            });
            t.push({
                graphic: "headlineButton_CenterCastle",
                action: "centerCastle",
                hover: translate("Map")
            });
            for (var e = 0; e < t.length; e++) {
                var i = t[e];
                this.createSubview(this.headline.buttons, {
                    graphic: i.graphic,
                    hover: i.hover,
                    clickMessage: "Yoqka19h",
                    data: {
                        action: i.action
                    },
                    group: "headlineControls"
                }, Z)
            }
        };
        t.prototype.dataUpdate = function () {
            t.__super__.dataUpdate.apply(this, arguments)
        };
        t.prototype._checkProtectionTime = function () {
            var e = "";
            for (var i in this.controller.playerData.habitatDictionary) {
                var a = this.controller.playerData.habitatDictionary[i],
                    t;
                t = this.notify("vkycgQL)", this, a.creationDate);
                if (t !== "") {
                    e = t
                }
            }
            return e
        };
        return t
    }(n.Window);
    D.View = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("player");
            this.addRequired("habitat");
            this.addOption("freeCastle", false);
            this.addOption("newbieProtectedUntil", "");
            this.addOption("onVacation", false);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var u = this.player && (this.player.isOnVacation === true || this.player.isOnVacation === "true"),
                s = this.newbieProtectedUntil !== "" || u,
                e = typeof this.habitat.player === "undefined" || !this.habitat.player;
            this.freeCastle = e;
            this.addPlayerInfo();
            if (this.newbieProtectedUntil !== "") {
                var n = this.createSubview(this, {
                    styles: "protectionTime"
                }, w);
                n.createSubview(n, {
                    content: translate("Castle is protected by newbie protection until %@.", this.newbieProtectedUntil)
                })
            }
            if (this.onVacation !== false) {
                var r = this.createSubview(this, {
                    styles: "vacation"
                }, w);
                r.createSubview(r, {
                    content: translate("Player is on vacation.")
                })
            }
            var t = [];
            var o = this.createContainer({
                styles: "actions"
            });
            if (!e) {
                t.push({
                    action: "sendDefense",
                    hover: "Defend Habitat",
                    icon: "transitDefenseWhite"
                });
                t.push({
                    action: "sendResources",
                    hover: "Send Resources",
                    icon: "transportWhite"
                })
            } else if (this.controller.view) {
                this.controller.view.addClass("freeCastle")
            }
            if (!s || e) {
                t.push({
                    action: "attack",
                    hover: "Attack Habitat",
                    icon: "transitAttackWhite"
                });
                t.push({
                    action: "sendSpy",
                    hover: "Send Spy",
                    icon: "transitSpyWhite"
                });
                if (this.notify("a-0&ZL8y") === true) {
                    t.push({
                        action: "lastRaid",
                        hover: "Attack with last formation",
                        icon: "lastRaidWhite"
                    })
                }
            }
            t.push({
                action: "transports",
                hover: "Transits",
                icon: "tradeWhite"
            });
            for (var a = 0, h = t.length; a < h; a++) {
                var i = t[a];
                o.createSubview(o, {
                    styles: i.action,
                    clickMessage: "cFO-Ea0U",
                    data: {
                        action: i.action,
                        foreignHabitat: this.habitat,
                        isFreeCastle: e,
                        isProtected: s
                    },
                    content: this.notify("rvHW39mY", this, {
                        imageName: i.icon,
                        imageCategory: "icons"
                    }),
                    hover: translate(i.hover)
                }, l)
            }
        };
        t.prototype.addPlayerInfo = function () {
            if (this.freeCastle !== false) {
                return
            }
            this.createSubview(this, {
                content: utils.sanitize(this.player.nick) + " (" + this.player.points + ")",
                icon: "buttonPlayer",
                iconCategory: "icons",
                styles: "player",
                clickMessage: "Yoqka19h",
                data: {
                    action: "showPlayer"
                }
            }, k);
            this.createSubview(this, {
                content: this.notify("rvHW39mY", this, {
                    imageName: "buttonMessages",
                    imageCategory: "icons"
                }),
                hover: translate("Send Message"),
                styles: "playerMessage",
                clickMessage: "Yoqka19h",
                data: {
                    action: "sendMessage"
                }
            }, l);
            if (this.player.alliance && this.player.alliance.name) {
                var t = utils.sanitize(this.player.alliance.name),
                    e = r.Controller.findTransitRelation(this.player);
                this.createSubview(this, {
                    content: t,
                    icon: "buttonAlliance",
                    iconCategory: "icons",
                    styles: "alliance",
                    clickMessage: "Yoqka19h",
                    data: {
                        action: "showAlliance"
                    }
                }, k);
                this.createSubview(this, {
                    content: this.notify("rvHW39mY", this, {
                        imageName: e,
                        imageCategory: "diplomacy"
                    }),
                    styles: "allianceDiplomacy"
                })
            }
        };
        return t
    }(e);
    D.ExternalOverview = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("habitat", null);
            this.setOptions(e)
        }
        t.prototype.create = function () {
            var t = this.controller.filterTransits(this.habitat);
            this.unitList = this.createSubview(this, {
                habitat: this.habitat
            }, D.UnitList);
            this.transitList = this.createSubview(this, {
                transits: t,
                group: "habitatTransitList",
                styles: "transitList"
            }, d.TransitList)
        };
        t.prototype.dataUpdate = function (t, e) {
            var i = this.controller.filterTransits(this.habitat);
            this.transitList.dataUpdate(null, {
                transits: i
            });
            this.unitList.dataUpdate(t, e);
            this.draw()
        };
        return t
    }(e);
    D.dayNightIcon = function (s) {
        var n = (new Date).getTime();
        var a = false;
        var t = String(utils.date.formatDateTimeForNightModus(new Date(s * 1e3 + n)));
        var e = String(utils.date.formatDateTimeForNightModus(u.worldDawn));
        var i = String(utils.date.formatDateTimeForNightModus(u.worldDusk));
        t = parseInt(t.replace(/:/i, ""), [10]);
        e = parseInt(e.replace(/:/i, ""), [10]);
        i = parseInt(i.replace(/:/i, ""), [10]);
        if (i < e) {
            a = true
        }
        if (!a) {
            if (t > e && t < i) {
                return "dayIcon"
            } else {
                return "nightIcon"
            }
        } else {
            if (t > i && t < e) {
                return "nightIcon"
            }
        }
        return "dayIcon"
    };
    D.ActionWindow = function (i) {
        "use strict";
        utils.__extends(e, i);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addRequired("action");
            this.addOption("destinationETA", null);
            this.setOptions(t);
            this.resourceHeaderContainer = null;
            this.sortMenuResourceFilter = this.controller.datasource.getResourceFilterForAction(this.action, this.foreignHabitat);
            this.sortMenuUnitFilter = this.controller.datasource.getUnitFilterForAction(this.action, this.foreignHabitat);
            this.sortMenuStyles = this.action
        }
        e.prototype._resourceHeader = function () {
            var e = this.action === "sendResources" && !! t.habitate[this.foreignHabitat.id] ? true : false;
            if (!e) {
                return
            }
            var i = this.controller.datasource.prepareTargetResources();
            this.resourceHeaderContainer = this.createSubview(this.sortBarContainer, {});
            this.resourceHeader = this.createSubview(this.resourceHeaderContainer, {
                template: "resourceHeaderSmall",
                templateData: {
                    targetResources: i
                }
            }, Ne.ResourceHeader);
            this.notify("_V6%tK-F", this.resourceHeader);
            this.resourceHeaderContainer.draw();
            $("#" + this.id + " .main-content").addClass("with-resource-header")
        };
        e.prototype.dataUpdate = function (n, s) {
            var e = "",
                i = null;
            this.deleteAllSubviews();
            this.rebuildResourceHeader();
            if (this.action === "attack" || this.action === "syncAttack") {
                e = translate("Needed for conquest: %@", utils.dict.size(t.habitate) * Ii)
            }
            if (this.action === "syncAttack" || this.action === "syncDefense") {
                var a = utils.date.secToTimeStr(utils.date.setCountDownTime(this.destinationETA));
                i = {
                    message: translate("Destination ETA"),
                    arrivalIcon: this.getImageSrc(D.dayNightIcon(a), "icons"),
                    arrivalTime: utils.date.formatDateTime(this.destinationETA),
                    durationIcon: this.getImageSrc("duration", "icons"),
                    duration: a,
                    rawData: {
                        destinationETA: this.destinationETA
                    }
                }
            }
            this.castleList = this.createSubview(this.content, {
                foreignHabitat: this.foreignHabitat,
                action: this.action,
                template: "sendStuff",
                templateData: {
                    message: e,
                    syncMessage: i,
                    habitate: s
                },
                attachTo: this.content
            }, Ne.List);
            this.castleList.draw();
            this.castleList.restoreInputValues();
            return
        };
        e.prototype.rebuildResourceHeader = function () {
            if (this.resourceHeaderContainer) {
                this.resourceHeaderContainer.removeFromDOM();
                this.deleteSubviewChain(this.resourceHeaderContainer)
            }
            this._resourceHeader()
        };
        return e
    }(n.Window);
    D.UnitList = function (n) {
        utils.__extends(i, e);

        function i(e, t) {
            i.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addRequired("playerData");
            this.addOption("group", "ForeignHabitatUnitList");
            this.setOptions(t);
            this.ownedHabitatsPresent = 0;
            this.styleArray.push("unitList")
        }

        function a(d, p, h) {
            var a = {}, r = {}, s, o, g, v, e;
            for (var c in t.habitate) {
                var u = t.habitate[c];
                for (s = 0, o = u.externalHabitatUnits.length; s < o; s++) {
                    var i = u.externalHabitatUnits[s],
                        f = i.battleType !== null && i.battleType === p,
                        m = i.habitat && i.habitat.id === d;
                    if (!f || !m) {
                        continue
                    }
                    h.ownedHabitatsPresent += 1;
                    for (e in i.habitatUnitDictionary) {
                        if (!a[e]) {
                            a[e] = 0
                        }
                        a[e] += i.habitatUnitDictionary[e]
                    }
                }
            }
            if (a) {
                for (e in y) {
                    var l = y[e],
                        n = a[l.primaryKey];
                    if (typeof n !== "undefined" && n) {
                        r[l.primaryKey] = n
                    }
                }
            }
            return r
        }
        i.prototype.create = function () {
            var t, e, i, a, s;
            var n;
            this._createTroops()
        };
        i.prototype.dataUpdate = function (t, e) {
            this.deleteAllSubviews();
            this.create();
            this.draw()
        };
        i.prototype._createTroops = function () {
            var e = new s.Habitat(this.habitat);
            var r = a(this.habitat.id, C.EXTERNAL_UNITS_TO_DEFENSE, this);
            if (utils.dict.size(r) > 0) {
                container = this.createContainer({
                    data: {
                        habitat: e,
                        title: "Defending troops"
                    },
                    clickMessage: "C5ywrQ4I"
                });
                container.createSubview(container, {
                    title: translate("Defending troops")
                }, I);
                container.createSubview(container, {
                    name: "defendingUnitsTable",
                    styles: "",
                    units: r,
                    habitat: e
                }, b.Table)
            }
            var o = a(this.habitat.id, C.ATTACKER, this);
            if (utils.dict.size(o) > 0) {
                container = this.createContainer({
                    data: {
                        habitat: e,
                        title: "Offending troops"
                    },
                    clickMessage: "C5ywrQ4I"
                });
                container.createSubview(container, {
                    title: translate("Offending troops")
                }, I);
                container.createSubview(container, {
                    name: "attackingUnitsTable",
                    styles: "attackingUnits",
                    units: o,
                    habitat: e
                }, b.Table);
                var i = 0;
                if (t.conquestPointDictionary && t.conquestPointDictionary[this.habitat.id]) {
                    i = t.conquestPointDictionary[this.habitat.id]
                }
                if (i > 0) {
                    var l = this.createSubview(container, {
                        styles: "resourceElement silver"
                    });
                    this.createSubview(l, {
                        styles: "icon",
                        content: this.getImage("6", "resources")
                    });
                    this.createSubview(l, {
                        styles: "amount",
                        content: i
                    })
                }
                if (this.habitat.nextBattleDate && typeof this.habitat.nextBattleDate === "object") {
                    var h = this.habitat.nextBattleDate,
                        c = translate("Next battle"),
                        n, u;
                    if (typeof this.habitat.nextBattleDate === "object") {
                        u = utils.date.formatDateTime(h)
                    }
                    n = "<span class='text'>" + c + "</span>";
                    n += "<span class='time'>" + u + "</span>";
                    container.clearfix();
                    container.createSubview(container, {
                        content: n,
                        styles: "battleRoundInfo"
                    })
                } else {
                    this.controller.datasource.habitatInfo(this.habitat.id, function (t) {
                        this.habitat = t.Habitat;
                        if (this.habitat.nextBattleDate) {
                            this.habitat.nextBattleDate = _.conv.toDate(this.habitat.nextBattleDate)
                        }
                        this.dataUpdate()
                    }.bind(this))
                }
            }
        };
        return i
    }(e);
    D.SingleForeignHabitatUnitList = function (a) {
        utils.__extends(i, e);

        function i(e, t) {
            i.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addRequired("title");
            this.addOption("battleTypeFilter", []);
            this.addOption("group", "SingleForeignHabitatUnitList");
            this.setOptions(t);
            this.styleArray.push("unitList details")
        }
        i.prototype.create = function () {
            var e;
            var s;
            var f = [];
            var c = [];
            var _, w;
            var v = false;
            var u, a;
            var i;
            var n = [];
            for (var y in t.habitate) {
                var d = t.habitate[y];
                for (e = 0, j = d.externalHabitatUnits.length; e < j; e++) {
                    var r = d.externalHabitatUnits[e];
                    if (r.habitat && r.habitat.id == this.habitat.id) {
                        if (r.battleType == C.ATTACKER) {
                            c.push(r)
                        } else {
                            f.push(r)
                        }
                    }
                }
            }
            if (this.title === "Offending troops") {
                s = c
            } else {
                s = f
            }
            s.sort(function (t, e) {
                if (t.battleType < e.battleType) {
                    return -1
                } else {
                    return +1
                }
            });
            if (this.battleTypeFilter.length > 0) {
                for (e = 0; e < s.length; e++) {
                    if (this.battleTypeFilter.indexOf(s[e].battleType) !== -1) {
                        n.push(s[e])
                    }
                }
                s = n;
                n = []
            }
            for (e = 0; e < s.length; e++) {
                if (typeof s[e] !== "undefined") {
                    n[e] = s[e]
                }
            }
            if (s.length > 0 && s[0].battleType == C.OWN_HABITAT) {
                u = n.shift()
            }
            a = n;
            if (typeof u !== "undefined") {
                i = this.createContainer();
                var m = getUnitsForUnitTable(u.units);
                this.title = "Defending troops";
                i.createSubview(i, {
                    title: translate(this.title)
                }, I);
                i.createSubview(i, {
                    name: "ownUnitsTable",
                    styles: "clickable",
                    units: m,
                    clickMessage: null,
                    imageClickMessage: "qeuhDHxS",
                    habitat: this.habitat
                }, b.Table)
            }
            if (typeof a == "undefined") {
                return
            }
            a.sort(function (t, e) {
                if (t.sourceHabitat.name < e.sourceHabitat.name) {
                    return -1
                } else {
                    return +1
                }
            });
            for (e = 0; e < a.length; e++) {
                var g = a[e].habitat,
                    p = a[e].sourceHabitat,
                    o = false;
                if (t.habitate.hasOwnProperty(p.id)) {
                    o = true
                }
                i = this.createContainer();
                i.createSubview(i, {
                    name: "foreignUnits",
                    icon: this.notify("rvHW39mY", this, {
                        imageName: "centerForeignHabitat",
                        imageCategory: "icons"
                    }),
                    title: utils.sanitize(p.name),
                    clickData: {
                        habitat: g
                    },
                    titleClickMessage: "WT1Sv4g0"
                }, I);
                if (a[e].battleType == C.EXTERNAL_UNITS_TO_DEFENSE) {
                    this.unitTable = i.createSubview(i, {
                        name: "foreignDefenseUnits",
                        styles: "recallUnits",
                        units: a[e].habitatUnitDictionary,
                        inputFields: true,
                        clickMessage: null,
                        imageClickMessage: "qeuhDHxS",
                        habitat: this.habitat
                    }, b.Table)
                }
                if (a[e].battleType == C.ATTACKER) {
                    this.unitTable = i.createSubview(i, {
                        name: "foreignAttackUnits",
                        styles: "recallUnits",
                        showNames: true,
                        inputFields: o,
                        units: a[e].habitatUnitDictionary,
                        clickMessage: null,
                        imageClickMessage: null,
                        habitat: this.habitat,
                        finalClearfix: false
                    }, b.Table);
                    this.unitTable.clearfix();
                    if (a[e].habitat.nextBattleDate) {
                        this.createSubview(i, {
                            content: translate("Next battle") + " " + utils.date.formatDateTime(a[e].habitat.nextBattleDate),
                            styles: "nextBattleDate"
                        })
                    }
                }
                i.clearfix();
                if (o) {
                    var h = "Recall troops";
                    i.createSubview(i, {
                        content: translate(h),
                        hover: translate(h),
                        data: {
                            message: h,
                            table: this.unitTable,
                            habitatUnit: a[e]
                        },
                        clickMessage: "Yi1bK25T"
                    }, l)
                }
            }
        };
        i.prototype.castleLink = function (e, i) {
            var t = e.createSubview(e, {
                styles: "habitatLink clickable",
                clickMessage: "WT1Sv4g0",
                data: {
                    habitat: i
                }
            });
            t.createSubview(t, {
                content: this.notify("rvHW39mY", this, {
                    imageName: "centerForeignHabitat",
                    imageCategory: "icons"
                }),
                styles: "icon"
            });
            t.createSubview(t, {
                content: utils.sanitize(i.name),
                styles: "name"
            });
            t.clearfix()
        };
        i.prototype.updateValues = function (t) {
            this.dataUpdate(null, {
                habitat: t,
                title: this.title
            })
        };
        return i
    }(e);
    D.LastRaidWindow = function (i) {
        utils.__extends(e, i);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addRequired("lastRaid");
            this.setOptions(t);
            this.styleArray.push("transitDetail")
        }
        e.prototype.prepareUnits = function (e) {
            var a = [];
            for (var i in e) {
                if (e[i] === 0) continue;
                var t = {};
                t.unitID = e[i].id;
                t.amount = e[i].value;
                t.url = this.getImageSrc(t.unitID.toString(), "units");
                a.push(t)
            }
            return a
        };
        e.prototype.create = function () {
            var e = t.habitate[this.lastRaid.sourceHabID];
            var s = this.habitat.player ? false : true;
            var n = this.habitat.player && this.habitat.player.alliance ? true : false;
            var i = {
                id: this.habitat.id,
                habitat: this.habitat,
                clickable: true,
                icon: this.getImageSrc("transitAttack", "icons"),
                title: translate("Target habitat"),
                name: this.habitat.name || translate("Renegade") + " " + this.habitat.id,
                points: this.habitat.points,
                diplomacyIcon: this.getImageSrc("neutral", "diplomacy")
            };
            if (!s) {
                i.player = {
                    name: this.habitat.player.nick,
                    icon: this.getImageSrc("buttonPlayer", "icons"),
                    points: this.habitat.player.points,
                    clickable: true
                }
            } else {
                i.player = {
                    name: translate("Outlaw") + " " + this.habitat.id,
                    points: this.habitat.points,
                    icon: this.getImageSrc("buttonPlayer", "icons")
                }
            } if (n) {
                i.alliance = {
                    icon: this.getImageSrc("buttonAlliance", "icons"),
                    name: this.habitat.player.alliance.name,
                    diplomacyIcon: this.getImageSrc("neutral", "diplomacy"),
                    points: this.habitat.player.alliance.points,
                    clickable: true
                }
            } else {
                i.alliance = {
                    icon: this.getImageSrc("buttonAlliance", "icons"),
                    name: translate("No Alliance"),
                    diplomacyIcon: this.getImageSrc("neutral", "diplomacy"),
                    points: 0
                }
            }
            var r = e.distanceTo(this.habitat.mapX, this.habitat.mapY);

            function o(i) {
                var t = 0;
                for (var a in i) {
                    var s = y[i[a].id] || y[a];
                    if (!s) continue;
                    var n = s.getSecondsPerField(e);
                    if (n > t) {
                        t = n
                    }
                }
                return t
            }
            var a = o(this.lastRaid.units) * r;
            this.lastRaidView = this.createSubview(this, {
                templateData: {
                    htmlID: "id" + utils.uniqueID(),
                    destinationHabitat: i,
                    sourceHabitat: {
                        id: e.id,
                        clickable: true,
                        icon: this.getImageSrc("buttonCastle", "icons"),
                        title: translate("Source habitat"),
                        name: e.name,
                        points: e.points,
                        diplomacyIcon: this.getImageSrc("player", "diplomacy"),
                        changeIcon: this.getImageSrc("change", "icons"),
                        player: {
                            name: t.nick,
                            icon: this.getImageSrc("buttonPlayer", "icons"),
                            points: t.points,
                            clickable: true
                        },
                        alliance: {
                            icon: this.getImageSrc("buttonAlliance", "icons"),
                            name: t.hasAlliance() ? t.alliance.name : translate("No alliance"),
                            points: t.hasAlliance() ? t.alliance.points : 0,
                            clickable: t.hasAlliance() ? true : false
                        }
                    },
                    units: this.prepareUnits(this.lastRaid.units),
                    eta: {
                        timestampIcon: this.getImageSrc("dayIcon", "icons"),
                        timestamp: utils.date.formatDateTime(+new Date + a),
                        timeleftIcon: this.getImageSrc("duration", "icons"),
                        timeleft: utils.date.secToTimeStr(a)
                    }
                },
                template: "lastRaid",
                attachTo: this.content
            }, D.LastRaidView)
        };
        e.prototype.dataUpdate = function (e, i) {
            this.create();
            this.lastRaidView.draw();
            this.notify("GRRiDN-v", this, {
                start: this.habitat,
                end: t.habitate[this.lastRaid.sourceHabID]
            })
        };
        return e
    }(n.Window);
    D.LastRaidView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e)
        }
        t.prototype.okayButtonHandler = function (t) {
            this.notify("ADrgAE&w", this, {
                habitat: this.templateData.destinationHabitat
            })
        };
        t.prototype.cancelButtonHandler = function (t) {
            this.notify("aBdTswLK", this)
        };
        t.prototype.changeButtonHandler = function (t) {
            this.notify("g&muECi3", this)
        };
        t.prototype.openDestinationHabitat = function (t) {
            this.notify("Yoqka19h", this, {
                action: "visitCastle",
                habitat: this.templateData.destinationHabitat.habitat
            })
        };
        t.prototype.openDestinationAlliance = function (t) {
            this.notify("Yoqka19h", this, {
                action: "showAlliance",
                habitat: this.templateData.destinationHabitat.habitat
            })
        };
        t.prototype.openDestinationPlayer = function (t) {
            this.notify("Yoqka19h", this, {
                action: "showPlayer",
                habitat: this.templateData.destinationHabitat.habitat
            })
        };
        t.prototype.openSourceHabitat = function (t) {
            this.notify("AAeX&RO7", this, {
                action: "visitCastle",
                habitatID: this.templateData.sourceHabitat.id
            })
        };
        t.prototype.openSourcePlayer = function (t) {
            this.notify("AAeX&RO7", this, {
                action: "showPlayer",
                habitatID: this.templateData.sourceHabitat.id
            })
        };
        t.prototype.openSourceAlliance = function (t) {
            this.notify("AAeX&RO7", this, {
                action: "showAlliance",
                habitatID: this.templateData.sourceHabitat.id
            })
        };
        t.prototype.getEvents = function () {
            var i = t.__super__.getEvents.apply(this, arguments);
            var a = this;

            function e(t, e) {
                t = "#" + a.templateData.htmlID + " " + t;
                i.push({
                    selector: t,
                    event: "click",
                    callback: e,
                    target: a
                })
            }
            e(".button.ok", this.okayButtonHandler);
            e(".button.cancel", this.cancelButtonHandler);
            e(".button.change", this.changeButtonHandler);
            e("div[data-id='" + this.templateData.destinationHabitat.id + "'] .clickable.habitat", this.openDestinationHabitat);
            e("div[data-id='" + this.templateData.destinationHabitat.id + "'] .clickable.player", this.openDestinationPlayer);
            e("div[data-id='" + this.templateData.destinationHabitat.id + "'] .clickable.alliance", this.openDestinationAlliance);
            e("div[data-id='" + this.templateData.sourceHabitat.id + "'] .clickable.habitat", this.openSourceHabitat);
            e("div[data-id='" + this.templateData.sourceHabitat.id + "'] .clickable.player", this.openSourcePlayer);
            e("div[data-id='" + this.templateData.sourceHabitat.id + "'] .clickable.alliance", this.openSourceAlliance);
            return i
        };
        t.prototype.dataUpdate = function (t, e) {};
        return t
    }(TemplateView);
    Ne.List = function (s) {
        utils.__extends(e, s);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addRequired("action");
            this.addRequired("foreignHabitat");
            this.setOptions(t);
            this.entriesWithTimers = [];
            this.templateData.htmlID = this.id;
            this._nodeCache = {}
        }

        function i(i) {
            var e = [],
                t;
            i.each(function (a, i) {
                i = $(i);
                t = parseInt(i.val(), 10);
                if (t) {
                    e.push({
                        id: i.data("primary-key"),
                        value: t
                    })
                }
            });
            return e
        }

        function a(t, e, i) {
            return _.storeSession.createKey("send", t, e, i)
        }

        function n(e, i) {
            var t = _.storeSession.getJSON(e);
            if (!t) {
                return
            }
            if (t.units[+i]) {
                delete t.units[+i]
            }
            _.storeSession.setJSON(e, t)
        }
        e.prototype.habitatNode = function (t) {
            var e = this._nodeCache[t] || $("#" + this.templateData.htmlID + " .listItem[data-habitat='" + t + "']");
            if (!this._nodeCache) {
                this._nodeCache[t] = e
            }
            return e
        };
        e.prototype.updateCapacity = function (d, s, l, t, n) {
            var r = this.habitatNode(d),
                e = r.find(".actions"),
                o = e.find(".total"),
                i = e.find(".arrival"),
                u = e.find(".capacity"),
                h = this.getImageSrc(D.dayNightIcon(s), "icons"),
                c = e.find(".delay");
            o.find(".counter ").text(utils.date.secToTimeStr(s));
            i.find(".counter").text(utils.date.formatDateTime(l));
            i.find("img").attr("src", h);
            if (n) {
                c.find(".counter").text(translate("Delay") + ": " + utils.date.secToTimeStr(utils.date.setCountDownTime(n) - s));
                e.removeClass("hidden");
                i.hide()
            }
            if (t) {
                var a = u.find(".value");
                if (+t.used === 0 || +t.max === 0 || +t.used > +t.max) {
                    a.addClass("red")
                } else {
                    a.removeClass("red")
                }
                a.text(t.used + " / " + t.max)
            }
            e.show()
        };
        e.prototype.hideActions = function (t) {
            this.habitatNode(t).find(".actions").hide()
        };
        e.prototype.updateResourceTable = function (t, i) {
            if (!t || !i) {
                return
            }
            for (var e = 0, s = t.length; e < s; e++) {
                var a = t[e],
                    n = a.id,
                    r = a.value,
                    o = this.habitatNode(i).find(".resources input[data-primary-key='" + n + "']");
                o.val(r)
            }
        };
        e.prototype.restoreInputValues = function () {
            for (var u = 0, d = this.templateData.habitate.length; u < d; u++) {
                var i = this.templateData.habitate[u];
                var p = a(this.action, this.foreignHabitat.id, i.id);
                var l = _.storeSession.getJSON(p);
                if (!l) {
                    continue
                }
                var r = l.units,
                    o = l.resources,
                    t, n, s, h, c, e;
                for (t = 0, n = r.length; t < n; t++) {
                    h = r[t].id;
                    s = r[t].value;
                    e = this.habitatNode(i.id).find(".unitElement[data-primary-key='" + h + "'] input");
                    if (e.length === 0) {
                        continue
                    }
                    e.val(s)
                }
                for (t = 0, n = o.length; t < n; t++) {
                    c = o[t].id;
                    s = o[t].value;
                    e = this.habitatNode(i.id).find(".resourceElement[data-primary-key='" + c + "'] input");
                    if (e.length === 0) {
                        continue
                    }
                    e.val(s)
                }
                this.notify("urEb4YbM", this, {
                    habitatID: i.id,
                    unitInfos: r,
                    resourceInfos: o
                })
            }
        };
        e.prototype.inputFieldChangeHandler = function (o) {
            var t = $(o.target).parents(".listItem");
            var e = t.data("habitat");
            var s = i(t.find(".units input"));
            var n = i(t.find(".resources input"));
            this.notify("urEb4YbM", this, {
                habitatID: e,
                unitInfos: s,
                resourceInfos: n
            });
            var r = a(this.action, this.foreignHabitat.id, e);
            var l = {
                units: s,
                resources: n
            };
            _.storeSession.setJSON(r, l);
            this.notify("naNYg0H)", this, r)
        };
        e.prototype.maxButtonClickHandler = function (a) {
            var t = $(a);
            var e = t.parents(".listItem");
            var s = e.data("habitat");
            var n = t.data("max");
            var r = t.parent().find("input");
            r.val(n);
            var o = i(e.find(".units input"));
            var l = i(e.find(".resources input"));
            this.notify("urEb4YbM", this, {
                habitatID: s,
                unitInfos: o,
                resourceInfos: l
            })
        };
        e.prototype.openCastleClickHandler = function (i) {
            var e = $(i).parents(".listItem").data("habitat");
            if (!e) {
                return
            }
            this.notify("CncQVCpR", this, {
                habitat: t.habitate[e]
            })
        };
        e.prototype.hoverInListElement = function (e) {
            var t = $(e).data("habitat");
            if (!t) {
                return
            }
            this.notify("82_(qMdC", this, {
                habitatID: t
            })
        };
        e.prototype.hoverOutListElement = function () {
            this.notify("3yT4U8Jh", this);
            this.hideHovers()
        };
        e.prototype.unitClickHandler = function (i, a) {
            var e = $(a),
                s = e.parents(".listItem").data("habitat"),
                n = e.parent().data("primary-key");
            this.showHover(i, b.InfoHoverView, {
                unit: y[n],
                habitat: t.habitate[s]
            })
        };
        e.prototype.performAction = function (s) {
            var t = $(s).parents(".listItem");
            var e = t.data("habitat");
            var n = i(t.find(".units input"));
            var r = i(t.find(".resources input"));
            this.notify("M57F1C)j", this, {
                habitatID: e,
                unitInfos: n,
                resourceInfos: r
            });
            t.find("inputs").val("");
            var o = a(this.action, this.foreignHabitat.id, e);
            _.storeSession.removeItem(o)
        };
        e.prototype.mouseOverHandler = function (t) {
            t.preventDefault();
            t.stopPropagation();
            var e = function (t) {
                var e = t.className ? t.className.split(" ") : [];
                if ( !! ~e.indexOf("listItem")) {
                    this.hoverInListElement(t);
                    return true
                }
                return false
            }.bind(this);
            this.bubble(t, e, this.id)
        };
        e.prototype.mouseOutHandler = function (t) {
            t.preventDefault();
            t.stopPropagation();
            var e = function (t) {
                var e = t.className ? t.className.split(" ") : [];
                if (!e.length) {
                    return false
                }
                if ( !! ~e.indexOf("listItem")) {
                    this.hoverOutListElement(t);
                    return true
                }
                if ( !! ~e.indexOf("unitIcon")) {
                    this.hideHovers();
                    return true
                }
                return false
            }.bind(this);
            this.bubble(t, e, this.id)
        };
        e.prototype.listClickHandler = function (t) {
            t.stopPropagation();
            t.preventDefault();
            var e = function (i) {
                var e = i.className ? i.className.split(" ") : [];
                if (!e.length) {
                    return false
                }
                if (e.indexOf("unitIcon") > -1) {
                    this.unitClickHandler(t, i);
                    return true
                }
                if ( !! ~e.indexOf("button") && !! ~e.indexOf("action")) {
                    this.performAction(i);
                    return true
                }
                if ( !! ~e.indexOf("button") && !! ~e.indexOf("maxButton")) {
                    this.maxButtonClickHandler(i);
                    return true
                }
                if ( !! ~e.indexOf("headline") && !! ~e.indexOf("clickable")) {
                    this.openCastleClickHandler(i);
                    return true
                }
                return false
            }.bind(this);
            this.bubble(t, e, this.id)
        };
        e.prototype.getEvents = function () {
            var i = e.__super__.getEvents.apply(this, arguments);
            var t = function (e, t) {
                t = t || "click";
                i.push({
                    selector: "#" + this.id,
                    event: t,
                    callback: e,
                    target: this
                })
            }.bind(this);
            t(this.mouseOverHandler, "mouseover");
            t(this.mouseOverHandler, "focusin");
            t(this.mouseOutHandler, "mouseout");
            t(this.mouseOutHandler, "focusout");
            t(this.listClickHandler);
            t(this.inputFieldChangeHandler, "change");
            return i
        };
        e.prototype.addTimerForEntry = function (t) {
            if (!~this.entriesWithTimers.indexOf(t)) {
                this.entriesWithTimers.push(t)
            }
        };
        e.prototype.removeTimerForEntry = function (e) {
            var t = this.entriesWithTimers.indexOf(e);
            if (t > -1) {
                this.entriesWithTimers.splice(t, 1)
            }
        };
        e.prototype.timeEvent = function () {
            for (var t = 0, s = this.entriesWithTimers.length; t < s; t++) {
                var e = this.entriesWithTimers[t],
                    a = this.habitatNode(e),
                    n = i(a.find(".units input")),
                    r = i(a.find(".resources input"));
                if (!e) {
                    continue
                }
                this.notify("urEb4YbM", this, {
                    habitatID: e,
                    unitInfos: n,
                    resourceInfos: r
                })
            }
            if (!this.templateData.syncMessage) {
                return
            }
            var o = $("#" + this.templateData.htmlID + " .syncMessage .time.duration"),
                l = utils.date.secToTimeStr(utils.date.setCountDownTime(this.templateData.syncMessage.rawData.destinationETA));
            o.text(l)
        };
        e.prototype.deltaUpdate = function (w, c) {
            var y = $("#" + this.id + " .listItem"),
                s, d, t, r;
            for (s = 0, d = y.length; s < d; s++) {
                var e = c[s],
                    i = $(y[s]),
                    g = i.find(".unitElement"),
                    v = i.find(".resourceElement");
                i.attr("data-habitat", e.id);
                i.data("habitat", e.id);
                i.find(".title").html(utils.sanitize(e.name));
                i.find(".fields").html(e.distance);
                i.find(".points").html(e.points);
                i.find(".actions").hide();
                i.find("input").val("");
                for (t = 0, r = e.habitatUnits.length; t < r; t++) {
                    var u = e.habitatUnits[t],
                        h = $(g[t]),
                        p = u.amount,
                        f = u.maxInput.disabled;
                    h.find(".affordable").html(p);
                    h.find("input").attr("placeholder", p);
                    h.find("input").attr("disabled", f);
                    if (f) {
                        n(a(this.action, this.foreignHabitat.id, e.id), u.unitID)
                    }
                }
                for (t = 0, r = c[s].habitatResources.length; t < r; t++) {
                    var o = e.habitatResources[t],
                        m = $(v[t]),
                        l = m.find(".resourceAmount"),
                        b = m.find("input");
                    l.html(o.amount);
                    l.removeClass("red orange");
                    b.attr("placeholder", o.amount);
                    if (o.resourceColor) {
                        l.addClass(o.resourceColor)
                    }
                }
            }
            this.restoreInputValues()
        };
        return e
    }(TemplateView);
    Ne.ResourceHeader = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e);
            this.templateData.htmlID = this.id
        }
        t.prototype.timeEvent = function () {
            if (!this.controller) {
                return false
            }
            this.templateData.targetResources = this.controller.datasource.prepareTargetResources();
            this.create();
            this.draw();
            return true
        };
        return t
    }(TemplateView);
    F.View = function (i) {
        utils.__extends(e, i);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addOption("showSummary", true);
            this.addOption("castleSelectMessage", "FMUHNbNx");
            this.setOptions(t);
            this.castleList = null;
            this.headerViews = null;
            this.overview = null
        }
        e.prototype._formatTotalResources = function () {
            var s = t.getAllResources(),
                i = [];
            for (var e in s) {
                if (e === a.GOLD || e === a.TIME) {
                    continue
                }
                var n = s[e];
                var r = {
                    amount: n,
                    resourceID: e,
                    elementSize: "large"
                };
                i.push(r)
            }
            i[a.PEOPLE].amount = t.stats.freePeople;
            return i
        };
        e.prototype._formatTotalUnits = function () {
            var e = t.getOwnUnits(),
                i = [];
            for (var a in e) {
                var s = e[a];
                var n = {
                    amount: s,
                    unitID: a,
                    elementSize: "large"
                };
                i.push(n)
            }
            return i
        };
        e.prototype._castleClass = function () {
            if (utils.dict.size(t.habitate) > 18) {
                this.addClass("many-castles")
            } else if (utils.dict.size(t.habitate) < 4) {
                this.addClass("few-castles")
            }
        };
        e.prototype.createTable = function (t) {
            this.castleList = this.createSubview(this, {
                templateData: t,
                template: "castleList",
                attachTo: this.content,
                castleSelectMessage: this.castleSelectMessage
            }, F.CastleList);
            this._castleClass();
            if (this.showSummary) {
                this._header()
            }
        };
        e.prototype._header = function () {
            var e = t && t.habitate ? utils.dict.size(t.habitate) : 0;
            this.overview = this.createSubview(this, {
                name: "castleOverview",
                attachTo: this.mainContentContainer.parent,
                useContainer: true,
                templateData: {
                    header: {
                        title: translate("Castles") + ": " + e,
                        detail: translate("Points") + ": " + t.points
                    },
                    habitatResources: this._formatTotalResources(),
                    habitatUnits: this._formatTotalUnits()
                }
            }, F.OverviewElement)
        };
        e.prototype.dataUpdate = function (i, t) {
            e.__super__.dataUpdate.apply(this, arguments);
            this.mainContentContainer.parent.deleteSubviewByField("tag", "templateContainer");
            this.deleteAllSubviews();
            this.createTable(t);
            this.castleList.draw();
            this._header();
            this.overview.draw()
        };
        return e
    }(n.Window);
    F.CastleList = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("castleSelectMessage", "FMUHNbNx");
            this.setOptions(e)
        }
        t.prototype.castleClickHandler = function (e) {
            var i = e.currentTarget.id;
            var t = this.templateData.eventIdCache[i];
            if (t) {
                this.notify(this.castleSelectMessage, this, t)
            }
        };
        t.prototype.castleCenterHandler = function (i) {
            var s = $(i.currentTarget).data("parent");
            var a = this.templateData.eventIdCache[s];
            if (!a) {
                return
            }
            for (var t = 0, n = this.templateData.habitate.length; t < n; t++) {
                var e = this.templateData.habitate[t];
                if (e.id === a) {
                    this.notify(")-VQldtr", this, {
                        mapX: e.mapX,
                        mapY: e.mapY
                    })
                }
            }
            i.stopPropagation()
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            for (var i = 0, s = this.templateData.habitate.length; i < s; i++) {
                var a = this.templateData.habitate[i];
                e.push({
                    selector: "#" + a.htmlID,
                    event: "click",
                    callback: this.castleClickHandler,
                    target: this
                });
                e.push({
                    selector: "#" + a.htmlID + " .headline .icon",
                    event: "click",
                    callback: this.castleCenterHandler,
                    target: this
                })
            }
            return e
        };
        t.prototype.cleanFragments = function () {
            this.castleList.cleanFragments()
        };
        return t
    }(TemplateView);
    F.Controller = function (e) {
        utils.__extends(t, n.Controller);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (e, t) {
            if (this.view.hidden) {
                return
            }
            if (!t) {
                return
            }
            this.heightAdjusted = false;
            this.view.dataUpdate(e, t)
        };
        t.prototype[")cpUXikD"] = function () {
            if (this.heightAdjusted) {
                return
            }
            var t = $("#" + this.view.id),
                i = 5,
                e = t.find(".sortbar").outerHeight(true),
                a = t.find(".fixedHeader").outerHeight(true) + e + i;
            t.find(".main-content").css("top", a + "px");
            if (e > 0) {
                t.find(".fixedHeader").css("top", e + i + "px")
            }
            this.heightAdjusted = true
        };
        t.prototype["FMUHNbNx"] = function (e, t) {
            this.view.cancelNextClickMessage();
            this.notify("nKpUrnTn", this, t)
        };
        t.prototype[")-VQldtr"] = function (e, t) {
            this.notify("1mA0BwR5", this, {
                x: +t.mapX,
                y: +t.mapY
            })
        };
        t.prototype["&-QE2RMM"] = function (t, e, i) {
            this.datasource.prepareData(t, e, i);
            this.datasource.publishUpdate()
        };
        t.prototype["IqJr%3cr"] = function (t, e) {
            this.view.hide();
            this.view.cancelNextClickMessage();
            return this.notify("IqJr%3cr", t, {
                id: e,
                foreignHabitat: this.view.foreignHabitat
            })
        };
        return t
    }(n.Controller);
    F.DataSource = function (i) {
        utils.__extends(e, i);

        function e(t, i) {
            e.__super__.constructor.apply(this, arguments);
            this.foreignHabitat = null;
            this.sortType = null;
            this.value = null;
            this.sortDirection = null
        }
        e.prototype.prepareResources = function (o, n, s, r) {
            n = n ? true : false;
            s = s || [];
            var l = [];
            for (var i in o) {
                if (s.length > 0 && s.indexOf(i) === -1) {
                    continue
                }
                var e = {};
                e.resourceID = i;
                e.amount = o[i];
                e.resourceColor = t.habitate[r].getColorClass()[i];
                e.url = this.getImageSrc(e.resourceID, "resources");
                if (e.resourceID === a.PEOPLE) {
                    e.amount = t.habitate[r].habitatResources[a.PEOPLE].storeAmount - e.amount
                }
                if (n) {
                    e.maxInput = {
                        maxIcon: this.getImageSrc("maximum", "icons"),
                        max: e.amount,
                        primaryKey: i,
                        habitatID: r || ""
                    }
                }
                l.push(e)
            }
            return l
        };
        e.prototype.prepareUnits = function (a, e, n) {
            e = e ? true : false;
            var s = [];
            for (var i in a) {
                var t = {};
                t.unitID = i;
                t.amount = a[i];
                t.url = this.getImageSrc(t.unitID, "units");
                if (e) {
                    t.maxInput = {
                        maxIcon: this.getImageSrc("maximum", "icons"),
                        max: t.amount,
                        primaryKey: i,
                        habitatID: n || "",
                        disabled: false
                    }
                }
                s.push(t)
            }
            return s
        };
        e.prototype.prepareData = function (s, r, u) {
            this.sortType = s;
            this.value = r;
            this.sortDirection = u;
            var i, n;
            var h = t.getSortedHabitate(s, r, u, this.foreignHabitat);
            var o = [];
            var l = {};
            for (var a = 0, c = h.length; a < c; a++) {
                i = h[a];
                var e = {};
                e.htmlID = "id" + utils.uniqueID();
                e.id = i.id;
                e.habitatResources = this.prepareResources(i.stats.resources, false, [], i.id);
                e.habitatUnits = this.prepareUnits(i.stats.units.own);
                e.name = i.name;
                e.mapX = i.mapX;
                e.mapY = i.mapY;
                e.centerIcon = i.isHabitatAttacked() ? this.getImageSrc("AttackWarning", "reportIcons") : this.getImageSrc("centerHabitat", "icons");
                e.points = i.points + " " + translate("Points");
                if (this.foreignHabitat) {
                    n = utils.Map.distanceToHabitat(i.mapX, i.mapY, this.foreignHabitat.mapX, this.foreignHabitat.mapY);
                    e.distance = translate("%d fields", n)
                }
                o.push(e);
                l[e.htmlID] = e.id
            }
            this.__data = {
                habitate: o,
                eventIdCache: l
            }
        };
        e.prototype.setForeignHabitat = function (t) {
            this.foreignHabitat = t
        };
        e.prototype.modelUpdate = function () {
            this.prepareData(this.sortType, this.value, this.sortDirection);
            this.publishUpdate()
        };
        return e
    }(m);
    F.OverviewElement = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("template", "castleOverview", true);
            this.setOptions(e)
        }
        return t
    }(TemplateView);
    x.DataSource = function (i) {
        utils.__extends(e, m);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.getHabitats = function () {
            return t.getSortedHabitate()
        };
        e.prototype.getRowData = function (a, s, t) {
            var e = a[s];
            if (t) {
                var n = t.item,
                    r = t.vals,
                    i;
                i = e.filter(function (t) {
                    return r.indexOf(t[n]) !== -1
                });
                e = i
            }
            return e
        };
        e.prototype.getMovementsData = function () {
            var i = [];
            for (var a in t.habitate) {
                var s = t.habitate[a],
                    e = s.habitatTransits;
                if (!e || !e.length) {
                    continue
                }
                e.forEach(function (t) {
                    i.push(t)
                })
            }
            return i
        };
        e.prototype.sendHome = function (t, e, i) {
            d.DataSource.prototype.recallTroops.apply(this, arguments)
        };
        e.prototype.sendAllHome = function (t) {
            d.DataSource.prototype.recallAllTroops.apply(this, arguments)
        };
        e.prototype.speedUpMission = function (t, e) {
            d.DataSource.prototype.speedupMission.apply(this, [t, e])
        };
        e.prototype.speedupAllMissions = function (t, e) {
            d.DataSource.prototype.speedupAllMissions.apply(this, [t, e])
        };
        return e
    }(m);
    x.Controller = function (i) {
        utils.__extends(e, i);

        function e(t, i) {
            e.__super__.constructor.apply(this, arguments);
            this.resetActiveRows();
            this.resetSourceState()
        }
        e.prototype.init = function () {
            this.sections = {
                defending: x.DefendingView,
                defending_external: x.DefendingExternalView,
                offending: x.OffendingView,
                offending_external: x.OffendingExternalView,
                missions: x.MissionsView,
                movements: x.MovementsView
            };
            this.switchView("defending")
        };
        e.prototype.dataUpdate = function (t, e) {
            if (this.view) {
                this.switchView(this.currentSection, true)
            }
        };
        e.prototype.resetActiveRows = function () {
            this.activeRows = {};
            this.resetCollpaseToggles()
        };
        e.prototype.resetSourceState = function () {
            this.sourceState = "source"
        };
        e.prototype.switchView = function (e, i) {
            this.currentSection = e;
            this.notify("_f3L_ht_", this.view);
            var t = this.view.displayArea;
            if (!t) {
                return false
            }
            i = typeof i === "undefined" ? false : i;
            if (!i) {
                this.resetSourceState();
                this.resetActiveRows()
            }
            this.view.updateTroopHeader(e);
            this.view.removeClass("defending defending_external offending offending_external missions movements");
            this.view.addClass(e);
            setTimeout(function () {
                t.deleteAllSubviews();
                setTimeout(function () {
                    if (t && this.sections[e]) {
                        t.createSubview(t, {
                            name: "activeSection"
                        }, this.sections[e]);
                        t.draw();
                        this.applyDeplayedTotals()
                    }
                }.bind(this), 0);
                this.notify("VY71NNds", this.view)
            }.bind(this), 0)
        };
        e.prototype.applyDeplayedTotals = function () {
            if (this.deplayedUnitTotals) {
                this.view.troopHeader.troopCounts.dataUpdate(null, this.deplayedUnitTotals)
            }
            if (this.view.troopHeader.resourceCounts && this.deplayedResourceTotals) {
                this.view.troopHeader.resourceCounts.dataUpdate(null, this.deplayedResourceTotals)
            }
        };
        e.prototype["M%DCy7dk"] = function (t) {
            var e = t.name;
            this.switchView(e)
        };
        e.prototype["7w7FwT8p"] = function (t) {
            this.deplayedUnitTotals = t.units;
            this.deplayedResourceTotals = t.resources
        };
        e.prototype["EdOZyDAB"] = function (t) {
            this.sourceState = (t && t.name) === "toggleDest" ? "dest" : "source";
            this.manageSourceControl();
            if (this.view && this.view.displayArea) {
                this.view.displayArea.findSubviewByName("activeSection").changeSource(this.sourceState)
            }
            this.resetCollpaseToggles()
        };
        e.prototype.manageSourceControl = function () {
            if (!this.view || !this.view.troopHeader) {
                return
            }
            var t = this.view.troopHeader.findSubviewByName("toggleSource"),
                e = this.view.troopHeader.findSubviewByName("toggleDest");
            if (!t || !e) {
                return
            }
            if (this.sourceState === "source") {
                t.addClass("active");
                e.removeClass("active")
            } else {
                t.removeClass("active");
                e.addClass("active")
            }
        };
        e.prototype["VajY8Thx"] = function (t) {
            this._collapseControl("collapse", t)
        };
        e.prototype["8fq6Q7Yw"] = function (t) {
            this._collapseControl("expand", t)
        };
        e.prototype.resetCollpaseToggles = function () {
            this.manageCollapseControl(0, 999)
        };
        e.prototype.manageCollapseControl = function (i, a) {
            if (!this.view || !this.view.troopHeader) {
                return
            }
            var t = this.view.troopHeader.findSubviewByName("collapseClose"),
                e = this.view.troopHeader.findSubviewByName("collapseExpand");
            if (i === 0) {
                t.addClass("active");
                e.removeClass("active")
            } else if (i === a) {
                t.removeClass("active");
                e.addClass("active")
            } else {
                t.removeClass("active");
                e.removeClass("active")
            }
        };
        e.prototype._collapseControl = function (e, i) {
            var t = this.view.displayArea.findSubviewByName("treeTable");
            if (!t) {
                return
            }
            if (e === "collapse") {
                t.collapseAll()
            } else {
                t.expandAll()
            }
            this.view.troopHeader.collapseToggle.subviews.forEach(function (t) {
                t.removeClass("active")
            });
            i.addClass("active")
        };
        e.prototype.recordOpenRows = function (t, e) {
            if (typeof t === "number") {
                this._updateOpenRowsObject(t, e);
                return
            }
            $.each(t, function (i, t) {
                this._updateOpenRowsObject(t, e)
            }.bind(this))
        };
        e.prototype._updateOpenRowsObject = function (t, e) {
            if (e === true) {
                this.activeRows[t] = true
            } else {
                delete this.activeRows[t]
            }
        };
        e.prototype.openHabitat = function (t) {
            if (!t) {
                return
            }
            if (this.currentSection && this.currentSection === "missions") {
                this.notify("AAeX&RO7", this.view, {
                    habitatID: t,
                    action: "missions"
                });
                return
            }
            this.notify("createHabitatWindow", {
                id: t
            })
        };
        e.prototype["A8sqR6)3"] = function (t) {
            var e = function () {
                this.datasource.sendHome(t.source, t.destination, t.units)
            }.bind(this);
            if (!this._validateUnits(t.units, t.maximums)) {
                return
            }
            var i = translate("Send troops home"),
                a = translate("global.confirm");
            utils.dialog.confirm(this, a, i, e)
        };
        e.prototype["3tBSAX)H"] = function (t) {
            var e = function () {
                this.datasource.sendAllHome(t)
            }.bind(this);
            var i = translate("Send troops home"),
                a = translate("Do you really want to send all troops home?");
            utils.dialog.confirm(this, a, i, e)
        };
        e.prototype["VlIUf%nE"] = function (r, a) {
            var s = E[a],
                e = s.buildSpeedupCost,
                i = translate("Gold"),
                l = o.getValueOf("Mission time reduction for %@ costs %d %@. You have %d %@."),
                n;
            n = $.sprintf(l, translate(s.identifier), e, i, t.gold, i);
            utils.dialog.confirm(this, n, i, function () {
                if (t.gold < e) {
                    this.notify("Vjkw%oMN", this, {
                        costs: e
                    })
                } else {
                    this.datasource.speedUpMission(r, a)
                }
            }.bind(this))
        };
        e.prototype["6T4zy2KG"] = function (u) {
            var s = t.habitate[u].habitatMissions;
            var d = {};
            var a = [];
            var e = 0;
            var i;
            var r = this;
            if (!s || !s.length) {
                return
            }
            for (var l = 0; l < s.length; l++) {
                i = s[l];
                if (i.durationFactor == 1) {
                    a.push(translate(i.mission.identifier));
                    e = e + i.mission.buildSpeedupCost
                }
            }
            a = a.join(",");
            var n = translate("Gold");
            var h = o.getValueOf("Mission time reduction for %@ costs %d %@. You have %d %@.");
            var c = $.sprintf(h, a, e, n, t.gold, n);
            utils.dialog.confirm(this, c, n, function () {
                if (t.gold < e) {
                    r.notify("Vjkw%oMN", r, {
                        costs: e
                    })
                } else {
                    r.datasource.speedupAllMissions(u, "")
                }
            })
        };
        e.prototype._validateUnits = function (e, n) {
            var t = null,
                r = translate("Send troops home");
            if (!e) {
                t = "No units were assigned."
            }
            for (var s in e) {
                var i = e[s],
                    a = i.amount ? +i.amount : +i;
                if (isNaN(a) || a < 0 || a > n[s]) {
                    t = "Invalid Input";
                    break
                }
            }
            if (t) {
                utils.dialog.alert(this, translate(t), r, function () {});
                return false
            }
            return true
        };
        e.prototype["EmxE78NQ"] = function (o, e) {
            var n = e.destHabID,
                a = e.sourceHabID,
                s = e.time,
                r = a + "_" + s.toString().replace(/\s/g, "_"),
                i = t.findTransitsByGeneratedTransitId(r);
            if (!i) {
                return
            }
            D.DataSource.prototype.habitatInfo(n, function (t) {
                this.notify("BRH1gaaU", {
                    action: i.transitType === v.DEFENSE ? "syncDefense" : "syncAttack",
                    foreignHabitat: t.Habitat,
                    exclusionIDs: [a],
                    destinationETA: new Date(s),
                    syncTransit: i
                })
            }.bind(this))
        };
        return e
    }(n.Controller);
    x.MasterSectionView = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments);
            this.icons = {
                castle: this.getIcon("buttonCastle"),
                defense: this.getIcon("defense"),
                attack: this.getIcon("transitAttack"),
                attackWarning: this.getImage("AttackWarning", "reportIcons"),
                center: this.getIcon("centerHabitat")
            };
            this.resetTotalCounter()
        }
        t.prototype.draw = function () {
            t.__super__.draw.apply(this, arguments);
            this.applyJQueryEvents();
            this.reopenActives()
        };
        t.prototype.create = function (t) {
            this.deleteAllSubviews();
            var e = this.controller.sourceState;
            if (typeof t === "undefined" || !t) {
                if (e && e === "dest") {
                    t = this._reformatRows(e)
                } else {
                    t = this._formatData()
                }
            }
            this.createSubview(this, {
                rows: t,
                dynamicTitleOffset: this.dynamicTitleOffset || 25
            }, TreeTable);
            if (!t.length) {
                this.createSubview(this, {
                    content: translate(this.noDataMessage || "No transits"),
                    styles: "no-rows"
                })
            }
        };
        t.prototype.manageCollapseControl = function (t) {
            if (typeof t === "undefined") {
                t = this.node().find(".tree-table")
            }
            var e = t.find("tr.subrow:visible").length,
                i = t.find("tr.subrow").length;
            this.controller.manageCollapseControl(e, i)
        };
        t.prototype.applyJQueryEvents = function () {
            var t = this.node().find(".tree-table"),
                e = this,
                i = t.find("tr[data-expand]").map(function () {
                    return $(this).data("id")
                });
            t.find("tr").on("treetable:toggle", function () {
                var i = $(this);
                e.controller.recordOpenRows(i.data("id"), i.hasClass("active"));
                e.manageCollapseControl(t)
            });
            t.on("treetable:expandAll", function () {
                e.controller.recordOpenRows(i, true)
            });
            t.on("treetable:collapseAll", function () {
                e.controller.recordOpenRows(i, false)
            });
            t.find(".button").on("click", function () {
                var t = $(this);
                e.buttonClicked(t);
                return false
            });
            t.find(".icon, span.text").on("click", function () {
                var t = $(this).parents("tr"),
                    i = t.data("id");
                e.controller.openHabitat(i);
                return false
            })
        };
        t.prototype.reopenActives = function () {
            var t = this.node().find("table");
            for (var e in this.controller.activeRows) {
                t.find("tr[data-expand=true][data-id=" + e + "]:not(.active)").click()
            }
        };
        t.prototype.changeSource = function (t) {
            var e = this._reformatRows(t);
            this.informHeaderTotals();
            this.controller.resetActiveRows();
            this.create(e);
            this.draw();
            this.controller.applyDeplayedTotals()
        };
        t.prototype._reformatRows = function () {};
        t.prototype.buttonClicked = function () {};
        t.prototype._formatData = function () {
            var e = [],
                i = this.controller.datasource,
                a = i.getHabitats();

            function r(e) {
                for (var i = 0, a = e.length; i < a; i++) {
                    var t = e[i];
                    if (t.habitat && !e[i].habitat.name) {
                        t.habitat.name = translate("Renegade") + " " + t.habitat.id
                    }
                    if (t.sourceHabitat && !t.sourceHabitat.name) {
                        t.sourceHabitat.name = translate("Renegade") + " " + t.sourceHabitat.id
                    }
                    if (t.destinationHabitat && !t.destinationHabitat.name) {
                        t.destinationHabitat.name = translate("Renegade") + " " + t.destinationHabitat.id
                    }
                }
                return e
            }
            this.resetTotalCounter();
            for (var t = 0; t < a.length; t++) {
                var s = a[t],
                    o = r(i.getRowData(s, this.dataKey, this.keyAttrs)),
                    n = this._formatDataRow(s, o);
                if (n) {
                    e.push(n)
                }
            }
            this.informHeaderTotals();
            return e
        };
        t.prototype._buildCells = function (l, u, m, i) {
            if (typeof i === "undefined") {
                i = false
            }
            var r = u.units,
                t = u.resources,
                e = [],
                y = [1, 2, 101, 102, 201, 202, 10001, 10002];
            if (t && !$.isArray(t)) {
                t = this._parseResourcesObject(t)
            }
            e.push(utils.sanitize(l.name));
            if (r) {
                for (var o in r) {
                    var s = r[o],
                        a = i ? s : s.count;
                    if (typeof a === "undefined") {
                        a = s
                    }
                    if (m === true) {
                        var p = i ? y[o] : o;
                        var d = "units_" + l.id + "_" + p;
                        var c = a || "";
                        var f = c || "&nbsp;";
                        var h = "<span class='orig'>" + f + "</span>";
                        h += "<input type='text' name='" + d + "' value='" + c + "' />";
                        e.push(h)
                    } else {
                        e.push(a)
                    }
                }
            }
            if (t && t.length) {
                for (var n = 0, g = t.length; n < g; n++) {
                    e.push(t[n])
                }
            }
            return e
        };
        t.prototype._parseResourcesObject = function (e) {
            var t = [0, 0, 0, 0, 0, 0];
            for (var i in e) {
                var a = +e[i];
                if (a) {
                    t[+i - 1] = a
                }
            }
            return [].concat(t.slice(0, 3)).concat(t.slice(4))
        };
        t.prototype._defaultCells = function (i, t) {
            var e = [utils.sanitize(i.name), 0, 0, 0, 0, 0, 0, 0, 0];
            if (t && t.length) {
                e = e.concat(t)
            }
            return e
        };
        t.prototype.resetTotalCounter = function () {
            var t = this.controller.currentSection === "offending_external" ? [0] : [0, 0, 0, 0, 0];
            this.totalHeaderCounter = {
                units: [0, 0, 0, 0, 0, 0, 0, 0],
                resources: t
            }
        };
        t.prototype.informHeaderTotals = function () {
            this.notify("7w7FwT8p", this.totalHeaderCounter)
        };
        t.prototype._countForTotal = function (s, t, i) {
            if (typeof t === "undefined" || !t) {
                t = []
            }
            if (typeof i === "undefined") {
                i = false
            }
            for (var e = 0, n = t.length; e < n; e++) {
                var a = i ? +t[e] : +t[e].count;
                if (!isNaN(a)) {
                    this.totalHeaderCounter[s][e] += a || 0
                }
            }
        };
        t.prototype._countAllHabitatUnits = function (u, n, i) {
            var s = u;
            i = typeof i === "undefined" ? false : i;
            for (var a = 0, h = n.length; a < h; a++) {
                var r = n[a];
                for (var e = 0, l = r.cells.length; e < l; e++) {
                    var o = r.cells[e],
                        t;
                    if (e === 0) {
                        continue
                    }
                    t = i ? +$($(o)[1]).val() : o;
                    if (isNaN(t) || t === " ") {
                        t = 0
                    }
                    s[e] += t || 0
                }
            }
            return s
        };
        t.prototype._getCellsFromInputs = function (t) {
            var i = [];
            if (t) {
                for (var e = 0, n = t.length; e < n; e++) {
                    var r = t[e],
                        a = 0,
                        s = $($(r)[1]);
                    if (s.length) {
                        a = s.val() || 0
                    }
                    i.push(a)
                }
            }
            return i
        };
        t.prototype._mapUnitDict = function (a) {
            var e = {
                1: 0,
                2: 0,
                101: 0,
                102: 0,
                201: 0,
                202: 0,
                10001: 0,
                10002: 0
            }, i = {};
            for (var t in e) {
                i[t] = a[t] || e[t]
            }
            return i
        };
        return t
    }(e);
    x.Window = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.create()
        }
        t.prototype.draw = function () {
            t.__super__.draw.apply(this, arguments);
            Se("troopMovements")
        };
        t.prototype.create = function () {
            this.content.deleteAllSubviews();
            this._addTabbar();
            this.displayArea = this.content.createSubview(this.content, {
                styles: "display-area"
            })
        };
        t.prototype.updateTroopHeader = function (e) {
            if (!e) {
                return
            }
            this.contentContainer.deleteSubviewByField("name", "troopMovementHeader");
            this._troopHeader(e);
            this.troopHeader.draw();
            this.controller.manageSourceControl();
            if (this.controller.view) {
                var t = this.controller.view.displayArea.findSubviewByName("activeSection");
                if (t && t.manageCollapseControl) {
                    t.manageCollapseControl()
                }
            }
        };
        t.prototype._addTabbar = function () {
            this.tabbar = this.createSubview(this.contentContainer, {
                styles: "tabbar troopMovements",
                name: "troopMovementTabBar"
            });
            var i = [{
                name: "defending",
                icon: "castle",
                hoverText: "Defending troops"
            }, {
                name: "defending_external",
                icon: "defence",
                hoverText: "Outbound defending troops"
            }, {
                name: "movements",
                icon: "trade",
                hoverText: "Transits"
            }, {
                name: "missions",
                icon: "mission",
                hoverText: "Missions"
            }, {
                name: "offending_external",
                icon: "attack",
                hoverText: "Outbound attacking troops"
            }, {
                name: "offending",
                icon: "attack_warning",
                hoverText: "Offending troops"
            }];
            for (var e = 0; e < i.length; e++) {
                var t = i[e],
                    a;
                a = this.tabbar.createSubview(this.tabbar, {
                    styles: "tab",
                    icon: t.icon,
                    name: t.name,
                    clickMessage: "M%DCy7dk",
                    data: t.data || null,
                    hoverText: translate(t.hoverText)
                }, r.TabButton)
            }
            this.tabbar.clearfix()
        };
        t.prototype._troopHeader = function (e) {
            if (!e) {
                return
            }
            this.troopHeader = this.createSubview(this.contentContainer, {
                styles: "header-bar",
                name: "troopMovementHeader"
            });
            var t = this.troopHeader,
                i = this._resourceFilter(e);
            t.createSubview(t, {
                styles: "divider top"
            });
            t.createSubview(t, {
                styles: "divider bottom"
            });
            this._buildCollapseControl(t);
            if (this._sourceToggleRequired(e)) {
                this._buildSourceToggle(t)
            }
            if (i) {
                this.troopHeader.resources = t.createSubview(t, {
                    resources: [1, 1, 1, 1, 1, 1, 1],
                    filterArray: i,
                    styles: "resource-list",
                    showNames: false
                }, P.Table)
            }
            this.troopHeader.units = t.createSubview(t, {
                units: y,
                styles: "unit-list"
            }, b.Table);
            if (i) {
                this.troopHeader.resourceCounts = this.createSubview(this.troopHeader, {
                    styles: "counter resources"
                }, x.HeaderCounter)
            }
            this.troopHeader.troopCounts = this.createSubview(this.troopHeader, {
                styles: "counter troops"
            }, x.HeaderCounter);
            t.clearfix()
        };
        t.prototype._buildCollapseControl = function (t) {
            t.collapseToggle = t.createSubview(t, {
                styles: "collapse-toggle"
            });
            var e = t.collapseToggle;
            e.createSubview(e, {
                styles: "control close",
                name: "collapseClose",
                clickMessage: "VajY8Thx",
                content: "<span class='shell'></span>",
                group: "control",
                hover: translate("Hide all"),
                addButtonClass: false
            }, l);
            e.createSubview(e, {
                styles: "control expand",
                name: "collapseExpand",
                clickMessage: "8fq6Q7Yw",
                content: "<span class='shell'></span>",
                group: "control",
                hover: translate("Show all"),
                addButtonClass: false
            }, l)
        };
        t.prototype._buildSourceToggle = function (t) {
            t.sourceToggle = t.createSubview(t, {
                styles: "source-toggle"
            });
            var e = t.sourceToggle;
            e.createSubview(e, {
                styles: "control source",
                name: "toggleSource",
                clickMessage: "EdOZyDAB",
                content: "<span class='shell'></span>",
                group: "control",
                hover: translate("Sort by source"),
                addButtonClass: false
            }, l);
            e.createSubview(e, {
                styles: "control dest",
                name: "toggleDest",
                clickMessage: "EdOZyDAB",
                content: "<span class='shell'></span>",
                group: "control",
                hover: translate("Sort by destination"),
                addButtonClass: false
            }, l)
        };
        t.prototype._resourceFilter = function (e) {
            var t = null;
            if (e === "movements") {
                t = [a.WOOD, a.STONE, a.ORE, a.COPPER, a.SILVER]
            } else if (e === "offending_external") {
                t = [a.SILVER]
            }
            return t
        };
        t.prototype._sourceToggleRequired = function (t) {
            return ["defending_external", "offending_external", "movements"].indexOf(t) !== -1
        };
        return t
    }(n.Window);
    x.ControlButton = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (e, t) {
            this.data = t
        };
        t.prototype.create = function () {};
        return t
    }(N);
    x.HeaderCounter = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("type", "troops");
            this.setOptions(e)
        }

        function i(t) {
            return t > 999 ? Math.floor(t / 1e3) + "K" : t
        }
        t.prototype.dataUpdate = function (e, t) {
            this.data = t;
            this.deleteAllSubviews();
            this.create();
            this.draw()
        };
        t.prototype.create = function () {
            if (!this.data) {
                return
            }
            if (this.type === "troops") {
                this._buildTroops()
            }
        };
        t.prototype._buildTroops = function () {
            for (var t = 0, e = this.data.length; t < e; t++) {
                var a = this.data[t];
                this.createSubview(this, {
                    content: i(a),
                    styles: "headerCount"
                })
            }
        };
        return t
    }(e);
    x.DefendingView = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.dataKey = "habitatUnits";
            this.keyAttrs = {
                item: "battleType",
                vals: [0, 1]
            };
            this.button = this.getIcon("transitDefenseReturnWhite")
        }
        t.prototype.buttonClicked = function (n) {
            var t = n.parents("tr"),
                e = t.find(":input"),
                r = t.prevAll("tr.has-sub-rows").data("id"),
                i = t.data("id"),
                a;
            if (e.length) {
                var a = {}, s = {};
                e.each(function (o, n) {
                    var t = $(n),
                        e = t.attr("name").split("_")[2],
                        i = t.val(),
                        r = t.parent().find("span").text();
                    if (i) {
                        a[e] = i;
                        s[e] = +r
                    }
                });
                this.notify("A8sqR6)3", {
                    source: r,
                    destination: i,
                    units: a,
                    maximums: s
                })
            } else {
                this.notify("3tBSAX)H", i)
            }
        };
        t.prototype._formatDataRow = function (n, l) {
            var a = [],
                t = {}, s, i, r;
            for (var o = 0, u = l.length; o < u; o++) {
                var e = l[o];
                if (e.battleType === 0) {
                    s = e;
                    i = this._buildCells(s.habitat, {
                        units: s.units
                    });
                    this._countForTotal("units", s.units)
                } else {
                    var h = this._buildCells(e.sourceHabitat, {
                        units: e.units
                    }, true);
                    a.push({
                        icon: this.icons.center,
                        button: this.button,
                        data: {
                            id: e.sourceHabitat.id
                        },
                        cells: h
                    });
                    this._countForTotal("units", e.units)
                }
            }
            if (!s) {
                i = this._defaultCells(n)
            }
            if (a.length) {
                if (a.length > 1) {
                    t.button = this.button
                }
                t.rows = [{
                    data: {
                        id: n.id
                    },
                    cells: i,
                    icon: this.icons.castle
                }].concat(a);
                r = this._countAllHabitatUnits(i.slice(0), a, true)
            } else {
                r = i.slice(0)
            }
            t.icon = this.icons.castle;
            t.cells = r;
            t.data = {
                id: n.id
            };
            return t
        };
        return t
    }(x.MasterSectionView);
    x.DefendingExternalView = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments);
            this.dataKey = "externalHabitatUnits";
            this.keyAttrs = {
                item: "battleType",
                vals: [1]
            };
            this.button = this.getIcon("transitDefenseReturnWhite");
            this.noDataMessage = "There are currently no external defending troops"
        }
        t.prototype.buttonClicked = function (o) {
            var t = o.parents("tr"),
                a = t.find(":input"),
                e = t.prevAll("tr.has-sub-rows").data("id"),
                i = t.data("id"),
                s = this.controller.sourceState;
            if (s && s === "dest") {
                var l = i;
                i = e;
                e = l
            }
            if (a.length) {
                var n = {}, r = {};
                a.each(function (o, a) {
                    var t = $(a),
                        e = t.attr("name").split("_")[2],
                        i = t.val(),
                        s = t.parent().find("span").text();
                    if (i) {
                        n[e] = i;
                        r[e] = +s
                    }
                });
                this.notify("A8sqR6)3", {
                    source: i,
                    destination: e,
                    units: n,
                    maximums: r
                })
            }
        };
        t.prototype._formatDataRow = function (l, n) {
            var s = [],
                e = {}, i, a, r;
            if (!n.length) {
                return
            }
            for (var o = 0, u = n.length; o < u; o++) {
                var t = n[o];
                if (t.battleType === 0) {
                    i = t;
                    a = this._buildCells(i.habitat, {
                        units: this._mapUnitDict(i.habitatUnitDictionary)
                    });
                    this._countForTotal("units", i.habitatUnitDictionary)
                } else {
                    var h = this._buildCells(t.habitat, {
                        units: this._mapUnitDict(t.habitatUnitDictionary)
                    }, true);
                    s.push({
                        icon: this.icons.center,
                        button: this.button,
                        data: {
                            id: t.habitat.id
                        },
                        cells: h
                    });
                    this._countForTotal("units", t.habitatUnitDictionary)
                }
            }
            if (!i) {
                a = this._defaultCells(l)
            }
            if (s.length) {
                e.rows = s;
                r = this._countAllHabitatUnits(a.slice(0), s, true)
            } else {
                r = a.slice(0)
            }
            e.icon = this.icons.castle;
            e.cells = r;
            e.data = {
                id: l.id
            };
            return e
        };
        t.prototype._createRowMapping = function (l) {
            var e = {};
            for (var n = 0, h = l.length; n < h; n++) {
                var s = l[n],
                    i = s.rows;
                if (!i || !i.length) {
                    continue
                }
                for (var a = 0, u = i.length; a < u; a++) {
                    var o = i[a],
                        t = o.cells[0],
                        c = this._getCellsFromInputs(o.cells.slice(1)),
                        r = {};
                    r = {
                        cells: [s.cells[0]].concat(c),
                        data: {
                            id: s.data.id
                        }
                    };
                    t += "_" + o.data.id;
                    if (!e[t]) {
                        e[t] = [r]
                    } else {
                        e[t] = e[t].concat([r])
                    }
                }
            }
            return e
        };
        t.prototype._reformatRows = function (C) {
            var c = this._formatData();
            if (C === "source") {
                return c
            }
            var v = [];
            var m = this._createRowMapping(c);
            this.resetTotalCounter();
            for (var o in m) {
                var d = m[o],
                    w = o.split("_"),
                    h = w.pop(),
                    _ = o.replace("_" + h, ""),
                    l = [_, 0, 0, 0, 0, 0, 0, 0, 0],
                    p = [],
                    i = {};
                for (var r = 0, b = d.length; r < b; r++) {
                    var s = d[r],
                        n = s.cells,
                        u = [],
                        f = [],
                        y = [],
                        e, g;
                    for (var t = 0, S = n.length; t < S; t++) {
                        var a;
                        if (t === 0) {
                            g = n[t]
                        } else {
                            a = +n[t];
                            total = l[t] += a;
                            f.push(a);
                            y.push(a)
                        }
                    }
                    u = this._buildCells({
                        name: g,
                        id: s.data.id
                    }, {
                        units: y
                    }, true, true);
                    e = {
                        cells: u
                    };
                    if (s.data) {
                        e.data = s.data
                    }
                    e.button = this.button;
                    e.icon = this.icons.castle;
                    p.push(e);
                    this._countForTotal("units", f, true)
                }
                i.icon = this.icons.center;
                i.cells = l;
                i.rows = p;
                i.data = {
                    id: h
                };
                v.push(i)
            }
            return v
        };
        return t
    }(x.MasterSectionView);
    x.MissionsView = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.dataKey = "habitatMissions";
            this.btnSpeed = this.getIcon("missionSpeedup");
            this.btnFinish = this.getIcon("missionFinish");
            this.noDataMessage = "There are currently no active missions"
        }

        function i(t) {
            return t.sort(function (t, e) {
                return t.complete > e.complete ? +1 : -1
            })
        }

        function a(t) {
            var e = [0, 0, 0, 0, 0, 0, 0, 0],
                s = [1, 2, 101, 102, 201, 202, 10001, 10002];
            if (!t) {
                return e
            }
            for (var i in t) {
                var a = s.indexOf(+i);
                if (a !== -1) {
                    e[a] = +t[i] || 0
                }
            }
            return e
        }
        t.prototype.buttonClicked = function (i) {
            var t = i.parents("tr"),
                e = t.data("id");
            if (t.hasClass("has-sub-rows")) {
                this.notify("6T4zy2KG", e)
            } else {
                this.notify("VlIUf%nE", e, t.data("pk"))
            }
        };
        t.prototype._formatDataRow = function (o, s) {
            var l = [],
                h, t = {}, u = 0,
                f = [o.name, 0, 0, 0, 0, 0, 0, 0, 0];
            if (!s.length) {
                return false
            }
            s = i(s);
            for (var r = 0, y = s.length; r < y; r++) {
                var n = s[r],
                    e = n.mission,
                    c = a(e.unitConsumptions),
                    d = null,
                    p;
                p = this._buildCells({
                    name: translate(e.identifier),
                    id: e.primaryKey
                }, {
                    units: c
                }, false, true);
                if (!n.isSpeededup()) {
                    d = n.isHalfDurationReached() ? this.btnFinish : this.btnSpeed;
                    u += 1
                }
                l.push({
                    data: {
                        id: o.id,
                        pk: e.primaryKey
                    },
                    icon: this.getImage(e.identifier.replace(" ", "_"), "missions"),
                    button: d,
                    extraContent: utils.date.formatDateTime(n.complete),
                    cells: p
                });
                this._countForTotal("units", c, true)
            }
            t.rows = l;
            h = this._countAllHabitatUnits(f, l, false);
            if (u > 0) {
                t.button = this.btnSpeed
            }
            t.icon = this.icons.castle;
            t.cells = h;
            t.data = {
                id: o.id
            };
            return t
        };
        return t
    }(x.MasterSectionView);
    x.MovementsView = function (i) {
        utils.__extends(e, i);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.dataKey = "habitatTransits";
            this.transitIcons = {
                attack: this.icons.attack,
                attack_return: this.getIcon("transitAttackReturn"),
                defense: this.icons.defense,
                defense_return: this.getIcon("transitDefenseReturn"),
                transport: this.getIcon("transport"),
                transport_return: this.getIcon("transitTransportReturn"),
                spy: this.getIcon("transitSpy"),
                spy_return: this.getIcon("transitSpyReturn")
            };
            this.dynamicTitleOffset = 23
        }

        function a(e, t) {
            return e.sort(function (e, i) {
                var a = t ? e.data.time : e.destinationETA;
                var s = t ? i.data.time : i.destinationETA;
                return a > s ? +1 : -1
            })
        }

        function s(e) {
            var i = e.sourceHabitat,
                a = e.destinationHabitat,
                s = i && Object.prototype.hasOwnProperty.call(t.habitate, i.id),
                n = a && Object.prototype.hasOwnProperty.call(t.habitate, a.id);
            return s && n
        }
        e.prototype.iconForTransit = function (t) {
            var e = {
                0: "defense",
                1: "defense_return",
                2: "attack",
                3: "attack_return",
                4: "transport",
                5: "transport_return",
                6: "spy",
                7: "spy_return"
            };
            return this.transitIcons[e[t]]
        };
        e.prototype.syncIconForTransit = function (t) {
            if (t === v.DEFENSE) {
                return this.getIcon("defenseSyncWhite")
            }
            if (t === v.ATTACKER) {
                return this.getIcon("attackSyncWhite")
            }
            return null
        };
        e.prototype._formatData = function (n) {
            var l = [],
                i = {}, y = this.controller.datasource,
                r = y.getMovementsData(),
                o = n && n === "dest",
                h = o ? "destinationHabitat" : "sourceHabitat";
            this.resetTotalCounter();
            for (var a = 0, m = r.length; a < m; a++) {
                var t = r[a],
                    e = t[h],
                    d = t.transitType === v.DEFENSE || t.transitType === v.TRANSPORT,
                    p = d && s(t);
                if (!e || p && t.habitatId === e.id) {
                    continue
                }
                if (i[e.id]) {
                    i[e.id].transits.push(t)
                } else {
                    i[e.id] = {
                        source: e,
                        transits: [t]
                    }
                }
            }
            for (var f in i) {
                var u = i[f],
                    c = this._formatDataRow(u.source, u.transits, o);
                l.push(c)
            }
            this.informHeaderTotals();
            return l
        };
        e.prototype.buttonClicked = function (e) {
            var t = e.parents("tr"),
                i = t.prevAll("tr.has-sub-rows").data("id"),
                a = t.data("id"),
                s = t.data("time");
            this.notify("EmxE78NQ", this, {
                sourceHabID: i,
                destHabID: a,
                time: s
            })
        };
        e.prototype._formatDataRow = function (u, s, c) {
            var r = [],
                h, i = {}, y = utils.sanitize(u.name),
                p = [y, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
            if (!s.length) {
                return false
            }
            s = a(s);
            for (var l = 0, f = s.length; l < f; l++) {
                var e = s[l];
                var o = e.destinationHabitat ? e.destinationHabitat : e.sourceHabitat;
                var m = e.units || [0, 0, 0, 0, 0, 0, 0, 0];
                var g = e.resources || [0, 0, 0, 0, 0];
                if (c === true && e.sourceHabitat) {
                    o = e.sourceHabitat
                }
                var n = this._buildCells(o, {
                    units: m,
                    resources: g
                });
                var v = c ? o.id : u.id;
                if (!Object.prototype.hasOwnProperty.call(t.habitate, v) && e.transitType === 2) {
                    n = [n[0]];
                    for (var d = 0; d < 13; d++) {
                        n.push("-")
                    }
                }
                r.push({
                    data: {
                        id: o.id,
                        type: e.transitType,
                        time: e.destinationETA
                    },
                    icon: this.iconForTransit(e.transitType),
                    extraContent: e.formattedETA,
                    cells: n,
                    button: e.sourceHabitat && t.habitate[e.sourceHabitat.id] ? this.syncIconForTransit(e.transitType) : null
                });
                this._countForTotal("units", e.units);
                this._countForTotal("resources", this._parseResourcesObject(e.resources), true)
            }
            if (!r.length) {
                return
            }
            i.rows = r;
            h = this._countAllHabitatUnits(p, r, false);
            i.icon = this.icons.castle;
            i.cells = h;
            i.data = {
                id: u.id
            };
            return i
        };
        e.prototype._createRowMapping = function (u) {
            var i = {};
            for (var n = 0, c = u.length; n < c; n++) {
                var o = u[n],
                    a = o.rows,
                    l;
                if (!a || !a.length) {
                    continue
                }
                for (var s = 0, h = a.length; s < h; s++) {
                    var t = a[s],
                        e = t.cells[0],
                        d = t.cells.slice(1, 9),
                        p = t.cells.slice(9),
                        r = {};
                    l = [o.cells[0]].concat(d).concat(p);
                    r = {
                        cells: l,
                        icon: t.icon,
                        extraContent: t.extraContent,
                        data: {
                            id: o.data.id,
                            type: t.data.type,
                            time: t.data.time
                        }
                    };
                    e += "_" + t.data.id;
                    if (!i[e]) {
                        i[e] = [r]
                    } else {
                        i[e] = i[e].concat([r])
                    }
                }
            }
            return i
        };
        e.prototype._reformatRows = function (x) {
            var f = this._formatData();
            if (x === "source") {
                return f
            }
            var p = [];
            var y = this._createRowMapping(f);
            var m;
            this.resetTotalCounter();
            for (var u in y) {
                var g = y[u],
                    C = u.split("_"),
                    d = C.pop(),
                    S = u.replace("_" + d, ""),
                    c = [],
                    a = {}, o, k;
                o = [S, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
                for (var l = 0, D = g.length; l < D; l++) {
                    var e = g[l],
                        r = e.cells,
                        v = [],
                        h = [],
                        w = [],
                        _ = [],
                        b = [],
                        i;
                    for (var t = 0, T = r.length; t < T; t++) {
                        var n, s;
                        if (t === 0) {
                            m = r[t]
                        } else if (t > 0 && t < 9) {
                            n = +r[t];
                            total = o[t] += n;
                            h.push(n);
                            _.push(n)
                        } else {
                            s = +r[t];
                            total = o[t] += s;
                            w.push(s);
                            b.push(s)
                        }
                    }
                    v = this._buildCells({
                        name: m,
                        id: e.data.id
                    }, {
                        units: _,
                        resources: b
                    }, false, true);
                    i = {
                        cells: v
                    };
                    if (e.data) {
                        i.data = e.data
                    }
                    i.button = this.button;
                    i.icon = e.icon;
                    i.extraContent = e.extraContent;
                    k = e.extraContent;
                    c.push(i);
                    this._countForTotal("units", h, true);
                    this._countForTotal("resources", w, true)
                }
                a.icon = this.icons.castle;
                a.cells = o;
                a.rows = c;
                a.data = {
                    id: d
                };
                p.push(a)
            }
            return p
        };
        return e
    }(x.MasterSectionView);
    x.OffendingView = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.dataKey = "habitatUnits";
            this.keyAttrs = {
                item: "battleType",
                vals: [2]
            };
            this.noDataMessage = "There are no battles at the moment"
        }
        t.prototype._formatDataRow = function (a, n) {
            var l = [],
                e = {}, s = this._defaultCells(a),
                i, r;
            if (!n.length) {
                return false
            }
            if (a.nextBattleDate) {
                r = utils.date.formatDateTime(a.nextBattleDate)
            }
            for (var o = 0, u = n.length; o < u; o++) {
                var t = n[o];
                if (t.battleType === 0) {
                    i = t;
                    s = this._buildCells(i.habitat, {
                        units: i.units
                    });
                    this._countForTotal("units", i.units)
                } else {
                    var h = this._buildCells(t.sourceHabitat, {
                        units: t.units
                    });
                    l.push({
                        button: this.button,
                        data: {
                            id: t.sourceHabitat.id
                        },
                        cells: h,
                        icon: this.icons.center
                    });
                    this._countForTotal("units", t.units)
                }
            }
            e.rows = l;
            s = this._countAllHabitatUnits(s, l);
            if (r) {
                e.extraContent = translate("Next battle: %@", r)
            }
            e.icon = this.icons.attackWarning;
            e.cells = s;
            e.data = {
                id: a.id
            };
            return e
        };
        return t
    }(x.MasterSectionView);
    x.OffendingExternalView = function (a) {
        utils.__extends(e, a);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.dataKey = "externalHabitatUnits";
            this.keyAttrs = {
                item: "battleType",
                vals: [2]
            };
            this.button = this.getIcon("transitAttackReturnWhite");
            this.noDataMessage = "There are no battles at the moment"
        }
        var i = "-";

        function s(t) {
            return t.sort(function (t, e) {
                return t.habitat.nextBattleDate > e.habitat.nextBattleDate ? +1 : -1
            })
        }

        function n(i) {
            var e = t.conquestPointDictionary;
            return e ? e[i] || 0 : 0
        }

        function r() {
            var e = 0;
            if (t.conquestPointDictionary) {
                for (var i in t.conquestPointDictionary) {
                    var a = t.conquestPointDictionary[i];
                    e += +a || 0
                }
            }
            return e
        }
        e.prototype.buttonClicked = function (o) {
            var t = o.parents("tr"),
                a = t.find(":input"),
                e = t.prevAll("tr.has-sub-rows").data("id"),
                i = t.data("id"),
                s = this.controller.sourceState;
            if (s && s === "dest") {
                var l = i;
                i = e;
                e = l
            }
            if (a.length) {
                var n = {}, r = {};
                a.each(function (o, a) {
                    var t = $(a),
                        e = t.attr("name").split("_")[2],
                        i = t.val(),
                        s = t.parent().find("span").text();
                    if (i) {
                        r[e] = i;
                        n[e] = +s
                    }
                });
                this.notify("A8sqR6)3", {
                    source: i,
                    destination: e,
                    units: r,
                    maximums: n
                })
            }
        };
        e.prototype._formatDataRow = function (o, a) {
            var l = [],
                t = {}, e = this._defaultCells(o, [0]);
            if (!a.length) {
                return false
            }
            a = s(a);
            for (var u = 0, p = a.length; u < p; u++) {
                var n = a[u];
                var r = +n.sourceHabitat.id === +o.id ? n.habitat : n.sourceHabitat;
                var c = ["-"];
                var d = this._buildCells(r, {
                    units: this._mapUnitDict(n.habitatUnitDictionary),
                    resources: c
                }, true, true);
                var h = utils.date.formatDateTime(r.nextBattleDate);
                l.push({
                    button: this.button,
                    data: {
                        id: r.id,
                        battleTime: r.nextBattleDate
                    },
                    extraContent: translate("Next battle: %@", h),
                    cells: d,
                    icon: this.icons.attack
                });
                this._countForTotal("units", n.habitatUnitDictionary)
            }
            t.rows = l;
            e = this._countAllHabitatUnits(e, l, true);
            if (e[9] === 0) {
                e[9] = i
            }
            t.icon = this.icons.castle;
            t.cells = e;
            t.data = {
                id: o.id
            };
            return t
        };
        e.prototype._createRowMapping = function (l) {
            var e = {};
            for (var n = 0, h = l.length; n < h; n++) {
                var o = l[n],
                    a = o.rows;
                if (!a || !a.length) {
                    continue
                }
                for (var s = 0, u = a.length; s < u; s++) {
                    var i = a[s],
                        t = i.cells[0],
                        c = this._getCellsFromInputs(i.cells.slice(1)),
                        r = {};
                    r = {
                        cells: [o.cells[0]].concat(c),
                        data: {
                            id: o.data.id,
                            battleTime: i.data.battleTime
                        },
                        extraContent: i.extraContent
                    };
                    t += "_" + i.data.id;
                    if (!e[t]) {
                        e[t] = [r]
                    } else {
                        e[t] = e[t].concat([r])
                    }
                }
            }
            return e
        };
        e.prototype._reformatRows = function (A) {
            var m = this._formatData();
            if (A === "source") {
                return m
            }
            var f = [];
            var g = this._createRowMapping(m);
            this.resetTotalCounter();
            for (var c in g) {
                var w = g[c],
                    M = c.split("_"),
                    p = M.pop(),
                    x = c.replace("_" + p, ""),
                    b = [],
                    e = {}, _, o, y, v, a, r;
                _ = n(p);
                o = [x, 0, 0, 0, 0, 0, 0, 0, 0, _];
                for (var d = 0, k = w.length; d < k; d++) {
                    var h = [],
                        S = [],
                        T = [],
                        D = [],
                        C = [],
                        s;
                    a = w[d];
                    r = a.cells;
                    for (var t = 0, I = r.length; t < I; t++) {
                        var l, u;
                        if (t === 0) {
                            v = r[t]
                        } else if (t > 0 && t < 9) {
                            l = +r[t];
                            total = o[t] += l;
                            S.push(l);
                            D.push(l)
                        } else {
                            u = +r[t];
                            total = o[t] += u;
                            T.push(u);
                            C.push(u)
                        }
                    }
                    h = this._buildCells({
                        name: v,
                        id: a.data.id
                    }, {
                        units: D,
                        resources: C
                    }, true, true);
                    if (h[9] === 0) {
                        h[9] = i
                    }
                    s = {
                        cells: h
                    };
                    if (a.data) {
                        s.data = a.data
                    }
                    s.button = this.button;
                    s.icon = this.icons.castle;
                    y = a.extraContent;
                    b.push(s);
                    this._countForTotal("units", S, true)
                }
                e.extraContent = y;
                e.icon = this.icons.attack;
                e.cells = a.extraContent;
                e.cells = o;
                e.rows = b;
                e.data = {
                    id: p
                };
                f.push(e)
            }
            return f
        };
        return e
    }(x.MasterSectionView);
    z.Window = function (s) {
        utils.__extends(e, s);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            utils.linkMethod("prepareResources", F.DataSource, e)
        }

        function i(t) {
            return $(".win.globalMissions .missionContainer[data-habitat='" + t + "']")
        }
        e.prototype.createList = function () {
            this.missionList = this.content.createSubview(this.content, {
                attachTo: this.content,
                template: "missionList",
                name: "missionList",
                useTimer: true,
                templateData: {
                    headerMissions: t.getSortedMissions(),
                    listItems: this._habitatData()
                }
            }, z.GlobalMissionList)
        };
        e.prototype.dataUpdate = function () {
            this.mainContentContainer.parent.deleteSubviewByField("tag", "templateContainer");
            this.content.deleteAllSubviews();
            this.createList();
            this.createBottomBar();
            this.missionList.draw();
            this.bottomBar.draw()
        };
        e.prototype._habitatData = function () {
            var s = [],
                n = t.getSortedHabitate();
            for (var i = 0, l = n.length; i < l; i++) {
                var e = n[i],
                    u = [a.WOOD, a.STONE, a.ORE, a.PEOPLE],
                    r = {}, h = this.controller.datasource.getMissionArray(e.id),
                    o;
                r = this.prepareResources(e.stats.resources, false, u, e.id);
                o = {
                    habitatID: e.id,
                    header: {
                        title: utils.dynamicTitle(utils.sanitize(e.name)),
                        icon: this.getIconSrc("buttonCastle"),
                        clickable: true
                    },
                    habitatResources: r,
                    missions: e.getSortedMissions(h)
                };
                s.push(o)
            }
            return s
        };
        e.prototype.createBottomBar = function () {
            this.bottomBar = this.createSubview(this.mainContentContainer.parent, {
                attachTo: this.mainContentContainer.parent,
                template: "missionBottomBar",
                name: "missionBottomBar",
                useContainer: true,
                templateData: {
                    selected: 0
                }
            }, z.BottomBar)
        };
        e.prototype.findListHabitatByID = function (t) {
            return this.missionList.findSubviewByName(t)
        };
        e.prototype.updateExecuteButton = function () {
            var e = this.countTotalSelected(),
                t = $(".win.globalMissions .execute");
            t.find(".execTotal").text(e);
            if (e === 0) {
                t.addClass("disabled")
            } else {
                t.removeClass("disabled")
            }
        };
        e.prototype.updateSingleHabitat = function (s, n) {
            var r = i(s),
                e, a, t;
            e = function (t) {
                return t.primaryKey === a
            };
            r.find(":checkbox").each(function () {
                var i = $(this);
                a = i.data("mission");
                t = n.filter(e)[0];
                i.prop("checked", t.selected);
                if (t.executable) {
                    i.show()
                } else {
                    i.hide()
                }
            })
        };
        e.prototype.getSelectedMissions = function (e) {
            var a = i(e).find(":checkbox"),
                t = [];
            a.each(function () {
                var e = $(this);
                if (e.is(":checked")) {
                    t.push(e.data("mission"))
                }
            });
            return t
        };
        e.prototype.getAllSelected = function () {
            var t = {}, e = $(".missionContainer");
            e.each(function () {
                var i = $(this),
                    e = i.data("habitat"),
                    a = i.find(":checkbox:visible:checked");
                if (!e) return;
                a.each(function () {
                    var a = $(this),
                        i = a.data("mission");
                    if (t[e]) {
                        t[e].push(i)
                    } else {
                        t[e] = [i]
                    }
                })
            });
            return t
        };
        e.prototype.countTotalSelected = function () {
            return $(".win.globalMissions :checkbox:visible:checked").length
        };
        e.prototype.allCheckboxesSelected = function () {
            var t = $(".win.globalMissions :checkbox:visible"),
                e = t.filter(":checked");
            return t.length === e.length
        };
        return e
    }(n.Window);
    z.GlobalMissionList = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }

        function i(e) {
            var t = $(e);
            if (t.is(":checkbox")) {
                this.missionClicked(t);
                return true
            }
            if (t.is(".selectAllInHabitat")) {
                this.selectRow(t);
                return true
            }
            if (t.is(".title")) {
                this.openHabitat(t);
                return true
            }
            return false
        }

        function a(i, e) {
            var t = $(i);
            if (t.is(".headerIcon")) {
                this.showMissionInfo(t, e);
                return true
            }
            if (t.is(".selectAllInHabitat")) {
                this.showSelectAllHover(t, e);
                return true
            }
            return false
        }
        t.prototype.missionClicked = function (t) {
            this.notify("5rqSDESh", {
                mission: t.data("mission"),
                habitatID: t.parents(".missionContainer").data("habitat")
            })
        };
        t.prototype.selectRow = function (t) {
            this.notify("A41X0D6e", {
                habitatID: t.parents(".missionContainer").data("habitat")
            })
        };
        t.prototype.showMissionInfo = function (t, e) {
            this.showHover(e, Te.HoverView, {
                styles: "mission",
                missionPK: t.data("mission")
            })
        };
        t.prototype.showSelectAllHover = function (e, t) {
            this.showHover(t, R, {
                content: translate("Select all missions"),
                styles: "buildingHover"
            })
        };
        t.prototype.openHabitat = function (t) {
            this.notify("0B3)YIHM", {
                habitat: {
                    id: t.parents(".missionContainer").data("habitat")
                }
            })
        };
        t.prototype.clickHandler = function (t) {
            this.bubble(t, i.bind(this), "globalMissionList")
        };
        t.prototype.hoverHandler = function (t) {
            if (t.type === "mouseover") {
                this.bubble(t, a.bind(this), "globalMissionList")
            } else {
                this.hideHovers()
            }
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                selector: "#globalMissionList",
                event: "click",
                callback: this.clickHandler,
                target: this
            });
            e.push({
                selector: "#globalMissionList",
                event: "mouseover",
                callback: this.hoverHandler,
                target: this
            });
            e.push({
                selector: "#globalMissionList",
                event: "mouseout",
                callback: this.hoverHandler,
                target: this
            });
            return e
        };
        t.prototype.timeEvent = function () {
            $(".globalMissions .countdown").each(function () {
                var t = $(this),
                    e = t.data("complete"),
                    i = utils.date.setCountDownTime(new Date(e));
                t.text(utils.date.secToTimeStr(i))
            })
        };
        return t
    }(TemplateView);
    z.BottomBar = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.selectAllHover = function () {
            this.showHover(event, R, {
                content: translate("Select all habitats"),
                styles: "buildingHover"
            })
        };
        t.prototype.selectAll = function () {
            this.notify("diLMsHdj")
        };
        t.prototype.execute = function () {
            this.notify("OjgeedYc")
        };
        t.prototype.hoverHandler = function (t) {
            if (t.type === "mouseover") {
                this.selectAllHover()
            } else {
                this.hideHovers()
            }
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                selector: ".selectAllButton",
                event: "click",
                callback: this.selectAll,
                target: this
            });
            e.push({
                selector: ".selectAllButton",
                event: "mouseover",
                callback: this.hoverHandler,
                target: this
            });
            e.push({
                selector: ".selectAllButton",
                event: "mouseout",
                callback: this.hoverHandler,
                target: this
            });
            e.push({
                selector: ".execute",
                event: "click",
                callback: this.execute,
                target: this
            });
            return e
        };
        return t
    }(TemplateView);
    z.Controller = function (a) {
        utils.__extends(e, a);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.setOptions(t)
        }

        function i(e) {
            var t = [];
            for (var i in e) {
                t.push(parseInt(i, 10))
            }
            return t
        }
        e.prototype.dataUpdate = function (e, t) {
            if (t === null || this.view.hidden) {
                return
            }
            this.view.dataUpdate(e, t);
            this.view.updateExecuteButton()
        };
        e.prototype["5rqSDESh"] = function (i) {
            var a = {
                primaryKey: i.mission
            };
            var e = i.habitatID;
            var s = t.habitate[e];
            var n = this.datasource.toggleMission(e, a);
            var r = s.getSortedMissions(n);
            this.view.updateSingleHabitat(e, r);
            this.view.updateExecuteButton();
            this.notify("5rqSDESh", this, {
                habitatId: e,
                mission: a
            })
        };
        e.prototype.refreshMissionsForHabitat = function (e) {
            var i = this.datasource.getMissionArray(e);
            var a = t.habitate[e].getSortedMissions(i);
            this.view.updateSingleHabitat(e, a);
            this.view.updateExecuteButton()
        };
        e.prototype["OjgeedYc"] = function () {
            var t = this.view.getAllSelected();
            if (!utils.dict.size(t)) {
                return
            }
            this.datasource.executeAllMissionsForHabitats(t)
        };
        e.prototype["diLMsHdj"] = function () {
            var e = false;
            if (this.view.allCheckboxesSelected()) {
                e = true
            }
            for (var i in t.habitate) {
                this["A41X0D6e"]({
                    habitatID: i
                }, e)
            }
        };
        e.prototype["A41X0D6e"] = function (d, u) {
            var e = d.habitatID,
                n = t.habitate[e],
                r = i(E),
                h = [],
                a, o;
            o = u || typeof u === "undefined" && this.view.getSelectedMissions(e).length > 0;
            if (o) {
                r = []
            }
            this.datasource.setMissionArray(e, r);
            a = n.getSortedMissions(r, true);
            if (!o) {
                for (var l = 0, c = a.length; l < c; l++) {
                    var s = a[l];
                    if (!s.executable) {
                        s.selected = false
                    } else {
                        h.push(s.primaryKey)
                    }
                }
                this.datasource.setMissionArray(e, i(h))
            }
            this.view.updateSingleHabitat(n.id, a);
            this.view.updateExecuteButton();
            this.notify("5rqSDESh", this, {
                habitatId: n.id
            })
        };
        e.prototype.deselectAllMissionsInHabitat = function (t) {
            this.datasource.remove(t.id);
            delete this.globalMissions[t.id]
        };
        e.prototype["0B3)YIHM"] = function (t) {
            this.notify("createHabitatWindow", t.habitat)
        };
        return e
    }(n.Controller);
    z.DataSource = function (s) {
        "use strict";
        utils.__extends(e, s);

        function a(t) {
            return _.storeLocal.createKey("m", t)
        }

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.loadMissions = function () {
            var i = {}, e;
            for (var s in t.habitate) {
                e = _.storeLocal.getJSON(a(s));
                if (e === null || e.length === 0) {
                    i[s] = null
                } else {
                    i[s] = e
                }
            }
            this.setData({
                globalMissions: i
            })
        };
        e.prototype._createStorageKey = function (e, t) {
            var i = t && t.primaryKey ? [t.primaryKey] : [];
            _.storeLocal.setJSON(a(e), i)
        };
        e.prototype.toggleMission = function (t, e) {
            var i = _.storeLocal.getJSON(a(t));
            if (i && !! ~i.indexOf(e.primaryKey)) {
                this.removeMission(t, e)
            } else {
                this.addMission(t, e)
            }
            return this.getMissionArray(t)
        };
        e.prototype.addMission = function (t, i) {
            var e = _.storeLocal.getJSON(a(t));
            if (!e) {
                this._createStorageKey(t, i);
                return
            }
            e.push(i.primaryKey);
            _.storeLocal.setJSON(a(t), e);
            this._updateState(t, e);
            return this.getMissionArray(t)
        };
        e.prototype.removeMission = function (e, i) {
            var t = _.storeLocal.getJSON(a(e));
            if (!t) {
                return
            }
            t.splice(t.indexOf(i.primaryKey), 1);
            _.storeLocal.setJSON(a(e), t);
            this._updateState(e, t);
            return this.getMissionArray(e)
        };
        e.prototype.setMissionArray = function (t, e) {
            _.storeLocal.setJSON(a(t), e);
            this._updateState(t, e);
            return this.getMissionArray(t)
        };
        e.prototype.getMissionArray = function (e) {
            var t = _.storeLocal.getJSON(a(e));
            if (!t) {
                return []
            }
            return t
        };
        e.prototype.remove = function (t) {
            _.storeLocal.setJSON(a(t), []);
            this._updateState(t, [])
        };
        e.prototype.executeAllMissionsForHabitats = function (t) {
            var e = {
                habitatIDMissionIDArrayDictionary: i.prepareDict(t)
            };
            i.request("HabitatAction/executeMissionsInHabitatDictionary", e, this.triggerModelUpdate, this)
        };
        e.prototype._updateState = function (t, e) {
            if (!this.__data || !this.__data.globalMissions) {
                return
            }
            this.__data.globalMissions[t] = e
        };
        return e
    }(m);
    Te.HoverView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("missionPK");
            this.setOptions(e);
            this.mission = E[this.missionPK];
            this.styleArray.push("missionHover")
        }
        t.prototype.create = function () {
            var e = this.mission.identifier.split("/")[0];
            var t = this.createSubview(this, {});
            this.createSubview(t, {
                content: translate(e),
                styles: "title"
            });
            this.createSubview(t, {
                content: this.notify("rvHW39mY", this, {
                    imageName: e,
                    imageCategory: "missions"
                }),
                styles: "icon"
            });
            this.createSubview(t, {
                content: this.mission.getDescription(),
                styles: "description"
            });
            t.clearfix();
            if (this.mission.resourceConsumptions) {
                this.createSubview(t, {
                    styles: "title sub",
                    content: translate("Resources needed")
                });
                this.createSubview(t, {
                    resources: this.mission.resourceConsumptions,
                    styles: "resources"
                }, P.Table);
                t.clearfix()
            }
            this.createSubview(t, {
                styles: "title sub",
                content: translate("Units needed")
            });
            this.createSubview(t, {
                styles: "units",
                units: this.mission.unitConsumptions
            }, b.Table);
            this.createSubview(t, {
                showIcon: true,
                runningTimer: false,
                styles: "duration",
                time: this.mission.duration
            }, K);
            t.clearfix();
            var a = this.getEarnedMissionResources();
            this.createSubview(t, {
                styles: "title sub",
                content: translate("Resources produced")
            });
            this.createSubview(t, {
                styles: "resources required",
                resources: a
            }, P.Table);
            t.clearfix();
            var i = this.getReturningUnits();
            if (utils.dict.size(i) > 0) {
                this.createSubview(t, {
                    styles: "title sub",
                    content: translate("Returned units")
                });
                this.createSubview(t, {
                    styles: "units returning",
                    units: i
                }, b.Table);
                t.clearfix()
            }
        };
        t.prototype.getEarnedMissionResources = function () {
            var e = {};
            var t;
            if (this.mission.resourceProductionVariance < 1) {
                for (t in this.mission.resourceProductions) {
                    var i = this.mission.resourceProductions[t];
                    e[t] = i * this.mission.resourceProductionVariance + " - " + i
                }
                return e
            } else {
                return this.mission.resourceProductions
            }
        };
        t.prototype.getReturningUnits = function () {
            var e = {};
            for (var i in this.mission.unitProductions) {
                var t = this.mission.unitProductions[i],
                    a = t * this.mission.unitProductionVariance;
                if (a != t) {
                    e[i] = a + " - " + t
                }
            }
            return e
        };
        return t
    }(R);
    z.HabitatList = function (i) {
        utils.__extends(t, i);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("habitat");
            this.addRequired("building");
            this.addOption("preselectedMissions", []);
            this.addOption("showButtons", true);
            this.addOption("checkbox", false);
            this.addOption("useContainers", true);
            this.addOption("clearfixRows", true);
            this.setOptions(e);
            this.checkboxes = []
        }
        t.prototype.getSelectedMissions = function () {
            if (!this.checkbox) {
                return
            }
            var e = [];
            for (var t = 0; t < this.checkboxes.length; t++) {
                if (this.checkboxes[t].isChecked()) {
                    e.push(this.checkboxes[t].data.item.primaryKey)
                }
            }
            return e
        };
        t.prototype.dataUpdate = function (e, i) {
            this.checkboxes = [];
            t.__super__.dataUpdate.apply(this, arguments)
        };
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            var y = this.building.missions;
            var a, h, u, s, g, o, r;
            var m, l;
            var f = 0;
            var S = {}, _ = {};
            var c = true;
            var p = false;
            var d;
            var n;
            var i;
            if (this.preselectedMissions === null) {
                this.preselectedMissions = []
            }
            u = this.useContainers ? this.createContainer() : this;
            for (i = 0; i < this.habitat.habitatMissions.length; i++) {
                if (this.habitat.habitatMissions[i].isSpeededup() === false) {
                    f += 1
                }
            }
            if (this.showButtons) {
                this.executeSelectedButton = this.createSubview(this.parent, {
                    hidden: this.preselectedMissions.length > 1 ? false : true,
                    styles: "execute",
                    icon: "missionMultipleBlack",
                    iconCategory: "icons",
                    content: translate("Mission factory"),
                    clickMessage: "OjgeedYc",
                    name: "executeGlobal"
                }, k)
            }
            if (this.showButtons && f > 1) {
                this.createSubview(this.parent, {
                    icon: "missionSpeedupBlack",
                    iconCategory: "icons",
                    content: translate("Speedup all running missions"),
                    clickMessage: "3UXJnxW7",
                    data: this.habitat.habitatMissions
                }, k)
            }
            var v = this.habitat.getSortedMissions(this.preselectedMissions);
            var b = this.preselectedMissions;
            for (i = 0; i < y.length; i++) {
                a = y[i];
                var w = this.notify("rvHW39mY", this, {
                    imageName: a.identifier,
                    imageCategory: "missions"
                });
                s = u.createSubview(u, {
                    styles: "missionListItem",
                    clickMessage: null
                });
                s.createSubview(s, {
                    content: w,
                    lazyHoverClass: Te.HoverView,
                    expiryInterval: 0,
                    lazyHoverOptions: {
                        missionPK: a.primaryKey
                    },
                    styles: "missionIcon"
                }, N);
                h = this.notify("rvHW39mY", this, {
                    imageName: "mission",
                    imageCategory: "icons"
                });
                o = "z&iOKe3K";
                r = "button disabled";
                m = E[a.primaryKey];
                c = a.isMissionPossible(this.habitat.id);
                if (c) {
                    r = "button"
                } else {
                    o = null
                }
                p = false;
                if (b.indexOf(a.primaryKey) != -1) {
                    p = true
                }
                d = false;
                if (v[i].executable) {
                    d = true
                }
                l = this.habitat.getHabitatMission(a.primaryKey);
                if (typeof l != "undefined") {
                    h = this.notify("rvHW39mY", this, {
                        imageName: "missionSpeedup",
                        imageCategory: "icons"
                    });
                    r = "button speedup";
                    o = "LUv0UDdp";
                    if (l.isSpeededup()) {
                        r = "button disabled";
                        o = null
                    }
                }
                if (this.showButtons && !this.parent.isPreview) {
                    g = this.createSubview(s, {
                        content: h,
                        clickMessage: o,
                        styles: r,
                        data: a.primaryKey,
                        propagateClicks: false
                    }, e)
                }
                if (this.checkbox) {
                    n = s.createSubview(s, {
                        styles: "checkboxWrapper",
                        clickMessage: "5rqSDESh",
                        data: {
                            item: a,
                            habitatID: this.habitat.id
                        },
                        propagateClicks: false,
                        fireClickMessage: true
                    }, O.Checkbox);
                    this.checkboxes.push(n);
                    if (c === true) {
                        if (d === false) {
                            n.hide()
                        }
                        if (p === true) {
                            n.show();
                            n.check()
                        } else {
                            n.uncheck()
                        }
                    } else {
                        n.hide()
                    }
                }
                s.clearfix();
                if (l) {
                    this.createSubview(s, {
                        time: Math.floor((l.complete - (new Date - W)) / 1e3),
                        runningTimer: true,
                        formatFunction: utils.date.secToTimeStr,
                        styles: "countdown"
                    }, K)
                }
                if (this.clearfixRows && i % 2 == 1) {
                    u.clearfix()
                }
            }
        };
        t.prototype.updateMissionCheckboxes = function (s) {
            for (var t = 0, n = s.length; t < n; t++) {
                var e = s[t];
                for (var i = 0, r = this.checkboxes.length; i < r; i++) {
                    var a = this.checkboxes[i],
                        o = a.data.item;
                    if (e.primaryKey !== o.primaryKey) {
                        continue
                    }
                    if (e.executable && !e.running) {
                        a.show()
                    } else {
                        a.hide()
                    }
                }
            }
        };
        return t
    }(e);
    se.Player = function (a) {
        utils.__extends(i, e);

        function i(e, t) {
            i.__super__.constructor.apply(this, arguments);
            this._id = this.id;
            this.addOption("name", "ForeignPlayer");
            this.addOption("alliance", {});
            this.addOption("alliancePermission", 0);
            this.addOption("id", "");
            this.addOption("isOnVacation", false);
            this.addOption("nick", "");
            this.addOption("points", 0);
            this.addOption("rank", -1);
            this.addOption("habitate", null);
            this.setOptions(t);
            this.playerID = this.id;
            this.id = this._id
        }
        i.prototype.create = function () {
            var d = "",
                i = true,
                s = false,
                n = null,
                a, e;
            this.habitatListCreated = false;
            this.deleteAllSubviews();
            if (this.alliance && this.alliance.name) {
                a = this.alliance.name;
                n = "dXvOAAue"
            } else {
                a = translate("No Alliance");
                i = false
            } if (t.hasAlliance() && t.alliance.hasInvitedPlayer(this.playerID)) {
                s = true
            }
            this.foreignProfileContainer = this.createSubview(this, {
                styles: ""
            }, w);
            this.createSubview(this.foreignProfileContainer, {
                title: utils.sanitize(this.nick)
            }, I);
            this.createSubview(this.foreignProfileContainer, {
                styles: "leftSide",
                content: translate("Points")
            });
            this.createSubview(this.foreignProfileContainer, {
                styles: "rightSide",
                content: this.points
            });
            this.createSubview(this.foreignProfileContainer, {
                styles: "leftSide",
                content: translate("Rank")
            });
            this.createSubview(this.foreignProfileContainer, {
                styles: "rightSide",
                content: this.rank
            });
            this.createSubview(this.foreignProfileContainer, {
                styles: "leftSide",
                content: translate("Castles")
            });
            this.createSubview(this.foreignProfileContainer, {
                styles: "rightSide",
                content: utils.dict.size(this.habitate)
            });
            e = this.createSubview(this.foreignProfileContainer, {
                styles: "actions"
            });
            if (t.hasAlliance() && this.alliance.name == t.alliance.name && t.hasAlliancePermission(h.DISMISS_PLAYER) && this.playerID != t.id) {
                e.createSubview(e, {
                    hover: translate("Dismiss Player"),
                    content: this.notify("rvHW39mY", this, {
                        imageName: "permissionFalseColored",
                        imageCategory: "browserIcons"
                    }),
                    clickMessage: "POmf1kcK"
                }, l)
            }
            e.createSubview(e, {
                hover: translate("Copy player link"),
                content: this.notify("rvHW39mY", this, {
                    imageName: "pasteBoardPlayerWhite",
                    imageCategory: "icons"
                }),
                clickMessage: "9EZWP&SJ",
                data: {
                    player: this.playerID
                },
                styles: "copy"
            }, l);
            e.createSubview(e, {
                hover: translate("Send Message"),
                content: this.notify("rvHW39mY", this, {
                    imageName: "buttonMessages",
                    imageCategory: "icons"
                }),
                clickMessage: "wgwjcACY"
            }, l);
            var r = this.createSubview(this, {
                content: utils.sanitize(a),
                styles: "alliance",
                icon: "buttonAlliance",
                iconCategory: "icons",
                clickMessage: n
            }, k);
            if (i) {
                r.createSubview(r, {
                    styles: "points",
                    content: this.alliance.points
                })
            }
            if (t.hasAlliance() && (this.alliance.name != t.alliance.name || utils.dict.size(this.alliance) === 0) && t.hasAlliancePermission(h.INVITE_PLAYER)) {
                if (s === false) {
                    this.createSubview(this, {
                        content: translate("Send Invitation"),
                        clickMessage: "LfCRNSS9"
                    }, k)
                } else {
                    this.createSubview(this, {
                        content: translate("Revoke Invitation"),
                        clickMessage: "c)QH3F1g"
                    }, k)
                }
            }
            if (i) {
                var o = !! (t.hasAlliance() && this.alliance.name == t.alliance.name && t.hasAlliancePermission(h.PLAYER_PERMISSIONS) && t.id != this.playerID),
                    u = o ? "UCY2SgkD" : null;
                var c = this.createSubview(this, {
                    content: translate("Permission"),
                    icon: "rights",
                    iconCategory: "icons",
                    styles: "permissionButton",
                    clickMessage: u
                }, k);
                this.addPermissionIcons(c)
            }
            if (this.isOnVacation) {
                this.createSubview(this, {
                    styles: "playerVacation",
                    content: translate("Player is on vacation.")
                }, k)
            }
            this.createHabitatList()
        };
        i.prototype.addPermissionIcons = function (e, t) {
            t = typeof t === "undefined" || t === null ? this.alliancePermission : t;
            if (typeof t === "undefined" || t === null) {
                return
            }
            var s = [{
                mask: h.INVITE_PLAYER,
                text: "Invite Player"
            }, {
                mask: h.MASS_MAIL,
                text: "Mass Mail"
            }, {
                mask: h.MODERATE_FORUM,
                text: "Moderate Forum"
            }, {
                mask: h.DIPLOMATIC_RELATIONS,
                text: "Diplomacy Relatioship"
            }, {
                mask: h.DISMISS_PLAYER,
                text: "Dismiss Player"
            }, {
                mask: h.PLAYER_PERMISSIONS,
                text: "Change Permission"
            }, {
                mask: h.DISBAND_ALLIANCE,
                text: "Disband Alliance"
            }],
                r = t === h.MAX || t === h.ALL;
            e.permissions = e.createSubview(e, {
                styles: "permissionWrapper"
            });
            if (+t === 0) {
                e.permissions.createSubview(e.permissions, {
                    content: this.notify("rvHW39mY", this, {
                        imageName: "permission00",
                        imageCategory: "icons"
                    }),
                    styles: "permission"
                });
                return
            }
            for (var a = 0; a < s.length; a++) {
                var n = s[a],
                    i = n.mask;
                if (t & i || r) {
                    var o = String(i).length === 1 ? "permission" + "0" + i : "permission" + i;
                    e.permissions.createSubview(e.permissions, {
                        content: this.notify("rvHW39mY", this, {
                            imageName: o,
                            imageCategory: "icons"
                        }),
                        styles: "permission",
                        lazyHoverClass: ne.Hover,
                        lazyHoverOptions: {
                            text: n.text
                        }
                    }, N)
                }
            }
        };
        i.prototype.createHabitatList = function () {
            if (!this.habitate || this.habitatListCreated) {
                return
            }
            var t;
            if (this.controller.view && this.controller.view.habitat) {
                t = this.controller.view.habitat.id
            }
            this.habitatList = this.createSubview(this, {
                styles: "habitatList"
            });
            this.createSubview(this.habitatList, {
                styles: "wood-hl title",
                content: translate("Habitat list")
            });
            for (var i in this.habitate) {
                var e = this.habitate[i],
                    a = "habitat",
                    s = true;
                if (t && t == e.id) {
                    s = false
                } else {
                    a += " clickable"
                }
                var n = this.createSubview(this.habitatList, {
                    styles: a,
                    data: {
                        id: i
                    },
                    content: utils.sanitize(e.name),
                    detail: e.points,
                    clickCallback: utils.bind(this.openForeignPlayer, this)
                }, k);
                n.clearfix()
            }
            this.habitatListCreated = true
        };
        i.prototype.openForeignPlayer = function (a) {
            var n = a.data.id,
                e = this.habitate[n],
                i = "createForeignHabitatWindow";
            if (this.playerID == t.id) {
                i = "createHabitatWindow";
                e.player = t
            } else {
                e.player = new s.Player({
                    id: this.playerID,
                    alliance: this.alliance,
                    alliancePermission: this.alliancePermission,
                    isOnVacation: this.isOnVacation,
                    nick: this.nick,
                    points: this.points,
                    rank: this.rank,
                    habitate: this.habitate
                })
            }
            this.controller.controller[i](e)
        };
        return i
    }(e);
    se.RightsView = function (i) {
        utils.__extends(t, i);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("player");
            this.addOption("name", "ForeignPlayerRightsView", true);
            this.styleArray.push("playerRights");
            this.setOptions(e)
        }
        var e = [{
            name: "invitePlayer",
            mask: h.INVITE_PLAYER
        }, {
            name: "massMail",
            mask: h.MASS_MAIL
        }, {
            name: "moderateForum",
            mask: h.MODERATE_FORUM
        }, {
            name: "diplomaticRelations",
            mask: h.DIPLOMATIC_RELATIONS
        }, {
            name: "dismissPlayer",
            mask: h.DISMISS_PLAYER
        }, {
            name: "changeRights",
            mask: h.PLAYER_PERMISSIONS
        }, {
            name: "disbandAlliance",
            mask: h.DISBAND_ALLIANCE
        }];
        var a = {
            invitePlayer: "Invite Player",
            dismissPlayer: "Dismiss Player",
            moderateForum: "Moderate Forum",
            massMail: "Mass Mail",
            diplomaticRelations: "Diplomacy Relatioship",
            changeRights: "Change Permission",
            disbandAlliance: "Disband Alliance"
        };

        function s(t) {
            t = "" + t;
            if (t.length === 1) {
                t = "0" + t
            }
            return "permission" + t
        }
        t.prototype.dataUpdate = function (e, t) {
            this.data = t
        };
        t.prototype.create = function () {
            this.deleteSubviewByField("name", "saveChanges");
            this.deleteSubviewByField("group", "playerPermissions");
            this.list = [];
            this.createSubview(this, {
                styles: "button saveChanges",
                content: translate("Save"),
                clickMessage: "0dF_WnXe"
            });
            var r = this.createContainer({
                styles: "wrapper"
            });
            for (var n = 0; n < e.length; n++) {
                var i = e[n],
                    t, o;
                t = r.createSubview(r, {
                    group: "playerPermissions",
                    name: i.name,
                    styles: "permissionRow",
                    data: {
                        playerID: this.player.playerID,
                        mask: i.mask
                    }
                });
                t.icon = t.createSubview(t, {
                    content: this.notify("rvHW39mY", this, {
                        imageName: s(i.mask),
                        imageCategory: "icons"
                    }),
                    styles: "icon"
                });
                t.text = t.createSubview(t, {
                    styles: "text",
                    content: translate(a[i.name])
                });
                t.checkbox = t.createSubview(t, {
                    styles: "checkbox"
                }, O.Checkbox);
                t.clearfix();
                if (this.player && this.player.alliancePermission && this.player.alliancePermission & i.mask) {
                    t.checkbox.check()
                }
                this.list.push(t)
            }
        };
        return t
    }(e);
    se.Controller = function (e) {
        utils.__extends(t, n.Controller);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (e, t) {
            if (t === null) {
                if (typeof this.view.player != "undefined" && this.view.player !== null) {
                    this.datasource.loadPlayerInfo(this.view.player.playerID, this.view)
                }
                return
            }
            this.view.dataUpdate(e, t);
            this.view.draw()
        };
        t.prototype["dXvOAAue"] = function (e) {
            var t = this.view.findSubviewByName("ForeignPlayer").alliance;
            this.controller.createForeignAllianceWindow(t)
        };
        t.prototype["wgwjcACY"] = function (e) {
            this.actionState = "sendMessage";
            var t = $.extend(true, {}, this.view.player);
            t.id = t.playerID;
            if (typeof t == "undefined") {
                return
            }
            this.view.messageMode = true;
            this.notify("Tf6iX-sR", this, t)
        };
        t.prototype["6ofnhGey"] = function (t) {
            this.notify("6ofnhGey", this)
        };
        t.prototype["LfCRNSS9"] = function (e) {
            var t = this.view.player;
            this.datasource.sendAllianceInvite(t.playerID)
        };
        t.prototype["c)QH3F1g"] = function (e) {
            var t = this.view.player;
            this.datasource.cancelAllianceInvite(t.playerID)
        };
        t.prototype["UCY2SgkD"] = function (e) {
            var t = this.view.player;
            this.showNextViewOfClass(se.RightsView, {
                player: t
            })
        };
        t.prototype["0dF_WnXe"] = function (s) {
            var n = this.view.player,
                i = s.parent.list,
                t = 0;
            for (var e = 0; e < i.length; e++) {
                var a = i[e],
                    r = a.data.mask;
                if (a.checkbox.checked) {
                    t = t | r
                }
            }
            if (t == h.MAX) {
                t = h.ALL
            }
            this.datasource.changePermissionForMember(n.playerID, t);
            this.view.player.alliancePermission = t
        };
        t.prototype["POmf1kcK"] = function (s) {
            var t = this.view.player;
            var e = utils.bind(function () {
                this.datasource.dismissPlayer(t.playerID)
            }, this);
            var i = translate('Do you really want to dismiss "%@" from the alliance?', t.nick);
            var a = translate("Alliance");
            utils.dialog.confirm(this, i, a, e)
        };
        t.prototype["9EZWP&SJ"] = function (t, i) {
            var e = this.notify("s&hAI%la", this, t.data);
            this.notify("J0N%It)p", this, e);
            _.blinkButton($("#" + this.view.id + " .button.copy"))
        };
        t.prototype["xhjW7E37"] = function (e) {
            var t = this.view.findSubviewByField("tag", "currentView");
            t.paste(this.notify("xhjW7E37", this))
        };
        t.prototype["vkycgQL)"] = function (t, e) {
            return this.notify("vkycgQL)", t, e)
        };
        return t
    }(n.Controller);
    se.DataSource = function (a) {
        utils.__extends(e, m);

        function e() {
            e.__super__.constructor.apply(this, arguments)
        }
        e.prototype.sendMessageToPlayer = function (t, e, a) {
            i.request("DiscussionAction/createDiscussion", {
                receivingPlayerArray: t,
                subject: e,
                content: a
            }, this.triggerModelUpdate, this)
        };
        e.prototype.loadPlayerInfo = function (t, e) {
            var a = this;

            function s(t) {
                e.savePlayerInfo(t.Player);
                a.informControllerUnblock()
            }
            i.request("ProfileAction/playerInformation", {
                id: t
            }, s, this)
        };
        e.prototype.sendAllianceInvite = function (t) {
            i.request("AllianceAction/sendInvitation", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.cancelAllianceInvite = function (t) {
            i.request("AllianceAction/cancelInvitation", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.dismissPlayer = function (t) {
            i.request("AllianceAction/dismissPlayer", {
                id: t
            }, this.triggerModelUpdate, this)
        };
        e.prototype.changePermissionForMember = function (t, e) {
            i.request("AllianceAction/setPermission", {
                id: t,
                permission: e
            }, this.updatePlayerPermission, this)
        };
        e.prototype.updatePlayerPermission = function (n, o) {
            var i = n.Player || null;
            var e;
            if (i) {
                if (t.hasAlliance() && t.alliance.playerArray) {
                    var a = new s.Player(i);
                    for (e = 0; e < t.alliance.playerArray.length; e++) {
                        var r = t.alliance.playerArray[e];
                        if (a.id == r.id) {
                            t.alliance.playerArray[e] = a
                        }
                    }
                }
            }
            if (i.id == t.id) {
                t.alliancePermission = i.alliancePermission
            }
            this.setData(t.alliance)
        };
        return e
    }(m);
    se.Window = function (e) {
        utils.__extends(t, n.Window);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.create()
        }
        t.prototype.create = function () {};
        t.prototype.dataUpdate = function (o, i) {
            if (this.messageMode) {
                return
            }
            var t;
            if (i && typeof i.Player != "undefined") {
                t = i.Player
            } else {
                return
            }
            var e = t;
            var n = t.nick;
            e.tag = "currentView";
            e.styles = "contentCurrentView";
            e.habitate = {};
            for (var a in t.habitatDictionary) {
                var r = t.habitatDictionary[a];
                e.habitate[a] = new s.Habitat(r)
            }
            this.content.subviews = [];
            this.player = this.content.createSubview(this.content, e, se.Player);
            this.headline.title.content = utils.sanitize(n);
            this.draw()
        };
        t.prototype.savePlayerInfo = function (t) {
            this.dataUpdate(null, {
                Player: t
            })
        };
        return t
    }(n.Window);
    ge.Controller = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (e, t) {
            if (t === null) {
                return
            }
            if (typeof t.error !== "undefined" && t.error !== null) {
                this["aBdTswLK"](this);
                return
            }
            this.view.dataUpdate(e, t);
            this.view.draw()
        };
        t.prototype["SiPbxnVc"] = function (e) {
            var t = this.reportIconName(e);
            return {
                icon: t.icon,
                headline: t.headline,
                description: t.description
            }
        };
        t.prototype.reportIconName = function () {
            return p.Controller.prototype.reportIconName.apply(this, arguments)
        };
        t.prototype["Q(7d5rkH"] = function (t) {
            this.notify("handleHabitatAction", t.data, "centerCastle")
        };
        t.prototype["MS1VHGhp"] = function (t) {
            this.notify("createHabitatWindow", t.data)
        };
        return t
    }(n.Controller);
    ge.DataSource = function (e) {
        utils.__extends(t, m);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.reportNotPublished = function () {
            this.setData({
                error: "No such report published"
            })
        };
        t.prototype.loadReport = function (t, e) {
            i.request("ReportAction/reportInformation", {
                id: t,
                habitatID: e
            }, this.setData, this, null, this.reportNotPublished.bind(this))
        };
        return t
    }(m);
    ge.Window = function (e) {
        utils.__extends(t, e);

        function t() {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.create = function () {};
        t.prototype.dataUpdate = function (a, e) {
            if (typeof e.report === "undefined" || typeof e.report.variables === "undefined") {
                return
            }
            var t = new s.Report(e.report);
            t.foreignReport = true;
            t.threadID = t.id;
            t.headline = this._getHeadline(t);
            this.deleteSubviewByField("group", "foreignReport");
            var i = p.Controller.prototype._prepareData.apply(this.controller, [t]);
            this.report = this.content.createSubview(this.content, {
                group: "foreignReport"
            }, p.View);
            this.report.dataUpdate(null, i)
        };
        t.prototype._getHeadline = function (t) {
            var e;
            if (t.type === 1 || t.type === 9) {
                e = "Defense Report"
            } else if (t.type === 11 || t.type === 10) {
                e = "Battle Report"
            } else if (t.type === 6 || t.type === 14 || t.type === 15) {
                e = "Transit Report"
            } else if (t.type === 3) {
                e = "Knowledge researched report"
            } else if (t.type === 2) {
                e = "Mission Report"
            } else if (t.type === 7 || t.type === 13) {
                e = "Spy Report"
            } else if (t.type === 8) {
                if (t.battleType === 0 || t.battleType === 1) {
                    e = "Defense Report"
                } else {
                    e = "Battle Report"
                }
            }
            return e
        };
        return t
    }(n.Window);
    pe.CastleHover = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("circleInfoArray", []);
            this.addRequired("position", {});
            this.addOption("offset", {
                x: 0,
                y: 0
            });
            this.addOption("zoom", 1);
            this.addOption("playerName", "");
            this.addOption("allianceName", "");
            this.addOption("allianceIcon", "");
            this.addOption("castleType", "");
            this.addOption("circleMessage", "Yoqka19h");
            this.addOption("circleSpeed", "fast");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.width = Math.floor(61 / 2);
            this.height = Math.floor(61 / 2);
            var a = [];
            var t, i = 0,
                s = Math.floor(360 / this.circleInfoArray.length);
            for (var e = 0; e < this.circleInfoArray.length; e++) {
                t = this.circleInfoArray[e];
                a.push(this.createSubview(this, {
                    icon: t.icon,
                    clickMessage: this.circleMessage,
                    data: t.data,
                    styles: "circle",
                    castleType: this.castleType,
                    activeTypes: t.activeTypes,
                    angle: i,
                    distance: 80,
                    hover: t.hover,
                    circleSpeed: this.circleSpeed
                }, pe.Circle));
                i += s
            }
        };
        t.prototype.setPosition = function (t) {
            this.position.x = t.x;
            this.position.y = t.y;
            var e = this.node();
            e.css("left", this._getLeft());
            e.css("top", this._getTop())
        };
        t.prototype.compileHTML = function () {
            var t = $("<" + this.element + ">").attr("id", this.id);
            t.css("position", "absolute");
            t.css("left", this._getLeft());
            t.css("top", this._getTop());
            t.addClass(this.styles);
            if (this.hidden) {
                t.addClass("hidden")
            }
            t.html(this.content);
            return t
        };
        t.prototype.getDistance = function (t) {
            return {
                x: this.position.x - t.x,
                y: this.position.y - t.y
            }
        };
        t.prototype._getLeft = function (t) {
            return this.position.x + this.offset.x - this.width
        };
        t.prototype._getTop = function (t) {
            return this.position.y + this.offset.y - this.height
        };
        return t
    }(e);
    pe.CircleDetailHover = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("hover");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.createSubview(this, {
                content: this.hover
            })
        };
        return t
    }(R);
    pe.Circle = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("icon");
            this.addRequired("distance");
            this.addOption("angle", 0);
            this.addOption("castleType", "");
            this.addOption("activeTypes", []);
            this.addOption("hover", "");
            this.addOption("circleSpeed", "fast");
            this.setOptions(e);
            if (this.activeTypes.indexOf(this.castleType) !== -1) {
                this.styleArray.push("active")
            } else {
                this.clickMessage = null
            }
        }
        t.prototype.create = function () {
            this.createSubview(this, {
                styles: "frame",
                clickMessage: this.clickMessage,
                data: this.data
            });
            this.hoverElement = this.createSubview(this, {
                content: this.icon,
                styles: "icon",
                clickMessage: this.clickMessage,
                data: this.data,
                lazyHoverClass: pe.CircleDetailHover,
                lazyHoverOptions: {
                    styles: "buildingHover clean",
                    hover: this.hover
                }
            }, N)
        };
        t.prototype.jQueryEvents = function () {
            t.__super__.jQueryEvents.apply(this, arguments);
            var e = Math.PI / 180;
            $("#" + this.id).animate({
                left: "+=" + Math.floor(Math.sin(this.angle * e) * this.distance),
                top: "+=" + Math.floor(Math.cos(this.angle * e) * this.distance)
            }, {
                duration: this.circleSpeed,
                easing: "swing"
            })
        };
        return t
    }(e);
    pe.Info = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("icon");
            this.addOption("angle", 0);
            this.addRequired("distance");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.createSubview(this, {
                content: this.notify("rvHW39mY", this, {
                    imageName: "hoverInfo",
                    imageCategory: "hoverRing"
                }),
                clickMessage: this.clickMessage
            });
            this.createSubview(this, {
                content: this.icon,
                styles: "icon",
                clickMessage: this.clickMessage
            })
        };
        t.prototype.jQueryEvents = function () {
            t.__super__.jQueryEvents.apply(this, arguments);
            var e = Math.PI / 180;
            $("#" + this.id).animate({
                left: "+=" + Math.floor(Math.sin(this.angle / e) * this.distance),
                top: "+=" + Math.floor(Math.cos(this.angle / e) * this.distance)
            }, {
                duration: "fast",
                easing: "swing"
            })
        };
        return t
    }(e);
    pe.CastleHoverController = function (e) {
        utils.__extends(t, Ce);

        function t(i, e) {
            this.addRequired("habitat");
            this.setOptions(e);
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (t, e) {};
        t.prototype["AAeX&RO7"] = function (t, i) {
            var e = this.habitat.id;
            this.notify("AAeX&RO7", this, {
                action: t.data.action,
                habitatID: e,
                data: t.data,
                source: "hoverCircle"
            })
        };
        t.prototype["Yoqka19h"] = function (t, i) {
            var e = this.habitat;
            this.notify("Yoqka19h", this, {
                action: t.data.action,
                habitat: e,
                data: t.data,
                source: "hoverCircle"
            })
        };
        return t
    }(Ce);
    B.Controller = function (e) {
        "use strict";
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.selectStatus = ""
        }
        t.prototype.dataUpdate = function (e, t) {
            if (t === null || this.view.hidden) {
                return
            }
            this.view.dataUpdate(e, t);
            this.view.market.select(this.datasource.getAllSelected());
            this.updateExecuteButton()
        };
        t.prototype["1%3SaQXc"] = function () {
            return {
                tradeUnit: this.datasource.tradeUnitID,
                tradeResource: this.datasource.tradeResourceID
            }
        };
        t.prototype["Hd6dg22y"] = function (t, i) {
            var e = t.data.primaryKey;
            this.view.cleanMenus();
            this.datasource.unitSelected(e);
            this.view.market.select(this.datasource.getAllSelected());
            this.updateExecuteButton()
        };
        t.prototype["RLncdFj_"] = function (t, i) {
            var e = t.resourceID;
            this.view.cleanMenus();
            this.datasource.resourceSelected(e);
            this.view.market.select(this.datasource.getAllSelected());
            this.updateExecuteButton()
        };
        t.prototype["hNkZWZ8d"] = function (i, e) {
            var t = e.habitat.id;
            this.datasource.deselectHabitat(t);
            this.view.market.selectHabitat(t, null);
            this.updateExecuteButton()
        };
        t.prototype["0_gROTS1"] = function (i, e) {
            var t = e.habitat.id;
            this.datasource.selectHabitat(t);
            this.view.market.selectHabitat(t, this["7cuJR01%"](this, t));
            this.updateExecuteButton()
        };
        t.prototype.updateExecuteButton = function () {
            this.view.updateExecuteButton(this.datasource.getTotalAmount())
        };
        t.prototype["_LwLFXob"] = function (t) {
            this.datasource.tradeResourcesGlobally()
        };
        t.prototype[")du3f8A7"] = function () {
            this.view.buttons.unitMenu.toggleOnce();
            this.updateExecuteButton()
        };
        t.prototype["C9UJeqQW"] = function () {
            this.view.buttons.resourceMenu.toggleOnce();
            this.updateExecuteButton()
        };
        t.prototype["7cuJR01%"] = function (e, t) {
            return this.datasource.getTradeInformation(t)
        };
        t.prototype["VLL2MIG3"] = function () {
            if (this.selectStatus === "all") {
                this.selectStatus = "none";
                this.datasource.deselectAllHabitats()
            } else {
                this.selectStatus = "all";
                this.datasource.selectAllHabitatsInAnIntelligentManner()
            }
            this.updateExecuteButton();
            var t = this.datasource.getAllSelected();
            this.view.market.select(t)
        };
        return t
    }(n.Controller);
    B.DataSource = function (r) {
        "use strict";
        utils.__extends(e, m);

        function e() {
            e.__super__.constructor.apply(this, arguments);
            this.tradeResourceID = +a.SILVER;
            this.tradeUnitID = +J.PUSHCART;
            n()
        }

        function n() {
            for (var e in je) {
                var i = je[e];
                _.storeLocal.removeItem("gm_" + t.id + "_" + i)
            }
        }

        function s(g, h, l) {
            var s = t.habitate[g],
                p = y[h],
                f = s.stats.units.own[h],
                m = f * p.storeAmount,
                n = 0,
                u = 0,
                d = s.getMarketRateForResource(l),
                c = s.habitatResources[l],
                b = Math.floor(c.storeAmount - c.amount),
                v = false,
                a = {
                    unitsNeeded: 0,
                    resources: {},
                    resourceGain: 0
                }, o, i, e;
            if (f === 0) {
                return a
            }
            for (var r in d.rates) {
                e = d.rates[r];
                o = Math.floor(s.habitatResources[r].amount / e) * e;
                if (o < m - n) {
                    i = o
                } else {
                    i = Math.floor((m - n) / e) * e
                }
                u += i / e;
                n += i;
                a.resources[r] = i
            }
            a.unitsNeeded = Math.ceil(n / p.storeAmount);
            a.resourceGain = u;
            return a
        }
        e.prototype.loadDefaultMarket = function () {
            this._prepareTemplateData()
        };
        e.prototype._prepareTemplateData = function () {
            var l = t.getSortedHabitate(),
                u = [],
                h = {}, r = [a.WOOD, a.STONE, a.ORE],
                f = F.DataSource.prototype.prepareResources,
                p = F.DataSource.prototype.prepareUnits,
                n = {};
            if (this.tradeResourceID === +a.SILVER) {
                r.push(a.SILVER)
            }
            if (this.tradeResourceID === +a.COPPER) {
                r.push(a.COPPER)
            }
            for (var o = 0, d = l.length; o < d; o++) {
                var i = l[o],
                    e;
                n[this.tradeUnitID] = i.stats.units.own[this.tradeUnitID];
                e = {
                    htmlID: "id" + utils.uniqueID(),
                    id: i.id,
                    habitatResources: f.call(this, i.stats.resources, false, r, i.id),
                    habitatUnits: p.call(this, n),
                    name: i.name,
                    title: utils.dynamicTitle(utils.sanitize(i.name)),
                    icon: this.getImageSrc("buttonCastle", "icons"),
                    tradeIcon: this.getImageSrc("trade", "icons"),
                    tradeResourceIcon: this.getImageSrc(this.tradeResourceID, "resources"),
                    tradeUnitIcon: this.getImageSrc(this.tradeUnitID, "units"),
                    selectable: n[this.tradeUnitID] > 0 ? true : false,
                    checked: false,
                    unitsNeeded: 0,
                    resourceGain: 0
                };
                if (e.checked) {
                    var c = s(i.id, this.tradeUnitID, this.tradeResourceID);
                    e.unitsNeeded = c.unitsNeeded;
                    e.resourceGain = c.resourceGain
                }
                u.push(e);
                h[e.htmlID] = e.id
            }
            this.setData({
                habitate: u,
                eventIDCache: h
            })
        };
        e.prototype.getTradeInformation = function (t) {
            return s(t, this.tradeUnitID, this.tradeResourceID)
        };
        e.prototype.unitSelected = function (t) {
            this.tradeUnitID = +t;
            this._prepareTemplateData()
        };
        e.prototype.resourceSelected = function (t) {
            this.tradeResourceID = +t;
            this._prepareTemplateData()
        };
        e.prototype._storageKey = function () {
            return _.storeLocal.createKey("gm", this.tradeResourceID, this.tradeUnitID)
        };
        e.prototype._findDeadHabitatsInCacheAndRemove = function () {
            var e = _.storeLocal.getJSON(this._storageKey()),
                a = [];
            if (!e) {
                return []
            }
            for (var i = 0, n = e.length; i < n; i++) {
                var s = e[i];
                if (!t.habitate[s]) {
                    continue
                }
                a.push(s)
            }
            return a
        };
        e.prototype.selectHabitat = function (t) {
            var e = this._findDeadHabitatsInCacheAndRemove();
            if (!t) {
                return false
            }
            if ( !! ~e.indexOf(t)) {
                return true
            }
            e.push(t);
            return _.storeLocal.setJSON(this._storageKey(), e)
        };
        e.prototype.deselectHabitat = function (e) {
            var t = this._findDeadHabitatsInCacheAndRemove();
            if (!e) {
                return
            }
            if ( !! ~t.indexOf(e) === false) {
                return true
            }
            t.splice(t.indexOf(e), 1);
            return _.storeLocal.setJSON(this._storageKey(), t)
        };
        e.prototype.deselectAllHabitats = function () {
            _.storeLocal.removeItem(this._storageKey())
        };
        e.prototype.selectAllHabitats = function () {
            var e = [];
            for (var i in t.habitate) {
                e.push(+i)
            }
            if (e.length === 0) {
                return true
            }
            return _.storeLocal.setJSON(this._storageKey(), e)
        };
        e.prototype.selectAllHabitatsInAnIntelligentManner = function () {
            var e = [];
            for (var i in t.habitate) {
                var a = t.habitate[i],
                    n = a.habitatResources,
                    s = n[this.tradeResourceID],
                    r = a.stats.units.own[this.tradeUnitID] > 0,
                    o = s.amount < s.storeAmount;
                if (r && o) {
                    e.push(+i)
                }
            }
            if (e.length === 0) {
                return true
            }
            return _.storeLocal.setJSON(this._storageKey(), e)
        };
        e.prototype.getAllSelected = function () {
            return this._findDeadHabitatsInCacheAndRemove()
        };
        e.prototype.getTotalAmount = function () {
            var e = this._findDeadHabitatsInCacheAndRemove(),
                i = 0;
            for (var t = 0, a = e.length; t < a; t++) {
                var n = e[t],
                    r = s(n, this.tradeUnitID, this.tradeResourceID);
                i += r.resourceGain
            }
            return i
        };
        e.prototype.tradeResourcesGlobally = function () {
            var t = this._findDeadHabitatsInCacheAndRemove(),
                e = "(" + t.join(",") + ")",
                a = {
                    wantedResourceID: this.tradeResourceID,
                    unitID: this.tradeUnitID,
                    habitatIDArray: e
                }, s = this.getTotalAmount();
            if (s === 0) {
                return
            }
            i.request("MarketAction/tradeResourceInHabitatArrayUsingTransport", a, this.triggerModelUpdate, this)
        };
        return e
    }(m);
    B.View = function (e) {
        "use strict";
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("tradeUnit");
            this.addRequired("tradeResource");
            this.addRequired("transportInfos");
            this.addRequired("habitat");
            this.setOptions(e)
        }

        function i(e) {
            var t = $(e);
            if (t.is("input[type=checkbox]")) {
                this.habitatSelected(t);
                return true
            }
            return false
        }
        t.prototype.clickHandler = function (t) {
            this.bubble(t, i.bind(this), "globalMarket")
        };
        t.prototype.getEvents = function () {
            var e = t.__super__.getEvents.apply(this, arguments);
            e.push({
                selector: ".contentMarketList",
                event: "click",
                callback: this.clickHandler,
                target: this
            });
            return e
        };
        t.prototype.habitatSelected = function (t) {
            var e = t.prop("checked") ? "0_gROTS1" : "hNkZWZ8d";
            this.notify(e, this, {
                habitat: {
                    id: t.parents(".habitat").data("habitat")
                }
            })
        };
        t.prototype.selectHabitat = function (a, t) {
            var e = $("#globalMarket .habitat[data-habitat=" + a + "]"),
                i = true;
            if (!t) {
                t = {
                    unitsNeeded: 0,
                    resourceGain: 0
                };
                i = false
            }
            e.find("input[type=checkbox]").prop("checked", i);
            e.find(".tradeUnit .amount").html(t.unitsNeeded);
            e.find(".tradeResource .amount").html(t.resourceGain)
        };
        t.prototype.select = function (t) {
            $("#globalMarket input").prop("checked", false);
            $("#globalMarket .amount").html("0");
            if (!t) {
                return
            }
            for (var e = 0, a = t.length; e < a; e++) {
                var i = t[e],
                    s = this.notify("7cuJR01%", this, i);
                this.selectHabitat(i, s)
            }
        };
        return t
    }(TemplateView);
    B.Buttons = function (i) {
        "use strict";
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("tradeUnit");
            this.addRequired("tradeResource");
            this.addRequired("windowID");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.resourceButton = this.createSubview(this, {
                icon: this.tradeResource,
                iconCategory: "resources",
                content: translate(he[this.tradeResource]),
                clickMessage: "C9UJeqQW",
                styles: "resourceSelector"
            }, k);
            this.resourceMenu = this.createSubview(this.controller.view, {
                dropdownSelector: "#" + this.windowID + " .dropdown.resource",
                chooserButtonSelector: "#" + this.windowID + " .topButtons .listButton.resourceSelector",
                itemSelector: "resourceElement",
                hidden: true,
                selectedItemID: this.tradeResource
            }, B.ResourceMenu);
            this.unitButton = this.createSubview(this, {
                icon: this.tradeUnit.toString(),
                iconCategory: "units",
                content: translate(y[this.tradeUnit].identifier),
                clickMessage: ")du3f8A7",
                styles: "unitSelector"
            }, k);
            this.clearfix();
            this.unitMenu = this.createSubview(this.controller.view, {
                dropdownSelector: "#" + this.windowID + " .dropdown.unit",
                chooserButtonSelector: "#" + this.windowID + " .topButtons .listButton.unitSelector",
                itemSelector: "unitElement",
                hidden: true,
                selectedItemID: this.tradeUnit
            }, B.UnitMenu)
        };
        return t
    }(e);
    B.Window = function (e) {
        "use strict";
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (i, e) {
            t.__super__.dataUpdate.apply(this, arguments);
            this.mainContentContainer.parent.deleteSubviewByField("tag", "templateContainer");
            this.deleteAllSubviews();
            if (this.topButtons) {
                this.topButtons.removeFromDOM();
                this.deleteSubviewChain(this.topButtons)
            }
            if (this.bottomButtons) {
                this.bottomButtons.removeFromDOM();
                this.deleteSubviewChain(this.bottomButtons)
            }
            this.createMarketTable(e);
            this._topBar();
            this._bottomBar()
        };
        t.prototype.createMarketTable = function (t) {
            this.market = this.createSubview(this.content, {
                templateData: t,
                template: "globalMarket",
                attachTo: this.content
            }, B.View);
            this.market.draw()
        };
        t.prototype._topBar = function () {
            var t = this.notify("1%3SaQXc");
            this.topButtons = this.createSubview(this.mainContentContainer.parent, {
                styles: "topButtons"
            });
            this.buttons = this.createSubview(this.topButtons, {
                tradeUnit: t.tradeUnit,
                tradeResource: t.tradeResource,
                windowID: this.id,
                name: "buttons"
            }, B.Buttons);
            this.topButtons.clearfix();
            this.topButtons.createSubview(this.topButtons, {
                styles: "divider"
            });
            this.topButtons.draw()
        };
        t.prototype._bottomBar = function () {
            var t = this.notify("1%3SaQXc");
            this.bottomButtons = this.createSubview(this.mainContentContainer.parent, {
                styles: "bottomButtons"
            });
            this.globalExchangeButton = this.createSubview(this.bottomButtons, {
                styles: "globalExchangeButton disabled",
                content: "0 " + translate("Barter %@", translate(he[t.tradeResource])),
                clickMessage: "_LwLFXob"
            }, l);
            this.createSubview(this.bottomButtons, {
                styles: "selectAllButton",
                content: this.getIcon("buttonCastleMultiple"),
                clickMessage: "VLL2MIG3",
                hover: translate("Select all habitats")
            }, l);
            this.bottomButtons.draw()
        };
        t.prototype.cleanMenus = function () {
            var t = this.notify("1%3SaQXc");
            this.buttons.unitMenu.hide();
            this.buttons.resourceMenu.hide();
            this.buttons.unitMenu.selectItem(t.tradeUnit);
            this.buttons.resourceMenu.selectItem(t.tradeResource)
        };
        t.prototype.updateExecuteButton = function (e) {
            var i = this.notify("1%3SaQXc"),
                a = "" + e + " " + translate("Barter %@", translate(he[i.tradeResource])),
                t = $("#" + this.globalExchangeButton.id);
            t.html(a);
            if (e === 0) {
                t.addClass("disabled")
            } else {
                t.removeClass("disabled")
            }
        };
        return t
    }(n.Window);
    B.ResourceMenu = function (e) {
        "use strict";
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.styleArray.push("resource dropdown");
            this.addOption("selectMessage", "RLncdFj_");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.deleteSubviewByField("name", "resourceDropdown");
            this.createSubview(this, {
                name: "resourceDropdown",
                resources: ee,
                filterArray: [a.WOOD, a.STONE, a.ORE, a.COPPER, a.SILVER],
                showNames: true,
                reverseOrder: true,
                rowClickMessage: this.selectMessage
            }, P.Table)
        };
        return t
    }(n.PopUp);
    B.UnitMenu = function (e) {
        "use strict";
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.styleArray.push("unit dropdown");
            this.addOption("itemSelector", "unitElement");
            this.addOption("dropdownSelector", "unit");
            this.addOption("selectMessage", "Hd6dg22y");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            this.deleteSubviewByField("name", "unitDropdown");
            this.createSubview(this, {
                name: "unitDropdown",
                units: y,
                showNames: true,
                reverseOrder: false,
                clickMessage: this.selectMessage
            }, b.Table)
        };
        return t
    }(n.PopUp);
    g.FullscreenFrameController = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            this.addOption("showConfirm", true);
            t.__super__.constructor.apply(this, arguments);
            this.dialogShown = false
        }
        t.prototype["aBdTswLK"] = function () {
            if (!this.showConfirm) {
                t.__super__["aBdTswLK"].apply(this, arguments);
                return
            }
            var i = function () {
                this.dialogShown = false;
                this.notify("bOsn(oQ9");
                window.setTimeout(function () {
                    this.notify("bOsn(oQ9")
                }.bind(this), 5e3);
                t.__super__["aBdTswLK"].apply(this, arguments)
            }.bind(this);
            var a = function () {
                this.dialogShown = false;
                return
            }.bind(this);
            var e = translate("global.confirm");
            if (!this.dialogShown) {
                utils.dialog.confirm(this, e, e, i, a)
            }
            this.dialogShown = true
        };
        return t
    }(n.Controller);
    g.Controller = function (a) {
        utils.__extends(t, n.Controller);
        var e = "EARNGOLD";
        var i = "promotioncode";
        var s = "sponsorpay";

        function t(a, i) {
            t.__super__.constructor.apply(this, arguments);
            var e = oe.toUpperCase();
            if (e === "EN") {
                e = "GB"
            }
            this.addOption("country", e);
            this.addOption("product", "");
            this.addOption("provider", "");
            this.addOption("gameCode", null);
            this.setOptions(i)
        }
        t.prototype.dataUpdate = function (e, t) {
            if (t.countries && !t.products && !t.providers) {
                this.datasource.select(this.country, "");
                return
            }
            if (t.countries && t.products && !t.providers) {
                if (this.product === "" && t.products.length > 0) {
                    this.product = t.products[0].identifier
                }
                if (this.product !== "") {
                    this.datasource.select(this.country, this.product)
                }
                return
            }
            if (t.countries && t.products && t.providers) {
                if (this.product === "" && t.products.length > 0) {
                    this.product = t.products[0].identifier
                }
                if (this.provider === "" && t.providers.length > 0) {
                    this.provider = t.providers[0].identifier
                }
                this.view.shopView.setCountry(this.datasource.getCountryByIso(this.country));
                this.view.shopView.setProduct(this.product);
                this.view.shopView.setProvider(this.provider);
                this.view.dataUpdate(e, t)
            }
        };
        t.prototype["bLXauBfZ"] = function (t, i) {
            this.country = t.isoCode;
            this.product = "";
            this.provider = "";
            var e = this.datasource.select(this.country, "");
            if (e === "toggle") {
                this.view.shopView.countryMenu.toggle()
            }
        };
        t.prototype["b2WE&eP)"] = function (t, e) {
            this.product = t.identifier;
            this.provider = "";
            this.datasource.select(this.country, this.product);
            this.view.shopView.setProduct(this.product)
        };
        t.prototype["uRF)QJYc"] = function (t, e) {
            this.provider = t.identifier;
            this.view.shopView.setProvider(this.provider)
        };
        t.prototype["f5gE1I3R"] = function (s, n) {
            if (this.product === e && this.provider === i) {
                var a = this.view.findSubviewByName("PromotionCode");
                var t = a.getValue();
                if (t !== "") {
                    this.datasource.redeemPromotionCode(t)
                }
                return
            }
            this.datasource.payProduct(this.provider, this.gameCode);
            this.view.hide()
        };
        t.prototype["z1TBMcRD"] = function (i) {
            if (this.view.shopView.countryMenu) {
                this.view.shopView.countryMenu.toggle()
            }
            var t = $(".dropdown.countryDropdown .selected").position();
            if (!t) return;
            var e = $(".countryTable");
            e.scrollTop(t.top - e.height() + 20)
        };
        t.prototype["Llz6u&%N"] = function () {
            var t = this.notify("rvHW39mY", this, {
                imageCategory: "resources",
                imageName: "7"
            });
            if (!this.gameCode) return t;
            return this.notify("rvHW39mY", this, {
                imageCategory: "shop",
                imageName: "GoldIcon_" + this.gameCode
            })
        };
        t.prototype[")NO1)LJ&"] = function () {
            return this.notify(")NO1)LJ&", this, null)
        };
        t.prototype["Xj(pItha"] = function (t, e) {
            return this.notify("Xj(pItha", t, e)
        };
        return t
    }(n.Controller);
    g.SuccessController = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype["aBdTswLK"] = function () {
            var e = this.controller.findControllerByName("gold");
            e.view.show();
            t.__super__["aBdTswLK"].apply(this, arguments);
            this.notify("IvTCew1X", this)
        };
        t.prototype.dataUpdate = function (t, e) {};
        return t
    }(n.Controller);
    g.TransactionController = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.dataUpdate = function (t, e) {};
        t.prototype["T2qxF2su"] = function () {
            this.view.hide();
            this.notify("4&1DVE-y", this, {
                success: false,
                showIcon: true
            });
            this.datasource.closePaymentWindow();
            this.notify("IvTCew1X", this)
        };
        t.prototype.paymentSuccessfull = function () {
            this.view.hide();
            this.notify("4&1DVE-y", this, {
                success: false,
                showIcon: true
            });
            this.datasource.closePaymentWindow();
            this.notify("IvTCew1X", this)
        };
        return t
    }(n.Controller);
    g.DataSource = function (s) {
        utils.__extends(t, m);
        var e = "EARNGOLD";
        var a = "promotioncode";
        var n = "sponsorpay";

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.__data = {
                countries: null,
                providers: null,
                products: null
            };
            this.__pending = {
                countries: false,
                products: false,
                providers: false
            };
            this._setState("", "", "")
        }

        function r(t) {
            var e = t;
            if (t.indexOf("skrill") !== -1) {
                e = "skrill"
            }
            if (t.indexOf("allopass") !== -1) {
                e = "allopass"
            }
            return e
        }
        t.prototype.addEarnProduct = function () {
            if (!this.__data.products || !this.__state.country) return;
            var t = {
                goldAmount: 0,
                identifier: e,
                name: translate("shop.earn"),
                price: null
            };
            t["country.isoCode"] = this.__state.country;
            this.__data.products.push(t)
        };
        t.prototype.addPromotionCode = function () {
            var t = {
                identifier: a,
                name: translate("Promotion-Code"),
                scoreCardCreditValue: 0
            };
            this.__data.providers.push(t)
        };
        t.prototype.addSponsorPay = function () {};
        t.prototype.fakeProviderList = function () {
            if (this.__state.product !== e) return;
            this.addPromotionCode();
            this.addSponsorPay()
        };
        t.prototype.getCountryByIso = function (e) {
            if (!this.__data.countries) return null;
            for (var t = 0; t < this.__data.countries.length; t++) {
                if (this.__data.countries[t].isoCode === e) return this.__data.countries[t]
            }
            return null
        };
        t.prototype._setState = function (t, e, i) {
            this.__state = {
                country: t,
                product: e,
                provider: i
            }
        };
        t.prototype.checkState = function () {
            if (this.__pending.countries || this.__pending.products || this.__pending.providers) {
                return
            }
            this.modelUpdate()
        };
        t.prototype.setCountries = function (t) {
            this.__data.countries = t.countryArray;
            this.__pending.countries = false;
            this.checkState()
        };
        t.prototype.setProducts = function (t) {
            this.__data.products = t.storeProductArray;
            this.__pending.products = false;
            this.addEarnProduct();
            this.checkState()
        };
        t.prototype.setProviders = function (t) {
            this.__data.providers = t.paymentProviderArray;
            this.__pending.providers = false;
            this.fakeProviderList();
            this.checkState()
        };
        t.prototype.setPaymentSession = function (t) {
            if (!this.paymentWindow) return;
            this.paymentWindow.location = t.paymentSession.redirectUrl;
            this.checkState();
            this.notify("tE-AKC74", this, {
                session: t,
                paymentWindow: this.paymentWindow
            })
        };
        t.prototype.select = function (e, t) {
            var a = false,
                i = false;
            t = t || "";
            if (e !== this.__state.country) {
                this.__data.providers = null;
                this.__data.products = null;
                this.__pending.products = true;
                this.__pending.providers = false;
                this.__pending.countries = false;
                this._setState(e, "", "");
                a = true;
                i = false;
                if (t !== "") {
                    this.__pending.providers = true;
                    this._setState(e, t, "");
                    i = true
                }
                if (a) {
                    this.loadProducts()
                }
                if (i) {
                    this.loadProviders()
                }
                return
            }
            if (e === this.__state.country && t !== this.__state.product) {
                this.__data.providers = null;
                this.__pending.products = false;
                this.__pending.providers = true;
                this.__pending.countries = false;
                this._setState(e, t, "");
                this.loadProviders();
                return "toggle"
            }
            if (e === this.__state.country && t === this.__state.product) {
                return "toggle"
            }
        };
        t.prototype.loadCountries = function () {
            if (this.__data.countries) return;
            this.__pending.countries = true;
            i.request("PaymentAction/paymentCountryArray", {}, this.setCountries, this)
        };
        t.prototype.loadProducts = function () {
            if (this.__state.country === "") return;
            var t = {};
            this.__pending.products = true;
            t["country.isoCode"] = this.__state.country;
            i.request("PaymentAction/productArrayForCountry", t, this.setProducts, this)
        };
        t.prototype.loadProviders = function () {
            if (this.__state.country === "" || this.__state.product === "") return;
            var t = {};
            this.__pending.providers = true;
            t["storeProduct.identifier"] = this.__state.product;
            t["country.isoCode"] = this.__state.country;
            i.request("PaymentAction/paymentProviderArrayForProduct", t, this.setProviders, this)
        };
        t.prototype.payProduct = function (s, r) {
            var e = "1";
            var a = this.notify(")NO1)LJ&", this, null);
            if (a) {
                e = a
            }
            var t = {};
            t["storeProduct.identifier"] = this.__state.product;
            t["country.isoCode"] = this.__state.country;
            t["paymentProvider.identifier"] = s;
            t["additionalArgumentsDictionary"] = "{payment_base_url=" + e + ";}";
            i.request("PaymentAction/payProduct", t, this.setPaymentSession, this);
            var n = "menubar=yes,location=yes,resizable=yes,scrollbars=yes,status=yes";
            this.paymentWindow = window.open("", "SHOP", n)
        };
        t.prototype.redeemPromotionCode = function (t) {
            i.request("StoreAction/redeemPromotionCode", {
                code: t
            }, this.triggerModelUpdate, this)
        };
        return t
    }(m);
    g.TransactionDatasource = function (e) {
        var a = 3e3;
        utils.__extends(t, e);

        function t(e) {
            t.__super__.constructor.apply(this, arguments);
            this.paymentSession = null;
            this.paymentWindow = null;
            this.recheckTimer = null
        }
        t.prototype.checkPaymentSuccess = function (t) {
            if (!t["payment.successfull"]) {
                if (this.recheckTimer) {
                    window.clearTimeout(this.recheckTimer)
                }
                window.setTimeout(this.pollTransactionState.bind(this), a)
            } else {
                this.controller.paymentSuccessfull()
            }
        };
        t.prototype.pollTransactionState = function (t) {
            this.recheckTimer = null;
            if (this.subscribers.length === 0) return;
            if (t && t.session && t.session.paymentSession) {
                this.paymentSession = t.session.paymentSession
            }
            if (t && t.paymentWindow) {
                this.paymentWindow = t.paymentWindow
            }
            if (this.paymentWindow && (!this.paymentWindow.window || !this.paymentWindow.location || this.paymentWindow.closed) && this.subscribers && this.subscribers[0]) {
                this.subscribers[0]["T2qxF2su"]();
                return
            }
            var a = t && t.session ? t.session.paymentSession : this.paymentSession;
            var e = {};
            e["paymentProvider.identifier"] = a.paymentProviderIdentifier;
            e.creationDate = a.creationDate;
            i.request("PaymentAction/paymentState", e, this.checkPaymentSuccess, this)
        };
        t.prototype.closePaymentWindow = function () {
            if (this.paymentWindow) {
                this.paymentWindow.close()
            }
            if (this.recheckTimer) {
                window.clearTimeout(this.recheckTimer)
            }
        };
        return t
    }(m);
    g.Countries = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.styleArray.push("countryDropdown dropdown");
            this.addOption("country", "");
            this.addOption("dropdownSelector", "countryDropdown");
            this.addOption("itemSelector", "country");
            this.setOptions(e)
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            this.shopCountryList = this.createSubview(this, {
                styles: "countryTable",
                rowClass: g.Country
            }, G)
        };
        t.prototype.dataUpdate = function (i, t) {
            t.sort(function (t, e) {
                if (t.name < e.name) {
                    return -1
                } else {
                    return +1
                }
            });
            var e = $.grep(t, function (t) {
                return t.isoCode === this.country
            });
            if (e.length !== 0) {
                t = $.grep(t, function (t) {
                    return t.isoCode != this.country
                });
                t.unshift(e[0])
            }
            this.shopCountryList.dataUpdate(i, t)
        };
        return t
    }(n.PopUp);
    g.Country = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("isoCode");
            this.addRequired("name");
            this.addOption("clickMessage", "bLXauBfZ");
            this.setOptions(e);
            this.styleArray.push("listButton country");
            if (this.clickMessage) this.styleArray.push("clickable");
            this.attributes = {
                "data-primary-key": this.isoCode
            }
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            this.createSubview(this, {
                styles: "flagIcon",
                content: this.notify("rvHW39mY", this, {
                    imageCategory: "flags",
                    imageName: this.isoCode
                })
            });
            this.createSubview(this, {
                content: this.name,
                styles: "name"
            })
        };
        return t
    }(e);
    g.Product = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("goldAmount");
            this.addRequired("identifier");
            this.addRequired("name");
            this.addRequired("price");
            this.addOption("extra", 0);
            this.addRequired("country.isoCode");
            this.addOption("clickMessage", "b2WE&eP)");
            this.setOptions(e);
            this.isoCode = this["country.isoCode"];
            this.styleArray.push("product");
            if (this.clickMessage) {
                this.styleArray.push("clickable")
            }
        }
        t.prototype.setActive = function () {
            this.styleArray.push("active")
        };
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            if (this.extra !== 0) {
                this.createSubview(this, {
                    content: this.extra + "% " + translate("payment.more"),
                    styles: "banner"
                })
            }
            this.createSubview(this, {
                content: this.notify("Llz6u&%N", this, null),
                styles: "goldIcon"
            });
            this.createSubview(this, {
                content: this.name,
                styles: "name"
            });
            var e = "";
            if (this.price !== null) {
                e = this.price.price + " " + this.price.symbol
            }
            this.createSubview(this, {
                content: e,
                styles: "price"
            })
        };
        return t
    }(e);
    g.PromotionCode = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("identifier");
            this.addRequired("Name");
            this.addOption("clickMessage", null);
            this.setOptions(e);
            this.code = "";
            this.styleArray.push("promotionalCode")
        }
        t.prototype.setActive = function () {
            this.styleArray.push("active")
        };
        t.prototype.setInactive = function () {
            if (this.styleArray.indexOf("active") !== -1) this.styleArray.splice(this.styleArray.indexOf("active"), 1)
        };
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            this.createSubview(this, {
                content: translate("payment.promotion.enter"),
                styles: "headline"
            });
            this.code = this.createSubview(this, {
                name: "PromotionCode"
            }, O.Input)
        };
        return t
    }(e);
    g.Provider = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("identifier");
            this.addRequired("name");
            this.addRequired("scoreCardCreditValue");
            this.addOption("showName", true);
            this.addOption("clickMessage", "uRF)QJYc");
            this.setOptions(e);
            this.styleArray.push("paymentProvider");
            if (this.clickMessage) {
                this.styleArray.push("clickable")
            }
        }
        t.prototype.setActive = function () {
            this.styleArray.push("active")
        };
        t.prototype.setInactive = function () {
            if (this.styleArray.indexOf("active") !== -1) this.styleArray.splice(this.styleArray.indexOf("active"), 1)
        };
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            this.createSubview(this, {
                content: this.notify("rvHW39mY", this, {
                    imageCategory: "shop",
                    imageName: this.identifier
                }),
                styles: "providerIcon"
            });
            if (this.showName) {
                this.createSubview(this, {
                    content: this.name,
                    styles: "name"
                })
            }
        };
        return t
    }(e);
    g.Window = function (i) {
        utils.__extends(e, n.Window);

        function e(i, t) {
            e.__super__.constructor.apply(this, arguments);
            this.addOption("showGold", false);
            this.setOptions(t);
            this.create()
        }
        e.prototype.addPlayerGold = function (t) {
            this.goldContainer = this.createSubview(this.headline, {
                styles: "gold"
            });
            this.createSubview(this.goldContainer, {
                styles: "icon",
                content: this.notify("Llz6u&%N", this, null)
            });
            this.createSubview(this.goldContainer, {
                content: t,
                styles: "amount"
            })
        };
        e.prototype.create = function () {
            e.__super__.create.apply(this, arguments);
            if (this.showGold) {
                this.addPlayerGold(t.gold)
            }
            this.shopView = this.createSubview(this.content, {
                name: "shopView",
                styles: "contentCurrentView",
                tag: "currentView",
                windowID: this.id
            }, g.View)
        };
        e.prototype.dataUpdate = function (i, a) {
            if (this.showGold) {
                $("#" + this.headline.id + " .gold").remove();
                this.addPlayerGold(t.gold);
                this.goldContainer.draw()
            }
            e.__super__.dataUpdate.apply(this, arguments)
        };
        return e
    }(n.Window);
    g.View = function (a) {
        utils.__extends(t, a);
        var e = "EARNGOLD";
        var i = {
            identifier: e,
            name: "Promotion-Code",
            scoreCardCreditValue: 0
        };
        var s = "promotioncode";
        var n = "sponsorpay";

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("country", {
                isoCode: "",
                name: ""
            });
            this.addOption("product", null);
            this.addOption("provider", null);
            this.addRequired("windowID");
            this.setOptions(e);
            this.products = null;
            this.providers = null
        }
        t.prototype.createHeadline = function (t, e) {
            var i = this.createSubview(t, {}, w);
            this.createSubview(i, {
                content: translate(e),
                styles: "headline"
            })
        };
        t.prototype.createProductsColumn = function () {
            var t = this.createSubview(this, {
                styles: "col"
            });
            this.createHeadline(t, "Select package");
            var e = this.createSubview(t, {
                styles: "products"
            }, w);
            this.shopProductList = this.createSubview(e, {
                styles: "productTable",
                rowClass: g.Product
            }, G);
            if (this.products) this.shopProductList.dataUpdate(null, this.products)
        };
        t.prototype.createProviderColumn = function () {
            var t = this.createSubview(this, {
                styles: "col"
            });
            this.createHeadline(t, "payment.method");
            var e = this.createSubview(t, {
                styles: "providers"
            }, w);
            if (!this.providers || this.providers.length === 0) {
                this.createSubview(e, {
                    styles: "noProviders",
                    content: translate("payment.noProvider"),
                    handleLinks: true
                })
            }
            this.shopProviderList = this.createSubview(e, {
                rowClass: g.Provider
            }, G);
            if (this.providers) this.shopProviderList.dataUpdate(null, this.providers);
            this.countryButton = this.createSubview(t, {
                icon: this.country.isoCode,
                iconCategory: "flags",
                content: this.country.name,
                clickMessage: "z1TBMcRD",
                styles: "countrySelector"
            }, k)
        };
        t.prototype.createSummaryColumn = function () {
            var t, a = null;
            this.summaryCol = this.createSubview(this, {
                styles: "col"
            });
            this.createHeadline(this.summaryCol, "payment.summary");
            var n = this.createSubview(this.summaryCol, {
                styles: "summary"
            }, w);
            if (this.product && this.products) {
                t = this.products.filter(function (t) {
                    return t.identifier === this.product
                }, this)[0];
                if (t) {
                    this.createSubview(n, {
                        goldAmount: t.goldAmount,
                        identifier: t.identifier,
                        price: t.price,
                        name: t.name,
                        "country.isoCode": t["country.isoCode"],
                        clickMessage: null,
                        extra: 0
                    }, g.Product);
                    a = t.price
                }
            }
            if (this.product === e && this.provider === s) {
                this.createSubview(n, {
                    identifier: i.identifier,
                    name: i.name,
                    clickMessage: null
                }, g.PromotionCode)
            }
            if (this.provider && this.providers) {
                t = this.providers.filter(function (t) {
                    return t.identifier === this.provider
                }, this)[0];
                if (t) {
                    this.createSubview(n, {
                        identifier: t.identifier,
                        name: t.name,
                        scoreCardCreditValue: t.scoreCardCreditValue,
                        showName: true,
                        clickMessage: null
                    }, g.Provider)
                }
            }
            this.createSubview(n, {
                clickMessage: null,
                isoCode: this.country.isoCode,
                name: this.country.name
            }, g.Country);
            if (a) {
                var r = this.createSubview(n, {
                    styles: "costs"
                });
                this.createSubview(r, {
                    styles: "divider"
                });
                this.createSubview(r, {
                    styles: "price",
                    content: a.price + " " + a.symbol
                });
                this.createSubview(r, {
                    content: translate("Cost"),
                    styles: "headline"
                });
                this.createSubview(r, {
                    content: translate("payment.taxes"),
                    styles: "taxes"
                })
            }
            var u = this.product === e || a && a.price === 0 ? "Shop" : "Paynow";
            var o = "awesome";
            var l = "f5gE1I3R";
            if (!this.providers || this.providers.length === 0) {
                o += " disabled";
                l = null
            }
            this.payButton = this.createSubview(this.summaryCol, {
                styles: o,
                content: translate(u),
                element: "a",
                attributes: {
                    href: "#"
                },
                clickMessage: l
            })
        };
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            this.createProductsColumn();
            this.createSubview(this, {
                styles: "colDivider left"
            });
            this.createProviderColumn();
            this.createSubview(this, {
                styles: "colDivider right"
            });
            this.createSummaryColumn()
        };
        t.prototype.setButtonActive = function (e) {
            var t = this.findSubviewByField("identifier", e);
            if (!t) return;
            t.setActive();
            t.draw()
        };
        t.prototype.setCountry = function (t) {
            if (!t) return;
            this.country = t;
            this.refresh()
        };
        t.prototype.setProduct = function (t) {
            if (!t) return;
            this.product = t;
            this.setButtonActive(this.product)
        };
        t.prototype.setProvider = function (e) {
            if (!e) return;
            this.provider = e;
            if (this.shopProviderList.subviews) {
                for (var t = 0; t < this.shopProviderList.subviews.length; t++) {
                    this.shopProviderList.subviews[t].setInactive()
                }
            }
            this.setButtonActive(this.provider);
            this.shopProviderList.draw();
            this.refresh()
        };
        t.prototype.dataUpdate = function (e, t) {
            if (t.products) this.products = t.products;
            if (t.providers) this.providers = t.providers;
            if (this.countryMenu) this.countryMenu.removeFromDOM();
            this.countryMenu = this.createSubview(this.controller.view, {
                dropdownSelector: "#" + this.windowID + " .dropdown.countryDropdown",
                chooserButtonSelector: "#" + this.windowID + " .listButton.countrySelector",
                itemSelector: "country",
                hidden: true,
                selectedItemID: this.country.isoCode,
                doOffsetting: false
            }, g.Countries);
            this.countryMenu.dataUpdate(e, t.countries);
            this.refresh()
        };
        t.prototype.refresh = function () {
            this.deleteAllSubviews();
            this.create();
            this.draw();
            if (this.provider) {
                this.setButtonActive(this.provider)
            }
            if (this.product) {
                this.setButtonActive(this.product)
            }
        };
        return t
    }(e);
    g.SuccessWindow = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("success", false);
            this.addOption("showIcon", false);
            this.setOptions(e);
            if (this.showIcon) {
                this.styleArray.push("with-icon")
            }
            this.create()
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            this.message = this.createSubview(this.content, {
                name: "shopView",
                styles: "contentCurrentView",
                tag: "currentView"
            }, w);
            var e = translate("payment aborted");
            var i = this.getImage("paymentFail", "shop");
            if (this.success) {
                e = translate("payment successful");
                i = this.getImage("paymentSuccess", "shop")
            }
            if (this.showIcon) {
                this.createSubview(this.message, {
                    content: i,
                    styles: "icon"
                })
            }
            this.createSubview(this.message, {
                content: e,
                styles: "text"
            });
            this.createSubview(this.message, {
                content: translate("close_window"),
                styles: "closeButton",
                clickMessage: "aBdTswLK"
            }, l)
        };
        t.prototype.dataUpdate = function (e, i) {
            t.__super__.dataUpdate.apply(this, arguments)
        };
        return t
    }(n.Window);
    g.TransactionWindow = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e);
            this.create()
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            this.transactionView = this.createSubview(this.content, {
                name: "shopView",
                styles: "contentCurrentView",
                tag: "currentView"
            }, w);
            this.createSubview(this.transactionView, {
                content: translate("payment_successful"),
                styles: "overview"
            });
            var e = this.createSubview(this.transactionView, {
                styles: "centerContainer"
            });
            this.createSubview(e, {
                content: this.notify("wrl8b7Ym", this),
                styles: "spinner"
            });
            this.createSubview(e, {
                content: translate("cancel"),
                clickMessage: "T2qxF2su"
            }, l)
        };
        t.prototype.dataUpdate = function (e, i) {
            t.__super__.dataUpdate.apply(this, arguments)
        };
        return t
    }(n.Window);
    T.Controller = function (i) {
        utils.__extends(t, i);
        var e = $("<div>").addClass("screen-lock");

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("steps", []);
            this.addOption("lockedMessages", []);
            this.addOption("started", false);
            this.addOption("skipped", false);
            this.addOption("completedSteps", 0);
            this.setOptions(e);
            this.setupSteps = 0
        }
        t.prototype["PjmTAnYn"] = function (e, i) {
            if (!this.isActive()) {
                return
            }
            var t = this.getCurrentStep();
            if (t) {
                $(".tutorial-overlay").not(".free-castle").remove();
                t._handleLocking();
                t.__syncArrow()
            }
        };
        t.prototype["HTnWZGse"] = function () {
            var t = this.view.node(),
                n = 85,
                e;
            t.find(".window-content").height("auto");
            e = t.find(".content-frame").outerHeight() + n;
            this.view.height = e;
            t.height(e);
            if (!this.targetController || !this.targetController.view) {
                $("#" + this.view.id).addClass("positionTopRight");
                return
            }
            $("#" + this.view.id).removeClass("positionTopRight");
            var i = this.targetController.view.node();
            var r = this.view.node();
            var a = parseInt(i.css("left"), 10) + i.width();
            var s = parseInt(i.css("top"), 10);
            this.updatePosition({
                x: s,
                y: a
            });
            a += 40;
            t.css("left", a + "px");
            t.css("top", s + "px")
        };
        t.prototype.start = function () {
            if (!this.skipped && this.completedSteps < this.steps.length) {
                this.__setupState();
                $("body").append($("<div>").addClass("tutorial-arrow").hide());
                $(".close-all").hide();
                var t = this.completedSteps;
                this.totalSetupsRequired = this.steps.filter(function (e, i) {
                    return i <= t && e.setupComplete !== null
                }).length;
                S = true;
                if (this.totalSetupsRequired === 0) {
                    this.beginTutorial()
                }
                this.started = true
            } else {
                this.started = false
            }
            return this.started
        };
        t.prototype.finish = function () {
            this.started = false;
            S = false;
            mTutorialFreeCastle = false;
            this.unlockScreen();
            this.resetGame();
            this.notify("MHhl2JCz", this)
        };
        t.prototype.beginTutorial = function () {
            var t = this.getCurrentStep();
            if (t && !t.complete) {
                this.__recalculateMessages();
                t.trigger()
            }
        };
        t.prototype.lockScreen = function () {
            this.unlockScreen();
            $("body").append(e)
        };
        t.prototype.unlockScreen = function () {
            $(".screen-lock.partial").remove();
            e.detach()
        };
        t.prototype.makeFrame = function (e) {
            if (!e || !e.length) {
                return
            }
            this.unlockScreen();
            var r = $("body"),
                i = $("<div class='screen-lock partial top'>"),
                a = $("<div class='screen-lock partial bottom'>"),
                s = $("<div class='screen-lock partial left'>"),
                n = $("<div class='screen-lock partial right'>"),
                t = e.offset();
            t.right = t.left + e.width();
            t.bottom = t.top + e.height();
            i.css("height", t.top);
            a.css("top", t.bottom);
            s.css("width", t.left).css("top", t.top).css("height", t.bottom - t.top);
            n.css("left", t.right).css("top", t.top).css("height", t.bottom - t.top);
            r.append(i).append(a).append(s).append(n)
        };
        t.prototype.configure = function (t) {
            if (!t || typeof t.skipped === "undefined" || typeof t.completedSteps === "undefined") {
                return
            }
            this.skipped = t.skipped;
            this.completedSteps = t.completedSteps
        };
        t.prototype.addStep = function (t) {
            if (!t.name) {
                return false
            }
            var e = new T.Step(this, t);
            this.steps.push(e);
            this.__recalculateMessages();
            return e
        };
        t.prototype.removeStep = function (t) {
            this.steps = this.steps.filter(function (e) {
                return e.name !== t
            });
            this.__recalculateMessages()
        };
        t.prototype.completeStep = function (a, i) {
            if (!a) {
                return false
            }
            if (typeof i === "undefined") {
                i = false
            }
            var t = this.getStepByName(a);
            if (!t || t.complete === true) {
                return false
            }
            t.markComplete(i);
            this.__calculateCompleteSteps();
            this.__recalculateMessages();
            this._save();
            var e = this.getCurrentStep();
            if (e && e.triggerWhenCurrent === true) {
                e.trigger()
            } else if (!e) {
                this.finish()
            }
            return t
        };
        t.prototype["m28g5SAG"] = function (t) {
            if (!t.data || !t.data.step) {
                return
            }
            this.completeStep(t.data.step)
        };
        t.prototype.next = function () {
            var t = this.getCurrentStep();
            if (t) {
                this.completeStep(t.name)
            }
        };
        t.prototype.getStepByName = function (e) {
            var t = this.steps.filter(function (t) {
                return t.name === e
            });
            return t.length ? t[0] : null
        };
        t.prototype.getCurrentStep = function () {
            var t = this.steps[this.completedSteps];
            return t || false
        };
        t.prototype.actionBlocked = function (t) {};
        t.prototype.skip = function () {
            this.skipped = true;
            S = false;
            mTutorialFreeCastle = false;
            this.unlockScreen();
            this.resetGame();
            $(".win:visible").not(".tutorial").find(".main-content").unbind("scroll");
            this.notify("IHes%CqQ", this);
            if (this.datasource) {
                this.datasource.skip();
                return true
            } else {
                return false
            }
        };
        t.prototype.resetGame = function () {
            $(".tutorial-arrow").detach();
            $(".tutorial-overlay").detach();
            $(".tutorial-highlight").removeClass("tutorial-highlight");
            if (this.view) {
                this.view.hide()
            }
            $(".win.tutorial").remove();
            if (this.targetController && this.targetController.view) {
                var t = this.targetController.view;
                t.closable = true;
                t.staticPosition = false;
                t.resetZIndex();
                t.removeClass("static");
                t.removeClass("target-window");
                t.draw()
            }
        };
        t.prototype.isActive = function () {
            return this.started === true && this.skipped === false
        };
        t.prototype.isScreenLocked = function () {
            var t = this.getCurrentStep();
            return t && (t.screenLock === true || t.frameLock === true)
        };
        t.prototype._handleSkip = function () {
            if (!this.isActive()) {
                return
            }
            if (this.getCurrentStep().name === "video") {
                this.completeStep("video");
                return
            }
            var e = translate("Are you sure you want to skip the tutorial?"),
                i = translate("Skip Tutorial"),
                t, a;
            t = function () {
                this.skip()
            }.bind(this);
            utils.dialog.confirm(this, e, i, t)
        };
        t.prototype["aBdTswLK"] = function () {
            this._handleSkip()
        };
        t.prototype["1Nl94iPB"] = function () {
            this._handleSkip()
        };
        t.prototype._save = function () {
            if (this.datasource) {
                this.datasource.setStep(this.completedSteps);
                return true
            } else {
                return false
            }
        };
        t.prototype._isCurrent = function (t) {
            var e = this.getCurrentStep();
            return t && e && e.name === t.name
        };
        t.prototype._stepSetupComplete = function (t) {
            this.setupSteps += 1;
            if (this.setupSteps === this.totalSetupsRequired) {
                this.beginTutorial()
            }
        };
        t.prototype.__calculateCompleteSteps = function () {
            var t = this.steps.filter(function (t) {
                return t.complete === true
            }).length;
            this.completedSteps = t;
            return t
        };
        t.prototype.__recalculateMessages = function () {
            var t = this.getCurrentStep();
            this.lockedMessages = t && t.messages ? t.messages : []
        };
        t.prototype.__setupState = function () {
            for (var t = 0; t < this.steps.length; t++) {
                var e = this.steps[t];
                if (e && t < this.completedSteps) {
                    e.markComplete();
                    e.setupView(this.controller)
                }
            }
            var i = this.getCurrentStep();
            if (i && i.complete === false) {
                i.setupView(this.controller)
            }
        };
        t.prototype.__reset = function () {
            this.datasource.__reset();
            this.configure(this.datasource.getCurrentStatus())
        };
        return t
    }(n.Controller);
    T.Step = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("name", "");
            this.addOption("text", "");
            this.addOption("youtubeVideo", false);
            this.addOption("pointer", null);
            this.addOption("pointerDirection", "top");
            this.addOption("showHighlight", true);
            this.addOption("popupView", T.Popup);
            this.addOption("messages", []);
            this.addOption("triggers", []);
            this.addOption("triggerWhenCurrent", true);
            this.addOption("complete", false);
            this.addOption("screenLock", true);
            this.addOption("frameLock", false);
            this.addOption("autoFrameHighlight", true);
            this.addOption("isSetup", true);
            this.addOption("setupView", function () {});
            this.addOption("setupComplete", function () {
                this.notify("_stepSetupComplete", this)
            });
            this.addOption("validation", null);
            this.addOption("validationJump", null);
            this.addOption("triggerCallback", null);
            this.addOption("completionCallback", null);
            this.addOption("overlayClickCallback", null);
            this.setOptions(e);
            if (!e.setupView && !e.setupComplete) {
                this.setupComplete = null
            }
        }

        function i(t) {
            var e = translate(t);
            return e.replace(/\n/g, "<br />")
        }

        function a() {
            var e = oe,
                t = {
                    ru: "k8DujXgHxmw",
                    de: "XKybxAkPKo8",
                    en: "4e2TpnRdAys"
                };
            return t[e] || t["en"]
        }
        t.prototype.markComplete = function (t) {
            if (typeof t !== "undefined" && t) {
                this.forced = true
            }
            if (this.completionCallback) {
                this.completionCallback()
            }
            $(".tutorial-overlay").remove();
            $(".tutorial-highlight").removeClass("tutorial-highlight");
            this.complete = true;
            return this.complete
        };
        t.prototype.setTargetController = function (t) {
            if (typeof t === "undefined") {
                return
            }
            if (this.controller.targetController && this.controller.targetController.view) {
                var e = $("#" + this.controller.targetController.view.id);
                e.find(".main-content").unbind("scroll")
            }
            this.controller.targetController = t;
            this._fixTargetWindow()
        };
        t.prototype.getTargetController = function () {
            return this.controller.targetController || null
        };
        t.prototype.releaseTargetController = function () {
            var e = this.getTargetController(),
                t = e.view;
            if (t) {
                t.closable = true;
                t.staticPosition = false;
                t.resetZIndex();
                t.removeClass("static");
                t.removeClass("target-window")
            }
            return e
        };
        t.prototype.trigger = function () {
            if (this.validation && !this.validation()) {
                if (this.validationJump) {
                    this.jumpTo(this.validationJump)
                } else {
                    this.jumpStep()
                }
                return
            }
            if (this.triggerCallback) {
                this.triggerCallback(this.controller.controller)
            }
            this._getArrow();
            this.$arrow.hide();
            this.controller.view.clean();
            var t = {
                parent: this.controller.view,
                text: i(this.text),
                stepName: this.name
            };
            if (this.youtubeVideo) {
                t.youtubeKey = a()
            }
            var e = new this.popupView(this.controller, t);
            this._showController();
            this._handlePointer();
            this._handleLocking()
        };
        t.prototype.jumpStep = function () {
            this.notify("completeStep", this.name, true)
        };
        t.prototype.jumpTo = function (i) {
            for (var t = 0, a = this.controller.steps.length; t < a; t++) {
                var e = this.controller.steps[t];
                if (e.name === i) {
                    break
                } else if (!e.complete) {
                    this.notify("completeStep", e.name, true)
                }
            }
        };
        t.prototype._handlePointer = function () {
            var t = $(this.pointer).first(),
                e = $(".win:visible").not(".tutorial").find(".main-content");
            e.unbind("scroll");
            if (!this.pointer) {
                return
            }
            if (t.length) {
                var i = function () {
                    if (!this._isCurrent()) {
                        return
                    }
                    this.$arrow.attr("class", "tutorial-arrow " + this.name);
                    this.$arrow.removeClass("top left right bottom");
                    this.$arrow.addClass(this.pointerDirection);
                    if (this.showHighlight && !this.frameLock) {
                        t.addClass("tutorial-highlight")
                    }
                    this.__syncArrow();
                    this._bindArrowScrolling(e)
                }.bind(this);
                this._revealPointer(t, e, i)
            } else {
                this.jumpStep()
            }
        };
        t.prototype._revealPointer = function (a, t, e) {
            if (!this._isCurrent()) {
                return
            }
            if (!t.length) {
                return e()
            }
            var i = a.offset().top - t.offset().top;
            if (t.height() < i) {
                t.animate({
                    scrollTop: i
                }, 1e3, e)
            } else {
                e()
            }
        };
        t.prototype._bindArrowScrolling = function (t) {
            var e = function (e) {
                if (t.find(this.pointer).length) {
                    this._handleLocking();
                    this.__syncArrow()
                }
            };
            t.unbind("scroll").scroll(e.bind(this))
        };
        t.prototype._handleLocking = function () {
            if (this.frameLock) {
                this.notify("makeFrame", $(this.pointer).first());
                this._applyClickOverlay()
            } else if (this.screenLock) {
                this.notify("lockScreen")
            } else {
                this.notify("unlockScreen")
            }
        };
        t.prototype._applyClickOverlay = function () {
            var t = $(this.pointer).first();
            if (!t.length || !this.autoFrameHighlight) {
                return
            }
            $(".tutorial-overlay").detach();
            var e = $("<div class='tutorial-overlay tutorial-highlight'>").addClass(this.name),
                a = $("body"),
                i;
            e.css("width", t.outerWidth() - 8);
            e.css("height", t.outerHeight() - 8);
            e.offset(t.offset());
            if (this.clickAction) {
                i = this.overlayClickCallback.bind(this)
            } else {
                i = function () {
                    t.click()
                }
            }
            e.click(i);
            a.append(e)
        };
        t.prototype._fixTargetWindow = function () {
            var e = this.getTargetController();
            if (e && e.view) {
                var t = e.view;
                t.closable = false;
                t.staticPosition = true;
                t.fixZIndex(999);
                t.addClass("static");
                t.addClass("target-window")
            }
        };
        t.prototype._showController = function () {
            this.controller.view.draw();
            this.controller.view.show()
        };
        t.prototype._isCurrent = function () {
            return this.name === this.controller.getCurrentStep().name
        };
        t.prototype._getArrow = function () {
            if (!this.$arrow || !this.$arrow.length) {
                this.$arrow = $(".tutorial-arrow")
            }
        };
        t.prototype.__syncArrow = function () {
            var e = $(this.pointer).first(),
                t = e.offset();
            if (e.length) {
                t.top -= this.$arrow.outerHeight() + 15;
                t.left += e.outerWidth() / 2 - this.$arrow.outerWidth() / 2;
                this.$arrow.css("top", t.top).css("left", t.left).show()
            }
            return t
        };
        return t
    }(V);
    T.DataSource = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.clientType = "Browser";
            this.skipped = false;
            this.completedSteps = 0;
            this._loadLocalStoreage()
        }
        t.prototype.getCurrentStatus = function () {
            return {
                type: this.clientType,
                skipped: this.skipped,
                completedSteps: this.completedSteps
            }
        };
        t.prototype.setStep = function (t) {
            this.completedSteps = t;
            this._save();
            return this.getCurrentStatus()
        };
        t.prototype.skip = function () {
            this.skipped = true;
            this._save();
            return this.getCurrentStatus()
        };
        t.prototype._save = function () {
            _.storeLocal.setItem("tutorial_step", this.completedSteps);
            _.storeLocal.setItem("tutorial_skipped", this.skipped.toString())
        };
        t.prototype._loadLocalStoreage = function () {
            var e = +_.storeLocal.getItem("tutorial_step") || 0;
            var t = _.storeLocal.getItem("tutorial_skipped") || false;
            if (t === "false") {
                t = false
            } else if (t === "true") {
                t = true
            }
            this.completedSteps = e;
            this.skipped = t
        };
        t.prototype.__reset = function () {
            this.completedSteps = 0;
            this.skipped = false;
            this._save()
        };
        return t
    }(m);
    T.Window = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments);
            this.styleArray.push("win tutorial info");
            this.create()
        }
        t.prototype.show = function () {
            t.__super__.show.apply(this, arguments);
            this.notify("HTnWZGse", this)
        };
        t.prototype.create = function () {
            this.container = this.content.createContainer()
        };
        t.prototype.clean = function () {
            this.container.wrapper.deleteSubviewByField("group", "popup")
        };
        return t
    }(n.Window);
    T.Popup = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("text", "");
            this.setOptions(e);
            this.create()
        }
        t.prototype.create = function () {
            this.createSubview(this.parent.container, {
                content: this.text,
                group: "popup"
            })
        };
        return t
    }(e);
    T.VideoView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addRequired("youtubeKey");
            this.setOptions(e);
            this.create()
        }
        t.prototype.create = function () {
            var t = '<iframe width="560" height="315" src="http://www.youtube.com/embed/';
            t += this.youtubeKey;
            t += '" frameborder="0" allowfullscreen></iframe>';
            this.parent.addClass("center");
            this.parent.addClass("video");
            this.createSubview(this.parent.container, {
                content: t,
                group: "popup"
            })
        };
        return t
    }(e);
    T.IntroView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.setOptions(e);
            this.create()
        }
        t.prototype.create = function () {
            this.parent.addClass("center");
            var t = this.parent.container.createSubview(this.parent.container, {
                group: "popup"
            });
            this.createSubview(t, {
                content: translate("tutorial.intro.text")
            });
            this.createSubview(t, {
                content: translate("tutorial.intro.new"),
                clickMessage: "m28g5SAG",
                data: {
                    step: "intro"
                }
            }, l);
            this.createSubview(t, {
                content: translate("tutorial.intro.skip"),
                clickMessage: "1Nl94iPB"
            }, l)
        };
        return t
    }(e);
    T.ResourceView = function (i) {
        utils.__extends(t, i);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("stepName", "");
            this.setOptions(e);
            this.create()
        }

        function e(i, s, a) {
            this.createSubview(i, {
                content: translate(s)
            });
            var t = this.createSubview(i, {
                styles: "resource-container"
            });
            for (var e = 0; e < a.length; e++) {
                var n = a[e];
                t.createSubview(t, {
                    styles: "resource",
                    content: this.notify("rvHW39mY", this, {
                        imageName: n,
                        imageCategory: "resources"
                    })
                })
            }
            t.clearfix()
        }
        t.prototype.create = function () {
            var t, i = ["1", "2", "3"],
                a = ["4", "5", "6"];
            this.parent.addClass("resources");
            t = this.createSubview(this.parent.container, {
                group: "popup"
            });
            e.apply(this, [t, "tutorial.buildings.resourceText1", i]);
            e.apply(this, [t, "tutorial.buildings.resourceText2", a]);
            this.createSubview(t, {
                content: translate("tutorial.info.confirm"),
                clickMessage: "m28g5SAG",
                data: {
                    step: this.stepName
                }
            }, l)
        };
        return t
    }(e);
    T.InfoView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("text", "");
            this.addOption("stepName", "");
            this.setOptions(e);
            this.create()
        }
        t.prototype.create = function () {
            var t = this.createSubview(this.parent.container, {
                group: "popup"
            });
            this.createSubview(t, {
                content: this.text
            });
            this.createSubview(t, {
                content: translate("tutorial.info.confirm"),
                clickMessage: "m28g5SAG",
                data: {
                    step: this.stepName
                }
            }, l)
        };
        return t
    }(e);
    T.CenterView = function (e) {
        utils.__extends(t, e);

        function t(e, i) {
            t.__super__.constructor.apply(this, arguments)
        }
        t.prototype.create = function () {
            t.__super__.create.apply(this, arguments);
            this.parent.addClass("center")
        };
        return t
    }(T.InfoView);
    T.FinaliseView = function (e) {
        utils.__extends(t, e);

        function t(i, e) {
            t.__super__.constructor.apply(this, arguments);
            this.addOption("text", "");
            this.addOption("stepName", "");
            this.setOptions(e);
            this.create()
        }
        t.prototype.create = function () {
            this.parent.addClass("finalise");
            var e = this.createSubview(this.parent.container, {
                group: "popup"
            });
            this.createSubview(e, {
                content: this.text
            });
            var t = this.createSubview(e, {
                styles: "help-wrapper"
            });
            t.createSubview(t, {
                styles: "text",
                content: translate("tutorial.info.helpIconText")
            });
            t.createSubview(t, {
                styles: "icon",
                content: this.notify("rvHW39mY", this, {
                    imageName: "Help",
                    imageCategory: "bottombar"
                })
            });
            t.clearfix();
            this.createSubview(e, {
                content: translate("tutorial.info.finalise"),
                clickMessage: "m28g5SAG",
                data: {
                    step: this.stepName
                }
            }, l)
        };
        return t
    }(e);
    T.Steps = function () {
        var t = ["intro", "buildings", "units", "missions", "battle"];
        return {
            attach: function (n) {
                for (var e = 0; e < t.length; e++) {
                    var i = T.Steps[t[e]];
                    for (var a in i) {
                        var s = i[a];
                        s.name = a;
                        n.addStep(s)
                    }
                }
            }
        }
    }();
    T.Steps.intro = {
        video: {
            popupView: T.VideoView,
            screenLock: true,
            youtubeVideo: true,
            completionCallback: function () {
                this.controller.view.removeClass("video");
                this.controller.view.removeClass("center")
            }
        },
        intro: {
            popupView: T.IntroView,
            completionCallback: function () {
                this.controller.view.removeClass("center")
            }
        },
        welcome: {
            text: "tutorial.intro.welcome",
            pointer: ".topbarImageContainer",
            pointerDirection: "left",
            frameLock: true
        }
    };
    T.Steps.buildings = {
        resourceExplanation: {
            pointer: ".win.info .button",
            pointerDirection: "right",
            popupView: T.ResourceView,
            messages: ["AAeX&RO7", "3)mX3VMQ"],
            triggerCallback: function (e) {
                var i = e.findControllerByName(t.firstHabitat.id);
                this.setTargetController(i)
            },
            setupView: function (e) {
                e.createOwnHabitatWindow(t.firstHabitat);
                var i = e.findControllerByName(t.firstHabitat.id);
                this.setTargetController(i)
            },
            completionCallback: function () {
                this.controller.view.removeClass("resources")
            },
            setupComplete: null
        },
        viewLumberjack: {
            pointer: ".win.habitat .lumberjack",
            text: "tutorial.buildings.viewLumberjack",
            frameLock: true,
            messages: ["AAeX&RO7"]
        },
        lumberjackInfo: {
            pointer: ".win.info .button",
            pointerDirection: "right",
            text: "tutorial.buildings.lumberjackInfo",
            popupView: T.InfoView,
            messages: ["AAeX&RO7", "0scd3paU", "VpY2KZTw", "SVNznI8l"],
            setupView: function (e) {
                var t = this.getTargetController();
                t["3)mX3VMQ"]({
                    name: "content",
                    primaryKey: 105
                });
                setTimeout(utils.bind(this.setupComplete, this), 650)
            }
        },
        upgradeLumberjack: {
            pointer: ".buildbutton",
            text: "tutorial.buildings.upgradeLumberjack",
            messages: ["AAeX&RO7", "0scd3paU"],
            triggerCallback: function () {
                $(".habitatStorageBuildingElement .buildbutton").addClass("disabled")
            },
            completionCallback: function () {
                $(".buildbutton").first().addClass("disabled")
            },
            validation: function () {
                return !$(".buildbutton").first().hasClass("buildbuttondisabled")
            }
        },
        buildingUpgradeInfo: {
            pointer: ".buildingUpgrade .buildingimage",
            pointerDirection: "left",
            showHighlight: false,
            popupView: T.InfoView,
            text: "tutorial.buildings.buildingUpgradeInfo",
            messages: ["AAeX&RO7", "0scd3paU", "SVNznI8l"],
            triggerCallback: function () {
                $(".buildbutton").first().addClass("disabled");
                $(".habitatStorageBuildingElement .buildbutton").addClass("disabled")
            },
            completionCallback: function () {
                $(".habitatStorageBuildingElement .buildbutton").removeClass("disabled")
            }
        },
        upgradeStore: {
            pointer: ".habitatStorageBuildingElement .buildbutton",
            text: "tutorial.buildings.upgradeStore",
            messages: ["AAeX&RO7", "0scd3paU", "SVNznI8l"],
            validation: function () {
                return !$(".habitatStorageBuildingElement .buildbutton").first().hasClass("buildbuttondisabled")
            },
            completionCallback: function () {
                $(".habitatStorageBuildingElement .buildbutton").addClass("disabled")
            }
        },
        buildingListTab: {
            pointer: ".buildingList.tab",
            pointerDirection: "left",
            text: "tutorial.buildings.buildingListTab",
            messages: ["0scd3paU", "VpY2KZTw", "SVNznI8l"]
        }
    };
    T.Steps.units = {
        openArsenal: {
            pointer: ".fixedBuildingList .building:nth-child(2)",
            pointerDirection: "left",
            text: "tutorial.units.openArsenal",
            messages: ["AAeX&RO7", "0scd3paU", "VpY2KZTw", "SVNznI8l"],
            frameLock: true,
            setupView: function (e) {
                var t = this.getTargetController();
                t["AAeX&RO7"]({
                    data: {
                        action: "buildingList",
                        habitat: t.view.habitat
                    }
                });
                setTimeout(utils.bind(this.setupComplete, this), 650)
            }
        },
        recruitUnitSelection: {
            pointer: ".recruitUnits .unitElement:nth-child(1)",
            pointerDirection: "left",
            text: "tutorial.units.recruitUnit",
            messages: ["AAeX&RO7", "0scd3paU", "VpY2KZTw", "SVNznI8l", "qeuhDHxS", "upM8yCA)"],
            setupView: function (e) {
                var t = this.getTargetController();
                t["rkg0%f3x"]({
                    buildingPrimaryKey: 1304,
                    group: "BuildingElement"
                });
                this.setupComplete()
            },
            validation: function () {
                return y[1].getMaxRecruiting(t.firstHabitat) > 0
            },
            validationJump: "backFromArsenal"
        },
        recruitUnitExecution: {
            pointer: ".recruitUnits .unitElement:nth-child(1) > .button",
            pointerDirection: "left",
            text: "tutorial.units.recruitUnit",
            messages: ["AAeX&RO7", "0scd3paU", "VpY2KZTw", "SVNznI8l", "qeuhDHxS", "upM8yCA)"]
        },
        backFromArsenal: {
            pointer: ".headline .gfxButton:visible",
            pointerDirection: "left",
            text: "tutorial.units.backFromArsenal",
            frameLock: true,
            messages: ["AAeX&RO7", "VpY2KZTw", "SVNznI8l", "rbmpbo3v", "nJyLJ65E", "qeuhDHxS", "upM8yCA)"]
        }
    };
    T.Steps.missions = {
        openTavern: {
            pointer: ".fixedBuildingList .building:nth-child(3)",
            pointerDirection: "left",
            text: "tutorial.missions.openTavern",
            messages: ["AAeX&RO7", "0scd3paU", "VpY2KZTw", "SVNznI8l", "z&iOKe3K", "LUv0UDdp"],
            frameLock: true,
            setupView: function (e) {
                var t = this.getTargetController();
                t["AAeX&RO7"]({
                    data: {
                        action: "buildingList",
                        habitat: t.view.habitat
                    },
                    tutorialForce: true
                });
                setTimeout(utils.bind(this.setupComplete, this), 650)
            }
        },
        performMission: {
            pointer: ".missionListItem:nth-child(5) .button",
            text: "tutorial.missions.performMission",
            messages: ["AAeX&RO7", "0scd3paU", "VpY2KZTw", "SVNznI8l"],
            setupView: function (e) {
                var t = this.getTargetController();
                t["rkg0%f3x"]({
                    buildingPrimaryKey: 1102,
                    group: "BuildingElement"
                });
                setTimeout(utils.bind(this.setupComplete, this), 650)
            },
            validation: function () {
                var t = $(".missionListItem:nth-child(5) .button").first();
                return !t.hasClass("disabled") && !t.hasClass("speedup")
            }
        },
        missionTimerInfo: {
            pointer: ".win.info .button",
            pointerDirection: "right",
            popupView: T.InfoView,
            text: "tutorial.missions.performMission",
            messages: ["AAeX&RO7", "0scd3paU", "VpY2KZTw", "SVNznI8l", "z&iOKe3K", "LUv0UDdp"],
            completionCallback: function () {
                var t = this.releaseTargetController();
                t["aBdTswLK"](t.view)
            },
            triggerCallback: function () {
                $(".missionListItem .counter").addClass("tutorial-highlight")
            }
        }
    };
    T.Steps.battle = {
        freeCastleInfo: {
            text: "tutorial.battle.freeCastleInfo",
            messages: ["3qrKseJV"],
            pointer: ".free-castle",
            frameLock: true,
            autoFrameHighlight: false,
            triggerCallback: function (i) {
                window.mTutorialFreeCastle = true;
                var a = i.subcontroller[0],
                    s = a.datasource,
                    r = s.getFreeCastles(),
                    e = s.getClosestCastle(t.firstHabitat, r);
                if (e && typeof e.id !== "undefined") {
                    var n = a.view.getTileCenterCoords(e.mapX, e.mapY);
                    $overlay = $("<div class='tutorial-overlay tutorial-highlight free-castle'>");
                    $overlay.css("left", n.x).css("top", n.y);
                    $overlay.appendTo($("body"));
                    $overlay.click(function () {
                        i.createHabitatWindow(e)
                    })
                }
            },
            validation: function () {
                var e = 0;
                for (var i in t.firstHabitat.stats.units.own) {
                    var a = t.firstHabitat.stats.units.own[i];
                    e += a
                }
                return e > 0
            },
            validationJump: "finalInfo"
        },
        attackFreeCastle: {
            pointer: ".actions .button",
            pointerDirection: "left",
            text: "tutorial.battle.attackFreeCastle",
            messages: ["Yoqka19h"],
            setupView: function (i) {
                window.mTutorialFreeCastle = true;
                var a = i.subcontroller[0].datasource,
                    s = a.getFreeCastles(),
                    e = a.getClosestCastle(t.firstHabitat, s);
                if (e && typeof e.id !== "undefined") {
                    i.createHabitatWindow(e);
                    var n = i.findControllerByName(e.id);
                    this.setTargetController(n)
                }
            },
            setupComplete: null
        },
        attackInfo: {
            pointer: ".foreignAction .unitElement .maxInput .button",
            text: "tutorial.battle.attackInfo",
            messages: ["0scd3paU"],
            setupView: function (i) {
                var e = this.getTargetController(),
                    t = e.habitat;
                t.name = translate("Renegade") + " " + t.id;
                e["cFO-Ea0U"]({
                    data: {
                        action: "attack",
                        foreignHabitat: t
                    }
                });
                setTimeout(utils.bind(this.setupComplete, this), 200)
            },
            triggerCallback: function (e) {
                var t = this.releaseTargetController();
                if (t.view) {
                    t["aBdTswLK"](t.view)
                }
                if (t.habitat) {
                    var i = e.findControllerByName("ForeignHabitat_attack_" + t.habitat.id);
                    this.setTargetController(i)
                }
            }
        },
        attackExecution: {
            pointer: ".foreignAction .actionButton .button",
            pointerDirection: "left",
            text: "tutorial.battle.attackInfo",
            messages: ["0scd3paU"],
            completionCallback: function () {
                window.mTutorialFreeCastle = false
            }
        },
        finalInfo: {
            pointer: ".win.info .button",
            pointerDirection: "right",
            text: "tutorial.battle.finalInfo",
            popupView: T.FinaliseView,
            screenLock: false,
            messages: ["qsh7)BXL", "3qrKseJV", "Yoqka19h", "FMUHNbNx"]
        }
    }
})();